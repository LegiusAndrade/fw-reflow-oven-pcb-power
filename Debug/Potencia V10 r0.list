
Potencia V10 r0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009968  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009b40  08009b40  00019b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b80  08009b80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b80  08009b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b88  08009b88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b8c  08009b8c  00019b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e94  2000000c  08009b9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea0  08009b9c  00020ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8f9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003152  00000000  00000000  0003a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  0003dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ad  00000000  00000000  0003f298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bad  00000000  00000000  00040545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aed4  00000000  00000000  000610f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc501  00000000  00000000  0007bfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006830  00000000  00000000  001584c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0015ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b28 	.word	0x08009b28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08009b28 	.word	0x08009b28

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cf6:	f001 ffb2 	bl	8002c5e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cfa:	f000 f93d 	bl	8000f78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cfe:	f000 fe35 	bl	800196c <MX_GPIO_Init>
	MX_DMA_Init();
 8000d02:	f000 fdf9 	bl	80018f8 <MX_DMA_Init>
	MX_ADC1_Init();
 8000d06:	f000 f981 	bl	800100c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000d0a:	f000 fa07 	bl	800111c <MX_ADC2_Init>
	MX_TIM2_Init();
 8000d0e:	f000 fba5 	bl	800145c <MX_TIM2_Init>
	MX_TIM16_Init();
 8000d12:	f000 fd55 	bl	80017c0 <MX_TIM16_Init>
	MX_SPI1_Init();
 8000d16:	f000 fa87 	bl	8001228 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000d1a:	f000 fd9d 	bl	8001858 <MX_USART2_UART_Init>
	MX_TIM8_Init();
 8000d1e:	f000 fbeb 	bl	80014f8 <MX_TIM8_Init>
	MX_TIM1_Init();
 8000d22:	f000 fabf 	bl	80012a4 <MX_TIM1_Init>
	MX_TIM15_Init();
 8000d26:	f000 fc9f 	bl	8001668 <MX_TIM15_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); // Calibrate ADC
 8000d2a:	217f      	movs	r1, #127	; 0x7f
 8000d2c:	487c      	ldr	r0, [pc, #496]	; (8000f20 <main+0x230>)
 8000d2e:	f003 fa43 	bl	80041b8 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED); // Calibrate ADC
 8000d32:	217f      	movs	r1, #127	; 0x7f
 8000d34:	487b      	ldr	r0, [pc, #492]	; (8000f24 <main+0x234>)
 8000d36:	f003 fa3f 	bl	80041b8 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000d3a:	487b      	ldr	r0, [pc, #492]	; (8000f28 <main+0x238>)
 8000d3c:	f005 ff52 	bl	8006be4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, Adc1Val, 2); // Start the ADC in DMA mode
 8000d40:	2202      	movs	r2, #2
 8000d42:	497a      	ldr	r1, [pc, #488]	; (8000f2c <main+0x23c>)
 8000d44:	4876      	ldr	r0, [pc, #472]	; (8000f20 <main+0x230>)
 8000d46:	f002 fbcd 	bl	80034e4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, Adc2Val, 3); // Start the ADC in DMA mode
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	4978      	ldr	r1, [pc, #480]	; (8000f30 <main+0x240>)
 8000d4e:	4875      	ldr	r0, [pc, #468]	; (8000f24 <main+0x234>)
 8000d50:	f002 fbc8 	bl	80034e4 <HAL_ADC_Start_DMA>
	hdma_adc1.XferCpltCallback = &DMACallbackADC1;
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <main+0x244>)
 8000d56:	4a78      	ldr	r2, [pc, #480]	; (8000f38 <main+0x248>)
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_adc2.XferCpltCallback = &DMACallbackADC2;
 8000d5a:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <main+0x24c>)
 8000d5c:	4a78      	ldr	r2, [pc, #480]	; (8000f40 <main+0x250>)
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim16);
 8000d60:	4878      	ldr	r0, [pc, #480]	; (8000f44 <main+0x254>)
 8000d62:	f005 ff3f 	bl	8006be4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000d66:	4878      	ldr	r0, [pc, #480]	; (8000f48 <main+0x258>)
 8000d68:	f005 ff3c 	bl	8006be4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4875      	ldr	r0, [pc, #468]	; (8000f44 <main+0x254>)
 8000d70:	f006 f966 	bl	8007040 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4874      	ldr	r0, [pc, #464]	; (8000f48 <main+0x258>)
 8000d78:	f006 f962 	bl	8007040 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM HIN e LIN
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	4873      	ldr	r0, [pc, #460]	; (8000f4c <main+0x25c>)
 8000d80:	f005 fffc 	bl	8006d7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //FAN1
 8000d84:	2104      	movs	r1, #4
 8000d86:	4870      	ldr	r0, [pc, #448]	; (8000f48 <main+0x258>)
 8000d88:	f005 fff8 	bl	8006d7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); //FAN2
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4870      	ldr	r0, [pc, #448]	; (8000f50 <main+0x260>)
 8000d90:	f005 fff4 	bl	8006d7c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3); // turn on complementary channel
 8000d94:	2108      	movs	r1, #8
 8000d96:	486d      	ldr	r0, [pc, #436]	; (8000f4c <main+0x25c>)
 8000d98:	f007 fc86 	bl	80086a8 <HAL_TIMEx_PWMN_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000d9c:	4b6a      	ldr	r3, [pc, #424]	; (8000f48 <main+0x258>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0);
 8000da4:	4b6a      	ldr	r3, [pc, #424]	; (8000f50 <main+0x260>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34

	Hw_Buck_Init();
 8000dac:	f001 fa06 	bl	80021bc <Hw_Buck_Init>
	Init_MAX31855(&hspi1, CS_MAX31855_GPIO_Port, CS_MAX31855_Pin);
 8000db0:	2210      	movs	r2, #16
 8000db2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000db6:	4867      	ldr	r0, [pc, #412]	; (8000f54 <main+0x264>)
 8000db8:	f008 fca6 	bl	8009708 <Init_MAX31855>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		int8_t i = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
		uint32_t u32Temp = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
		if (sStatusPower.Flags.CalculatePD)
 8000dc4:	4b64      	ldr	r3, [pc, #400]	; (8000f58 <main+0x268>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d036      	beq.n	8000e40 <main+0x150>
		{
			sStatusPower.Flags.CalculatePD = 0;
 8000dd2:	4a61      	ldr	r2, [pc, #388]	; (8000f58 <main+0x268>)
 8000dd4:	7a13      	ldrb	r3, [r2, #8]
 8000dd6:	f36f 0300 	bfc	r3, #0, #1
 8000dda:	7213      	strb	r3, [r2, #8]
			i = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71fb      	strb	r3, [r7, #7]
			u32Temp = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
			for (i = 0; i < BUFFER_PD; i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	e00f      	b.n	8000e0a <main+0x11a>
			{
				u32Temp += AdValuePD[i];
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4a5b      	ldr	r2, [pc, #364]	; (8000f5c <main+0x26c>)
 8000df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	603b      	str	r3, [r7, #0]
			for (i = 0; i < BUFFER_PD; i++)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	ddeb      	ble.n	8000dea <main+0xfa>
			}
			ValuePD = u32Temp / BUFFER_PD;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <main+0x270>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <main+0x274>)
 8000e20:	801a      	strh	r2, [r3, #0]
			ValuePD = (uint16_t) (((uint32_t) ValuePD * (uint32_t) PD_MULT) / (uint32_t) PD_DIV);
 8000e22:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <main+0x274>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	4613      	mov	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	4a4d      	ldr	r2, [pc, #308]	; (8000f68 <main+0x278>)
 8000e34:	fba2 2303 	umull	r2, r3, r2, r3
 8000e38:	099b      	lsrs	r3, r3, #6
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <main+0x274>)
 8000e3e:	801a      	strh	r2, [r3, #0]
		}
		if (sStatusPower.Flags.CalculateVBUS)
 8000e40:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <main+0x268>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d035      	beq.n	8000eba <main+0x1ca>
		{

			sStatusPower.Flags.CalculateVBUS = false;
 8000e4e:	4a42      	ldr	r2, [pc, #264]	; (8000f58 <main+0x268>)
 8000e50:	7a13      	ldrb	r3, [r2, #8]
 8000e52:	f36f 0300 	bfc	r3, #0, #1
 8000e56:	7213      	strb	r3, [r2, #8]
			i = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
			u32Temp = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603b      	str	r3, [r7, #0]
			for (i = 0; i < BUFFER_VBUS; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	e00f      	b.n	8000e86 <main+0x196>
			{
				u32Temp += AdValueVBUS[i];
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4a40      	ldr	r2, [pc, #256]	; (8000f6c <main+0x27c>)
 8000e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	603b      	str	r3, [r7, #0]
			for (i = 0; i < BUFFER_VBUS; i++)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	3301      	adds	r3, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	ddeb      	ble.n	8000e66 <main+0x176>
			}
			ValueVBUS = u32Temp / BUFFER_VBUS;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <main+0x280>)
 8000e94:	801a      	strh	r2, [r3, #0]
			ValueVBUS = (uint16_t) (((uint32_t) ValueVBUS * (uint32_t) VBUS_MULT) / (uint32_t) VBUS_DIV);
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <main+0x280>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f240 2373 	movw	r3, #627	; 0x273
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	4a30      	ldr	r2, [pc, #192]	; (8000f68 <main+0x278>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	099b      	lsrs	r3, r3, #6
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <main+0x280>)
 8000eb0:	801a      	strh	r2, [r3, #0]
			sStatusPower.PowerInformation.InputVoltage = ValueVBUS;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <main+0x280>)
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <main+0x268>)
 8000eb8:	801a      	strh	r2, [r3, #0]
		}
		if (sStatusPower.Flags.CalculateNTC)
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <main+0x268>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01b      	beq.n	8000f00 <main+0x210>
		{
			sStatusPower.Flags.CalculateNTC = false;
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <main+0x268>)
 8000eca:	7a13      	ldrb	r3, [r2, #8]
 8000ecc:	f36f 0300 	bfc	r3, #0, #1
 8000ed0:	7213      	strb	r3, [r2, #8]
			i = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71fb      	strb	r3, [r7, #7]
			u32Temp = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
			for (i = 0; i < BUFFER_NTC; i++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	71fb      	strb	r3, [r7, #7]
			{
				u32Temp += AdValueNTC[i];
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <main+0x284>)
 8000ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	603b      	str	r3, [r7, #0]
			for (i = 0; i < BUFFER_NTC; i++)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	71fb      	strb	r3, [r7, #7]
				u32Temp += AdValueNTC[i];
 8000efe:	e7ee      	b.n	8000ede <main+0x1ee>
			else
			{
				sFlagsErrors.ErrorNTCDissipator = false;
			}
		}
		SetOutputVoltage(1002);
 8000f00:	f240 30ea 	movw	r0, #1002	; 0x3ea
 8000f04:	f001 f9aa 	bl	800225c <SetOutputVoltage>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 16000);
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <main+0x258>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 16000);
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <main+0x260>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
	{
 8000f1c:	e74e      	b.n	8000dbc <main+0xcc>
 8000f1e:	bf00      	nop
 8000f20:	20000038 	.word	0x20000038
 8000f24:	200000a4 	.word	0x200000a4
 8000f28:	200002e0 	.word	0x200002e0
 8000f2c:	200004a0 	.word	0x200004a0
 8000f30:	200004a8 	.word	0x200004a8
 8000f34:	20000110 	.word	0x20000110
 8000f38:	08001dc5 	.word	0x08001dc5
 8000f3c:	20000170 	.word	0x20000170
 8000f40:	08001e19 	.word	0x08001e19
 8000f44:	200003c4 	.word	0x200003c4
 8000f48:	20000294 	.word	0x20000294
 8000f4c:	2000032c 	.word	0x2000032c
 8000f50:	20000378 	.word	0x20000378
 8000f54:	200001d0 	.word	0x200001d0
 8000f58:	2000002c 	.word	0x2000002c
 8000f5c:	200004b4 	.word	0x200004b4
 8000f60:	cccccccd 	.word	0xcccccccd
 8000f64:	20000c9c 	.word	0x20000c9c
 8000f68:	10624dd3 	.word	0x10624dd3
 8000f6c:	200004c8 	.word	0x200004c8
 8000f70:	20000c9e 	.word	0x20000c9e
 8000f74:	200004cc 	.word	0x200004cc

08000f78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	2238      	movs	r2, #56	; 0x38
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f008 fd94 	bl	8009ab4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f003 ff80 	bl	8004ea0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 34;
 8000fb6:	2322      	movs	r3, #34	; 0x22
 8000fb8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 f876 	bl	80050bc <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000fd6:	f001 fa03 	bl	80023e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fda:	230f      	movs	r3, #15
 8000fdc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fb7a 	bl	80056ec <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000ffe:	f001 f9ef 	bl	80023e0 <Error_Handler>
	}
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	; 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2220      	movs	r2, #32
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 fd45 	bl	8009ab4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <MX_ADC1_Init+0x104>)
 800102c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001030:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_ADC1_Init+0x104>)
 8001034:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001038:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <MX_ADC1_Init+0x104>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <MX_ADC1_Init+0x104>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <MX_ADC1_Init+0x104>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <MX_ADC1_Init+0x104>)
 800104e:	2201      	movs	r2, #1
 8001050:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <MX_ADC1_Init+0x104>)
 8001054:	2208      	movs	r2, #8
 8001056:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <MX_ADC1_Init+0x104>)
 800105a:	2200      	movs	r2, #0
 800105c:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <MX_ADC1_Init+0x104>)
 8001060:	2201      	movs	r2, #1
 8001062:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 2;
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_ADC1_Init+0x104>)
 8001066:	2202      	movs	r2, #2
 8001068:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <MX_ADC1_Init+0x104>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_ADC1_Init+0x104>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_ADC1_Init+0x104>)
 800107a:	2200      	movs	r2, #0
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_ADC1_Init+0x104>)
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_ADC1_Init+0x104>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_ADC1_Init+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <MX_ADC1_Init+0x104>)
 8001098:	f002 f89a 	bl	80031d0 <HAL_ADC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x9a>
	{
		Error_Handler();
 80010a2:	f001 f99d 	bl	80023e0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4817      	ldr	r0, [pc, #92]	; (8001110 <MX_ADC1_Init+0x104>)
 80010b2:	f003 f8e3 	bl	800427c <HAL_ADCEx_MultiModeConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0xb4>
	{
		Error_Handler();
 80010bc:	f001 f990 	bl	80023e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_ADC1_Init+0x108>)
 80010c2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c4:	2306      	movs	r3, #6
 80010c6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80010c8:	2306      	movs	r3, #6
 80010ca:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010cc:	237f      	movs	r3, #127	; 0x7f
 80010ce:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d0:	2304      	movs	r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_ADC1_Init+0x104>)
 80010de:	f002 fad3 	bl	8003688 <HAL_ADC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0xe0>
	{
		Error_Handler();
 80010e8:	f001 f97a 	bl	80023e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_ADC1_Init+0x10c>)
 80010ee:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80010f0:	230c      	movs	r3, #12
 80010f2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_ADC1_Init+0x104>)
 80010fa:	f002 fac5 	bl	8003688 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0xfc>
	{
		Error_Handler();
 8001104:	f001 f96c 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000038 	.word	0x20000038
 8001114:	04300002 	.word	0x04300002
 8001118:	3ef08000 	.word	0x3ef08000

0800111c <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001122:	463b      	mov	r3, r7
 8001124:	2220      	movs	r2, #32
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 fcc3 	bl	8009ab4 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001130:	4a39      	ldr	r2, [pc, #228]	; (8001218 <MX_ADC2_Init+0xfc>)
 8001132:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001136:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800113a:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_ADC2_Init+0xf8>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001148:	4b32      	ldr	r3, [pc, #200]	; (8001214 <MX_ADC2_Init+0xf8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001150:	2201      	movs	r2, #1
 8001152:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001154:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001156:	2208      	movs	r2, #8
 8001158:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <MX_ADC2_Init+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001162:	2201      	movs	r2, #1
 8001164:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 3;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001168:	2203      	movs	r2, #3
 800116a:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_ADC2_Init+0xf8>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_ADC2_Init+0xf8>)
 800117c:	2200      	movs	r2, #0
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_ADC2_Init+0xf8>)
 800118a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_ADC2_Init+0xf8>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001198:	481e      	ldr	r0, [pc, #120]	; (8001214 <MX_ADC2_Init+0xf8>)
 800119a:	f002 f819 	bl	80031d0 <HAL_ADC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC2_Init+0x8c>
	{
		Error_Handler();
 80011a4:	f001 f91c 	bl	80023e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_ADC2_Init+0x100>)
 80011aa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80011b0:	2305      	movs	r3, #5
 80011b2:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b4:	237f      	movs	r3, #127	; 0x7f
 80011b6:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b8:	2304      	movs	r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4813      	ldr	r0, [pc, #76]	; (8001214 <MX_ADC2_Init+0xf8>)
 80011c6:	f002 fa5f 	bl	8003688 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC2_Init+0xb8>
	{
		Error_Handler();
 80011d0:	f001 f906 	bl	80023e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_ADC2_Init+0x104>)
 80011d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80011d8:	230c      	movs	r3, #12
 80011da:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <MX_ADC2_Init+0xf8>)
 80011e2:	f002 fa51 	bl	8003688 <HAL_ADC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC2_Init+0xd4>
	{
		Error_Handler();
 80011ec:	f001 f8f8 	bl	80023e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_ADC2_Init+0x108>)
 80011f2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80011f4:	2312      	movs	r3, #18
 80011f6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_ADC2_Init+0xf8>)
 80011fe:	f002 fa43 	bl	8003688 <HAL_ADC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC2_Init+0xf0>
	{
		Error_Handler();
 8001208:	f001 f8ea 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000a4 	.word	0x200000a4
 8001218:	50000100 	.word	0x50000100
 800121c:	10c00010 	.word	0x10c00010
 8001220:	32601000 	.word	0x32601000
 8001224:	3ef08000 	.word	0x3ef08000

08001228 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_SPI1_Init+0x74>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <MX_SPI1_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_SPI1_Init+0x74>)
 8001234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001238:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_SPI1_Init+0x74>)
 800123c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001240:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_SPI1_Init+0x74>)
 8001244:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001248:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_SPI1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_SPI1_Init+0x74>)
 8001258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_SPI1_Init+0x74>)
 8001260:	2228      	movs	r2, #40	; 0x28
 8001262:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <MX_SPI1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_SPI1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_SPI1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_SPI1_Init+0x74>)
 8001278:	2207      	movs	r2, #7
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_SPI1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_SPI1_Init+0x74>)
 8001284:	2208      	movs	r2, #8
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_SPI1_Init+0x74>)
 800128a:	f004 fe3b 	bl	8005f04 <HAL_SPI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 8001294:	f001 f8a4 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001d0 	.word	0x200001d0
 80012a0:	40013000 	.word	0x40013000

080012a4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0a0      	sub	sp, #128	; 0x80
 80012a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80012c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2234      	movs	r2, #52	; 0x34
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f008 fbe1 	bl	8009ab4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012f2:	4b58      	ldr	r3, [pc, #352]	; (8001454 <MX_TIM1_Init+0x1b0>)
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <MX_TIM1_Init+0x1b4>)
 80012f6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 9;
 80012f8:	4b56      	ldr	r3, [pc, #344]	; (8001454 <MX_TIM1_Init+0x1b0>)
 80012fa:	2209      	movs	r2, #9
 80012fc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b55      	ldr	r3, [pc, #340]	; (8001454 <MX_TIM1_Init+0x1b0>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 16999;
 8001304:	4b53      	ldr	r3, [pc, #332]	; (8001454 <MX_TIM1_Init+0x1b0>)
 8001306:	f244 2267 	movw	r2, #16999	; 0x4267
 800130a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b51      	ldr	r3, [pc, #324]	; (8001454 <MX_TIM1_Init+0x1b0>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001312:	4b50      	ldr	r3, [pc, #320]	; (8001454 <MX_TIM1_Init+0x1b0>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <MX_TIM1_Init+0x1b0>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131e:	484d      	ldr	r0, [pc, #308]	; (8001454 <MX_TIM1_Init+0x1b0>)
 8001320:	f005 fc08 	bl	8006b34 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x8a>
	{
		Error_Handler();
 800132a:	f001 f859 	bl	80023e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	673b      	str	r3, [r7, #112]	; 0x70
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001338:	4619      	mov	r1, r3
 800133a:	4846      	ldr	r0, [pc, #280]	; (8001454 <MX_TIM1_Init+0x1b0>)
 800133c:	f006 faf2 	bl	8007924 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8001346:	f001 f84b 	bl	80023e0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800134a:	4842      	ldr	r0, [pc, #264]	; (8001454 <MX_TIM1_Init+0x1b0>)
 800134c:	f005 fe16 	bl	8006f7c <HAL_TIM_IC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xb6>
	{
		Error_Handler();
 8001356:	f001 f843 	bl	80023e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800135a:	483e      	ldr	r0, [pc, #248]	; (8001454 <MX_TIM1_Init+0x1b0>)
 800135c:	f005 fcac 	bl	8006cb8 <HAL_TIM_PWM_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 8001366:	f001 f83b 	bl	80023e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	667b      	str	r3, [r7, #100]	; 0x64
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	66bb      	str	r3, [r7, #104]	; 0x68
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001376:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800137a:	4619      	mov	r1, r3
 800137c:	4835      	ldr	r0, [pc, #212]	; (8001454 <MX_TIM1_Init+0x1b0>)
 800137e:	f007 fa47 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0xe8>
	{
		Error_Handler();
 8001388:	f001 f82a 	bl	80023e0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800138c:	2300      	movs	r3, #0
 800138e:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001390:	2301      	movs	r3, #1
 8001392:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigIC.ICFilter = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	482b      	ldr	r0, [pc, #172]	; (8001454 <MX_TIM1_Init+0x1b0>)
 80013a6:	f006 f90c 	bl	80075c2 <HAL_TIM_IC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x110>
	{
		Error_Handler();
 80013b0:	f001 f816 	bl	80023e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b4:	2360      	movs	r3, #96	; 0x60
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c0:	2300      	movs	r3, #0
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	481e      	ldr	r0, [pc, #120]	; (8001454 <MX_TIM1_Init+0x1b0>)
 80013da:	f006 f98f 	bl	80076fc <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x144>
	{
		Error_Handler();
 80013e4:	f000 fffc 	bl	80023e0 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM1_Init+0x1b0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM1_Init+0x1b0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013f6:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800140c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001410:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800141e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM1_Init+0x1b0>)
 8001436:	f007 fa6d 	bl	8008914 <HAL_TIMEx_ConfigBreakDeadTime>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0x1a0>
	{
		Error_Handler();
 8001440:	f000 ffce 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM1_Init+0x1b0>)
 8001446:	f001 fa6d 	bl	8002924 <HAL_TIM_MspPostInit>

}
 800144a:	bf00      	nop
 800144c:	3780      	adds	r7, #128	; 0x80
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000294 	.word	0x20000294
 8001458:	40012c00 	.word	0x40012c00

0800145c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_TIM2_Init+0x98>)
 800147c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001480:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1700;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_TIM2_Init+0x98>)
 8001484:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001488:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM2_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM2_Init+0x98>)
 8001492:	2263      	movs	r2, #99	; 0x63
 8001494:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_TIM2_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM2_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_TIM2_Init+0x98>)
 80014a4:	f005 fb46 	bl	8006b34 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80014ae:	f000 ff97 	bl	80023e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_TIM2_Init+0x98>)
 80014c0:	f006 fa30 	bl	8007924 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80014ca:	f000 ff89 	bl	80023e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_TIM2_Init+0x98>)
 80014dc:	f007 f998 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80014e6:	f000 ff7b 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200002e0 	.word	0x200002e0

080014f8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	; 0x70
 80014fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800150c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2234      	movs	r2, #52	; 0x34
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f008 fabe 	bl	8009ab4 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <MX_TIM8_Init+0x168>)
 800153a:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <MX_TIM8_Init+0x16c>)
 800153c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800153e:	4b48      	ldr	r3, [pc, #288]	; (8001660 <MX_TIM8_Init+0x168>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <MX_TIM8_Init+0x168>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1700;
 800154a:	4b45      	ldr	r3, [pc, #276]	; (8001660 <MX_TIM8_Init+0x168>)
 800154c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001550:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <MX_TIM8_Init+0x168>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001558:	4b41      	ldr	r3, [pc, #260]	; (8001660 <MX_TIM8_Init+0x168>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b40      	ldr	r3, [pc, #256]	; (8001660 <MX_TIM8_Init+0x168>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001564:	483e      	ldr	r0, [pc, #248]	; (8001660 <MX_TIM8_Init+0x168>)
 8001566:	f005 fae5 	bl	8006b34 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM8_Init+0x7c>
	{
		Error_Handler();
 8001570:	f000 ff36 	bl	80023e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800157e:	4619      	mov	r1, r3
 8001580:	4837      	ldr	r0, [pc, #220]	; (8001660 <MX_TIM8_Init+0x168>)
 8001582:	f006 f9cf 	bl	8007924 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM8_Init+0x98>
	{
		Error_Handler();
 800158c:	f000 ff28 	bl	80023e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001590:	4833      	ldr	r0, [pc, #204]	; (8001660 <MX_TIM8_Init+0x168>)
 8001592:	f005 fb91 	bl	8006cb8 <HAL_TIM_PWM_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM8_Init+0xa8>
	{
		Error_Handler();
 800159c:	f000 ff20 	bl	80023e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015b0:	4619      	mov	r1, r3
 80015b2:	482b      	ldr	r0, [pc, #172]	; (8001660 <MX_TIM8_Init+0x168>)
 80015b4:	f007 f92c 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM8_Init+0xca>
	{
		Error_Handler();
 80015be:	f000 ff0f 	bl	80023e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c2:	2360      	movs	r3, #96	; 0x60
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 100;
 80015c6:	2364      	movs	r3, #100	; 0x64
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015e2:	2208      	movs	r2, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	481e      	ldr	r0, [pc, #120]	; (8001660 <MX_TIM8_Init+0x168>)
 80015e8:	f006 f888 	bl	80076fc <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM8_Init+0xfe>
	{
		Error_Handler();
 80015f2:	f000 fef5 	bl	80023e0 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_3);
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_TIM8_Init+0x168>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69da      	ldr	r2, [r3, #28]
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_TIM8_Init+0x168>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0208 	bic.w	r2, r2, #8
 8001604:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800162c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM8_Init+0x168>)
 8001644:	f007 f966 	bl	8008914 <HAL_TIMEx_ConfigBreakDeadTime>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM8_Init+0x15a>
	{
		Error_Handler();
 800164e:	f000 fec7 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM8_Init+0x168>)
 8001654:	f001 f966 	bl	8002924 <HAL_TIM_MspPostInit>

}
 8001658:	bf00      	nop
 800165a:	3770      	adds	r7, #112	; 0x70
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000032c 	.word	0x2000032c
 8001664:	40013400 	.word	0x40013400

08001668 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09c      	sub	sp, #112	; 0x70
 800166c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800166e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800167c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2234      	movs	r2, #52	; 0x34
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f008 fa06 	bl	8009ab4 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016aa:	4a44      	ldr	r2, [pc, #272]	; (80017bc <MX_TIM15_Init+0x154>)
 80016ac:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 9;
 80016ae:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016b0:	2209      	movs	r2, #9
 80016b2:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 16999;
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016bc:	f244 2267 	movw	r2, #16999	; 0x4267
 80016c0:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ce:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80016d4:	4838      	ldr	r0, [pc, #224]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016d6:	f005 fa2d 	bl	8006b34 <HAL_TIM_Base_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM15_Init+0x7c>
	{
		Error_Handler();
 80016e0:	f000 fe7e 	bl	80023e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e8:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80016ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016ee:	4619      	mov	r1, r3
 80016f0:	4831      	ldr	r0, [pc, #196]	; (80017b8 <MX_TIM15_Init+0x150>)
 80016f2:	f006 f917 	bl	8007924 <HAL_TIM_ConfigClockSource>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM15_Init+0x98>
	{
		Error_Handler();
 80016fc:	f000 fe70 	bl	80023e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001700:	482d      	ldr	r0, [pc, #180]	; (80017b8 <MX_TIM15_Init+0x150>)
 8001702:	f005 fad9 	bl	8006cb8 <HAL_TIM_PWM_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM15_Init+0xa8>
	{
		Error_Handler();
 800170c:	f000 fe68 	bl	80023e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001718:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800171c:	4619      	mov	r1, r3
 800171e:	4826      	ldr	r0, [pc, #152]	; (80017b8 <MX_TIM15_Init+0x150>)
 8001720:	f007 f876 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM15_Init+0xc6>
	{
		Error_Handler();
 800172a:	f000 fe59 	bl	80023e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172e:	2360      	movs	r3, #96	; 0x60
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800174e:	2200      	movs	r2, #0
 8001750:	4619      	mov	r1, r3
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <MX_TIM15_Init+0x150>)
 8001754:	f005 ffd2 	bl	80076fc <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM15_Init+0xfa>
	{
		Error_Handler();
 800175e:	f000 fe3f 	bl	80023e0 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim15, TIM_CHANNEL_1);
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_TIM15_Init+0x150>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_TIM15_Init+0x150>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0208 	bic.w	r2, r2, #8
 8001770:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4619      	mov	r1, r3
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <MX_TIM15_Init+0x150>)
 800179a:	f007 f8bb 	bl	8008914 <HAL_TIMEx_ConfigBreakDeadTime>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM15_Init+0x140>
	{
		Error_Handler();
 80017a4:	f000 fe1c 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <MX_TIM15_Init+0x150>)
 80017aa:	f001 f8bb 	bl	8002924 <HAL_TIM_MspPostInit>

}
 80017ae:	bf00      	nop
 80017b0:	3770      	adds	r7, #112	; 0x70
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000378 	.word	0x20000378
 80017bc:	40014000 	.word	0x40014000

080017c0 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_TIM16_Init+0x90>)
 80017d4:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <MX_TIM16_Init+0x94>)
 80017d6:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 0;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_TIM16_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <MX_TIM16_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_TIM16_Init+0x90>)
 80017e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ea:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_TIM16_Init+0x90>)
 80017ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f2:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <MX_TIM16_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_TIM16_Init+0x90>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <MX_TIM16_Init+0x90>)
 8001802:	f005 f997 	bl	8006b34 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM16_Init+0x50>
	{
		Error_Handler();
 800180c:	f000 fde8 	bl	80023e0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001810:	480f      	ldr	r0, [pc, #60]	; (8001850 <MX_TIM16_Init+0x90>)
 8001812:	f005 fbb3 	bl	8006f7c <HAL_TIM_IC_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM16_Init+0x60>
	{
		Error_Handler();
 800181c:	f000 fde0 	bl	80023e0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001820:	2300      	movs	r3, #0
 8001822:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001824:	2301      	movs	r3, #1
 8001826:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_TIM16_Init+0x90>)
 8001838:	f005 fec3 	bl	80075c2 <HAL_TIM_IC_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM16_Init+0x86>
	{
		Error_Handler();
 8001842:	f000 fdcd 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200003c4 	.word	0x200003c4
 8001854:	40014400 	.word	0x40014400

08001858 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <MX_USART2_UART_Init+0x9c>)
 8001860:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80018a0:	2300      	movs	r3, #0
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4812      	ldr	r0, [pc, #72]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 80018a8:	f007 fdc1 	bl	800942e <HAL_RS485Ex_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART2_UART_Init+0x5e>
	{
		Error_Handler();
 80018b2:	f000 fd95 	bl	80023e0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 80018ba:	f007 fe5a 	bl	8009572 <HAL_UARTEx_SetTxFifoThreshold>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART2_UART_Init+0x70>
	{
		Error_Handler();
 80018c4:	f000 fd8c 	bl	80023e0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	4809      	ldr	r0, [pc, #36]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 80018cc:	f007 fe8f 	bl	80095ee <HAL_UARTEx_SetRxFifoThreshold>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x82>
	{
		Error_Handler();
 80018d6:	f000 fd83 	bl	80023e0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_USART2_UART_Init+0x98>)
 80018dc:	f007 fe10 	bl	8009500 <HAL_UARTEx_DisableFifoMode>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART2_UART_Init+0x92>
	{
		Error_Handler();
 80018e6:	f000 fd7b 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000410 	.word	0x20000410
 80018f4:	40004400 	.word	0x40004400

080018f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_DMA_Init+0x70>)
 8001900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001902:	4a19      	ldr	r2, [pc, #100]	; (8001968 <MX_DMA_Init+0x70>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6493      	str	r3, [r2, #72]	; 0x48
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_DMA_Init+0x70>)
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_DMA_Init+0x70>)
 8001918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <MX_DMA_Init+0x70>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6493      	str	r3, [r2, #72]	; 0x48
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_DMA_Init+0x70>)
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	200b      	movs	r0, #11
 8001934:	f002 fe21 	bl	800457a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001938:	200b      	movs	r0, #11
 800193a:	f002 fe38 	bl	80045ae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	200c      	movs	r0, #12
 8001944:	f002 fe19 	bl	800457a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001948:	200c      	movs	r0, #12
 800194a:	f002 fe30 	bl	80045ae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	200d      	movs	r0, #13
 8001954:	f002 fe11 	bl	800457a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001958:	200d      	movs	r0, #13
 800195a:	f002 fe28 	bl	80045ae <HAL_NVIC_EnableIRQ>

}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a54      	ldr	r2, [pc, #336]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a48      	ldr	r2, [pc, #288]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a42      	ldr	r2, [pc, #264]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <MX_GPIO_Init+0x16c>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_COMM_Pin | LED_STATUS_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019e8:	483c      	ldr	r0, [pc, #240]	; (8001adc <MX_GPIO_Init+0x170>)
 80019ea:	f003 fa07 	bl	8004dfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_MAX31855_GPIO_Port, CS_MAX31855_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2110      	movs	r1, #16
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f003 fa01 	bl	8004dfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RELAY_INRUSH_GPIO_Port, RELAY_INRUSH_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a00:	4837      	ldr	r0, [pc, #220]	; (8001ae0 <MX_GPIO_Init+0x174>)
 8001a02:	f003 f9fb 	bl	8004dfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f003 f9f4 	bl	8004dfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FAULT_CLR_GPIO_Port, FAULT_CLR_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	4831      	ldr	r0, [pc, #196]	; (8001ae0 <MX_GPIO_Init+0x174>)
 8001a1a:	f003 f9ef 	bl	8004dfc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_COMM_Pin LED_STATUS_Pin */
	GPIO_InitStruct.Pin = LED_COMM_Pin | LED_STATUS_Pin;
 8001a1e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4829      	ldr	r0, [pc, #164]	; (8001adc <MX_GPIO_Init+0x170>)
 8001a38:	f003 f846 	bl	8004ac8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_MAX31855_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = CS_MAX31855_Pin | BUZZER_Pin;
 8001a3c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001a40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f003 f836 	bl	8004ac8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RELAY_INRUSH_Pin FAULT_CLR_Pin */
	GPIO_InitStruct.Pin = RELAY_INRUSH_Pin | FAULT_CLR_Pin;
 8001a5c:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001a60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <MX_GPIO_Init+0x174>)
 8001a76:	f003 f827 	bl	8004ac8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG_MPQ_Pin FAULT_SD_Pin */
	GPIO_InitStruct.Pin = PG_MPQ_Pin | FAULT_SD_Pin;
 8001a7a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001a7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a84:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4813      	ldr	r0, [pc, #76]	; (8001ae0 <MX_GPIO_Init+0x174>)
 8001a92:	f003 f819 	bl	8004ac8 <HAL_GPIO_Init>

	/*Configure GPIO pins : FAN2_RPM_Pin SY_FLT_Pin */
	GPIO_InitStruct.Pin = FAN2_RPM_Pin | SY_FLT_Pin;
 8001a96:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001a9a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <MX_GPIO_Init+0x174>)
 8001aac:	f003 f80c 	bl	8004ac8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2017      	movs	r0, #23
 8001ab6:	f002 fd60 	bl	800457a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aba:	2017      	movs	r0, #23
 8001abc:	f002 fd77 	bl	80045ae <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2028      	movs	r0, #40	; 0x28
 8001ac6:	f002 fd58 	bl	800457a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aca:	2028      	movs	r0, #40	; 0x28
 8001acc:	f002 fd6f 	bl	80045ae <HAL_NVIC_EnableIRQ>

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48000400 	.word	0x48000400

08001ae4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
	/* Pino power good do MPQ */
	if (GPIO_Pin == PG_MPQ_Pin)
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af4:	d114      	bne.n	8001b20 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		if (HAL_GPIO_ReadPin(PG_MPQ_GPIO_Port, PG_MPQ_Pin) == LOW)
 8001af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afa:	4814      	ldr	r0, [pc, #80]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x68>)
 8001afc:	f003 f966 	bl	8004dcc <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <HAL_GPIO_EXTI_Callback+0x2e>
		{
			sFlagsErrors.MPQNpg = true;
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_EXTI_Callback+0x3c>
		}
		else
		{
			sFlagsErrors.MPQNpg = false;
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b14:	6813      	ldr	r3, [r2, #0]
 8001b16:	f36f 03c3 	bfc	r3, #3, #1
 8001b1a:	6013      	str	r3, [r2, #0]
			SetError(); /* Verify if exist error */
 8001b1c:	f000 fbd6 	bl	80022cc <SetError>
		}
	}

	/* Pin fault */
	if (GPIO_Pin == FAULT_SD_Pin && HAL_GPIO_ReadPin(FAULT_SD_GPIO_Port, FAULT_SD_Pin) == LOW)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d10d      	bne.n	8001b42 <HAL_GPIO_EXTI_Callback+0x5e>
 8001b26:	2120      	movs	r1, #32
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x68>)
 8001b2a:	f003 f94f 	bl	8004dcc <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d106      	bne.n	8001b42 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		Hw_Buck_Deinit();
 8001b34:	f000 fb6a 	bl	800220c <Hw_Buck_Deinit>
		sFlagsErrors.Fault = true;
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b40:	6013      	str	r3, [r2, #0]
	}
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	20000028 	.word	0x20000028

08001b54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a85      	ldr	r2, [pc, #532]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	f040 80dd 	bne.w	8001d20 <HAL_TIM_PeriodElapsedCallback+0x1cc>
	{
		InterruptControl_MAX31855();
 8001b66:	f007 ff71 	bl	8009a4c <InterruptControl_MAX31855>
		SetError(); /* Verify if exist error */
 8001b6a:	f000 fbaf 	bl	80022cc <SetError>
		StatusLEDControl(sStatusPower.Flags.Error);
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f9a9 	bl	8001ed0 <StatusLEDControl>
		if (Cnt1ms > USHRT_MAX - 1)
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d103      	bne.n	8001b94 <HAL_TIM_PeriodElapsedCallback+0x40>
			Cnt1ms = 0;
 8001b8c:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	e006      	b.n	8001ba2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		else
			Cnt1ms++;
 8001b94:	4b79      	ldr	r3, [pc, #484]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b77      	ldr	r3, [pc, #476]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001ba0:	801a      	strh	r2, [r3, #0]

		/* Power on relay inrush */
		if (CntRelayInrush >= RELAY_INRUSH)
 8001ba2:	4b77      	ldr	r3, [pc, #476]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bac:	d306      	bcc.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_WritePin(RELAY_INRUSH_GPIO_Port, RELAY_INRUSH_Pin, HIGH);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb4:	4873      	ldr	r0, [pc, #460]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001bb6:	f003 f921 	bl	8004dfc <HAL_GPIO_WritePin>
 8001bba:	e006      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x76>
		else
			CntRelayInrush++;
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b6e      	ldr	r3, [pc, #440]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001bc8:	801a      	strh	r2, [r3, #0]

		/* Erro Fan RPM cooler */
		if (CntFanPCB >= FAN_PCB_TIMEOUT)
 8001bca:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d90b      	bls.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			sFlagsErrors.ErrorFanPcb = true;
 8001bd8:	4a6c      	ldr	r2, [pc, #432]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6013      	str	r3, [r2, #0]
			IC_FanPCB_RPM = 0;
 8001be2:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	801a      	strh	r2, [r3, #0]
			IC_FanPCB_Frequency = 0;
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e006      	b.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0xaa>
		}
		else
		{
			CntFanPCB++;
 8001bf0:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001bfc:	801a      	strh	r2, [r3, #0]
		}

		/* Erro Fan RPM cooler */
		if (CntFan1 >= FAN_1_AND_2_TIMEOUT)
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d90b      	bls.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0xd0>
		{
			sFlagsErrors.ErrorFan1 = true;
 8001c0c:	4a5f      	ldr	r2, [pc, #380]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	f043 0320 	orr.w	r3, r3, #32
 8001c14:	6013      	str	r3, [r2, #0]
			IC_Fan1_RPM = 0;
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
			IC_Fan1_Frequency = 0;
 8001c1c:	4b60      	ldr	r3, [pc, #384]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e011      	b.n	8001c48 <HAL_TIM_PeriodElapsedCallback+0xf4>
		}
		else
		{
			if (HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2) > 0)  //Se o Duty for maior que 0 começa a contar o tempo de timeout
 8001c24:	2104      	movs	r1, #4
 8001c26:	485f      	ldr	r0, [pc, #380]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001c28:	f005 ff76 	bl	8007b18 <HAL_TIM_ReadCapturedValue>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0xee>
				CntFan1++;
 8001c32:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e002      	b.n	8001c48 <HAL_TIM_PeriodElapsedCallback+0xf4>
			else
				CntFan1 = 0;
 8001c42:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	801a      	strh	r2, [r3, #0]
		}

		/* PoweeDown */
		if (ValuePD < POWERDOWN_VALUE)
 8001c48:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	2b9f      	cmp	r3, #159	; 0x9f
 8001c4e:	d813      	bhi.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0x124>
		{
			if (CntTimeoutPD > TIMEOUT_PD)
 8001c50:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c5a:	d905      	bls.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x114>
			{
				sFlagsErrors.Powerdown = true;
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00f      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x134>
			}
			else
			{
				CntTimeoutPD++;
 8001c68:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	e007      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x134>
			}
		}
		else
		{
			sFlagsErrors.Powerdown = false;
 8001c78:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	f36f 0300 	bfc	r3, #0, #1
 8001c80:	6013      	str	r3, [r2, #0]
			CntTimeoutPD = 0;
 8001c82:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	801a      	strh	r2, [r3, #0]
		}

		/* Overvoltage, Undervoltage */
		if (sStatusPower.PowerInformation.InputVoltage > OVERVOLTAGE_VALUE)
 8001c88:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f240 72b2 	movw	r2, #1970	; 0x7b2
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d913      	bls.n	8001cbe <HAL_TIM_PeriodElapsedCallback+0x16a>
		{
			if (CntTimeoutOvervoltage > TIMEOUT_OVERVOLTAGE)
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ca0:	d905      	bls.n	8001cae <HAL_TIM_PeriodElapsedCallback+0x15a>
			{
				sFlagsErrors.Overvoltage = true;
 8001ca2:	4a3a      	ldr	r2, [pc, #232]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6013      	str	r3, [r2, #0]
	else if (htim == &htim1)
	{
		if (IC_Fan1_OvfTimer < USHRT_MAX)
			IC_Fan1_OvfTimer++;
	}
}
 8001cac:	e05e      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
				CntTimeoutOvervoltage++;
 8001cae:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cba:	801a      	strh	r2, [r3, #0]
}
 8001cbc:	e056      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
		else if (sStatusPower.PowerInformation.InputVoltage > LOW_OPERATION && sStatusPower.PowerInformation.InputVoltage <= UNDERVOLTAGE_VALUE) // Undervoltage
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001cc8:	d919      	bls.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cd4:	d813      	bhi.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x1aa>
			if (CntTimeoutUndervoltage > TIMEOUT_OVERVOLTAGE)
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce0:	d905      	bls.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x19a>
				sFlagsErrors.Undervoltage = true;
 8001ce2:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	6013      	str	r3, [r2, #0]
			if (CntTimeoutUndervoltage > TIMEOUT_OVERVOLTAGE)
 8001cec:	e03e      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
				CntTimeoutUndervoltage++;
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cfa:	801a      	strh	r2, [r3, #0]
			if (CntTimeoutUndervoltage > TIMEOUT_OVERVOLTAGE)
 8001cfc:	e036      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
			sFlagsErrors.Undervoltage = false;
 8001cfe:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f36f 0341 	bfc	r3, #1, #1
 8001d06:	6013      	str	r3, [r2, #0]
			sFlagsErrors.Overvoltage = false;
 8001d08:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f36f 0382 	bfc	r3, #2, #1
 8001d10:	6013      	str	r3, [r2, #0]
			CntTimeoutOvervoltage = 0;
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	801a      	strh	r2, [r3, #0]
			CntTimeoutUndervoltage = 0;
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	801a      	strh	r2, [r3, #0]
}
 8001d1e:	e025      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
	else if (htim == &htim16)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d10e      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x1f2>
		if (IC_FanPCB_OvfTimer < USHRT_MAX)
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01a      	beq.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
			IC_FanPCB_OvfTimer++;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d42:	801a      	strh	r2, [r3, #0]
}
 8001d44:	e012      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
	else if (htim == &htim1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
		if (IC_Fan1_OvfTimer < USHRT_MAX)
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
			IC_Fan1_OvfTimer++;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	e7ff      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x218>
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200002e0 	.word	0x200002e0
 8001d78:	2000002c 	.word	0x2000002c
 8001d7c:	20000cae 	.word	0x20000cae
 8001d80:	20000cde 	.word	0x20000cde
 8001d84:	48000400 	.word	0x48000400
 8001d88:	20000cda 	.word	0x20000cda
 8001d8c:	20000028 	.word	0x20000028
 8001d90:	20000cd6 	.word	0x20000cd6
 8001d94:	20000cc8 	.word	0x20000cc8
 8001d98:	20000cdc 	.word	0x20000cdc
 8001d9c:	20000cd8 	.word	0x20000cd8
 8001da0:	20000ccc 	.word	0x20000ccc
 8001da4:	20000294 	.word	0x20000294
 8001da8:	20000c9c 	.word	0x20000c9c
 8001dac:	20000ca0 	.word	0x20000ca0
 8001db0:	20000ca2 	.word	0x20000ca2
 8001db4:	20000ca4 	.word	0x20000ca4
 8001db8:	200003c4 	.word	0x200003c4
 8001dbc:	20000cd2 	.word	0x20000cd2
 8001dc0:	20000cd4 	.word	0x20000cd4

08001dc4 <DMACallbackADC1>:

void DMACallbackADC1(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	if (CntAdValueNTC >= BUFFER_NTC)
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <DMACallbackADC1+0x44>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
	}
	else if (sStatusPower.Flags.CalculateNTC == 0)
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <DMACallbackADC1+0x48>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <DMACallbackADC1+0x36>
	{
		AdValueNTC[CntAdValueNTC++] = Adc1Val[1];
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <DMACallbackADC1+0x4c>)
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <DMACallbackADC1+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	b2d0      	uxtb	r0, r2
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <DMACallbackADC1+0x44>)
 8001dee:	7010      	strb	r0, [r2, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	b289      	uxth	r1, r1
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <DMACallbackADC1+0x50>)
 8001df6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000ca8 	.word	0x20000ca8
 8001e0c:	2000002c 	.word	0x2000002c
 8001e10:	200004a0 	.word	0x200004a0
 8001e14:	200004cc 	.word	0x200004cc

08001e18 <DMACallbackADC2>:
void DMACallbackADC2(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	if (CntAdValuePD >= BUFFER_PD)
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <DMACallbackADC2+0xa0>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	d908      	bls.n	8001e3c <DMACallbackADC2+0x24>
	{
		sStatusPower.Flags.CalculatePD = 1;
 8001e2a:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <DMACallbackADC2+0xa4>)
 8001e2c:	7a13      	ldrb	r3, [r2, #8]
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	7213      	strb	r3, [r2, #8]
		CntAdValuePD = 0;
 8001e34:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <DMACallbackADC2+0xa0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e014      	b.n	8001e66 <DMACallbackADC2+0x4e>
	}
	else if (sStatusPower.Flags.CalculatePD == 0)
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <DMACallbackADC2+0xa4>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <DMACallbackADC2+0x4e>
	{
		AdValuePD[CntAdValuePD++] = Adc2Val[1];
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <DMACallbackADC2+0xa8>)
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <DMACallbackADC2+0xa0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	b2d0      	uxtb	r0, r2
 8001e58:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <DMACallbackADC2+0xa0>)
 8001e5a:	7010      	strb	r0, [r2, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	b289      	uxth	r1, r1
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <DMACallbackADC2+0xac>)
 8001e62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}
	else
	{
//do nothing
	}
	if (CntAdValueVBUS >= BUFFER_VBUS)
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <DMACallbackADC2+0xb0>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <DMACallbackADC2+0x6a>
	{
		sStatusPower.Flags.CalculateVBUS = 1;
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <DMACallbackADC2+0xa4>)
 8001e72:	7a13      	ldrb	r3, [r2, #8]
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	7213      	strb	r3, [r2, #8]
		CntAdValueVBUS = 0;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <DMACallbackADC2+0xb0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
//do nothing
	}
}
 8001e80:	e014      	b.n	8001eac <DMACallbackADC2+0x94>
	else if (sStatusPower.Flags.CalculateVBUS == 0)
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <DMACallbackADC2+0xa4>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10d      	bne.n	8001eac <DMACallbackADC2+0x94>
		AdValueVBUS[CntAdValueVBUS++] = Adc2Val[2];
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <DMACallbackADC2+0xa8>)
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <DMACallbackADC2+0xb0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	b2d0      	uxtb	r0, r2
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <DMACallbackADC2+0xb0>)
 8001ea0:	7010      	strb	r0, [r2, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	b289      	uxth	r1, r1
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <DMACallbackADC2+0xb4>)
 8001ea8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	20000ca6 	.word	0x20000ca6
 8001ebc:	2000002c 	.word	0x2000002c
 8001ec0:	200004a8 	.word	0x200004a8
 8001ec4:	200004b4 	.word	0x200004b4
 8001ec8:	20000ca7 	.word	0x20000ca7
 8001ecc:	200004c8 	.word	0x200004c8

08001ed0 <StatusLEDControl>:

static void StatusLEDControl(uint8_t ErrorCode)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	CntStatusLED++;
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <StatusLEDControl+0xc4>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <StatusLEDControl+0xc4>)
 8001ee6:	801a      	strh	r2, [r3, #0]

	if (ErrorCode == ERROR_NONE)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10e      	bne.n	8001f0c <StatusLEDControl+0x3c>
	{
		if (CntStatusLED >= PERIOD_LED)
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <StatusLEDControl+0xc4>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef8:	d347      	bcc.n	8001f8a <StatusLEDControl+0xba>
		{
			HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8001efa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001efe:	4826      	ldr	r0, [pc, #152]	; (8001f98 <StatusLEDControl+0xc8>)
 8001f00:	f002 ff94 	bl	8004e2c <HAL_GPIO_TogglePin>
			CntStatusLED = 0;
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <StatusLEDControl+0xc4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]
				CntStatusLEDError = 0;
			}
		}

	}
}
 8001f0a:	e03e      	b.n	8001f8a <StatusLEDControl+0xba>
		if (CntStatusLED <= PERIOD_LED_ERROR && CntStatusLEDError < ErrorCode - 1)
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <StatusLEDControl+0xc4>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2bfa      	cmp	r3, #250	; 0xfa
 8001f14:	d80e      	bhi.n	8001f34 <StatusLEDControl+0x64>
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <StatusLEDControl+0xcc>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	429a      	cmp	r2, r3
 8001f24:	da06      	bge.n	8001f34 <StatusLEDControl+0x64>
			HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2c:	481a      	ldr	r0, [pc, #104]	; (8001f98 <StatusLEDControl+0xc8>)
 8001f2e:	f002 ff65 	bl	8004dfc <HAL_GPIO_WritePin>
}
 8001f32:	e02a      	b.n	8001f8a <StatusLEDControl+0xba>
		else if (CntStatusLEDError < ErrorCode - 1)
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <StatusLEDControl+0xcc>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	429a      	cmp	r2, r3
 8001f42:	da16      	bge.n	8001f72 <StatusLEDControl+0xa2>
			HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f4a:	4813      	ldr	r0, [pc, #76]	; (8001f98 <StatusLEDControl+0xc8>)
 8001f4c:	f002 ff56 	bl	8004dfc <HAL_GPIO_WritePin>
			if (CntStatusLED >= PERIOD_LED_ERROR * 2)
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <StatusLEDControl+0xc4>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f5a:	d316      	bcc.n	8001f8a <StatusLEDControl+0xba>
				CntStatusLED = 0;
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <StatusLEDControl+0xc4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	801a      	strh	r2, [r3, #0]
				CntStatusLEDError++;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <StatusLEDControl+0xcc>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <StatusLEDControl+0xcc>)
 8001f6e:	801a      	strh	r2, [r3, #0]
}
 8001f70:	e00b      	b.n	8001f8a <StatusLEDControl+0xba>
			if (CntStatusLED >= PERIOD_LED)
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <StatusLEDControl+0xc4>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f7c:	d305      	bcc.n	8001f8a <StatusLEDControl+0xba>
				CntStatusLED = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <StatusLEDControl+0xc4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	801a      	strh	r2, [r3, #0]
				CntStatusLEDError = 0;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <StatusLEDControl+0xcc>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	801a      	strh	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000caa 	.word	0x20000caa
 8001f98:	48000800 	.word	0x48000800
 8001f9c:	20000cac 	.word	0x20000cac

08001fa0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) //Fan RPM PCB
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6f      	ldr	r2, [pc, #444]	; (800216c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d169      	bne.n	8002086 <HAL_TIM_IC_CaptureCallback+0xe6>
	{
		CntFanPCB = 0;
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	801a      	strh	r2, [r3, #0]
		if (IC_FanPCB_IsFirstCaptured == false)
 8001fb8:	4b6e      	ldr	r3, [pc, #440]	; (8002174 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10d      	bne.n	8001fde <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			IC_FanPCB_OvfTimer = 0;
 8001fc2:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	801a      	strh	r2, [r3, #0]
			IC_FanPCB_Value1 = HAL_TIM_ReadCapturedValue(&htim16, TIM_CHANNEL_1);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	486c      	ldr	r0, [pc, #432]	; (800217c <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001fcc:	f005 fda4 	bl	8007b18 <HAL_TIM_ReadCapturedValue>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001fd4:	6013      	str	r3, [r2, #0]
			IC_FanPCB_IsFirstCaptured = true;
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e053      	b.n	8002086 <HAL_TIM_IC_CaptureCallback+0xe6>
		}
		else if (IC_FanPCB_IsFirstCaptured == true)
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d14e      	bne.n	8002086 <HAL_TIM_IC_CaptureCallback+0xe6>
		{
			IC_FanPCB_Value2 = HAL_TIM_ReadCapturedValue(&htim16, TIM_CHANNEL_1);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4864      	ldr	r0, [pc, #400]	; (800217c <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001fec:	f005 fd94 	bl	8007b18 <HAL_TIM_ReadCapturedValue>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a64      	ldr	r2, [pc, #400]	; (8002184 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001ff4:	6013      	str	r3, [r2, #0]
			if (IC_FanPCB_Value2 > IC_FanPCB_Value1)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b61      	ldr	r3, [pc, #388]	; (8002180 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_TIM_IC_CaptureCallback+0x84>
			{
				IC_FanPCB_Difference = (IC_FanPCB_Value2 + (IC_FanPCB_OvfTimer * 0xFFFF)) - IC_FanPCB_Value1;
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4613      	mov	r3, r2
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	441a      	add	r2, r3
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	4a5a      	ldr	r2, [pc, #360]	; (8002188 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e01a      	b.n	800205a <HAL_TIM_IC_CaptureCallback+0xba>
			}
			else if (IC_FanPCB_Value2 < IC_FanPCB_Value1)
 8002024:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d212      	bcs.n	8002056 <HAL_TIM_IC_CaptureCallback+0xb6>
			{
				IC_FanPCB_Difference = ((0xFFFF - IC_FanPCB_Value1) + (IC_FanPCB_OvfTimer * 0xFFFF) + IC_FanPCB_Value2) + 1;
 8002030:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	4613      	mov	r3, r2
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	461a      	mov	r2, r3
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1ad2      	subs	r2, r2, r3
 8002046:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002050:	4a4d      	ldr	r2, [pc, #308]	; (8002188 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e001      	b.n	800205a <HAL_TIM_IC_CaptureCallback+0xba>
			}
			else
			{
				Error_Handler();
 8002056:	f000 f9c3 	bl	80023e0 <Error_Handler>
			}
			//Frequency = TIM3 CLOCK / Difference
			IC_FanPCB_Frequency = HAL_RCC_GetPCLK1Freq() / IC_FanPCB_Difference;
 800205a:	f003 fcf1 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800206a:	6013      	str	r3, [r2, #0]
			IC_FanPCB_RPM = IC_FanPCB_Frequency * 60;
 800206c:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b44      	ldr	r3, [pc, #272]	; (8002190 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800207e:	801a      	strh	r2, [r3, #0]
			IC_FanPCB_IsFirstCaptured = false;
 8002080:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim->Instance == TIM1) //Fan RPM Fan1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a42      	ldr	r2, [pc, #264]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d169      	bne.n	8002164 <HAL_TIM_IC_CaptureCallback+0x1c4>
	{
		CntFan1 = 0;
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002092:	2200      	movs	r2, #0
 8002094:	801a      	strh	r2, [r3, #0]
		if (IC_Fan1_IsFirstCaptured == false)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10d      	bne.n	80020bc <HAL_TIM_IC_CaptureCallback+0x11c>
		{
			IC_Fan1_OvfTimer = 0;
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x200>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	801a      	strh	r2, [r3, #0]
			IC_Fan1_Value1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80020a6:	2100      	movs	r1, #0
 80020a8:	483e      	ldr	r0, [pc, #248]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x204>)
 80020aa:	f005 fd35 	bl	8007b18 <HAL_TIM_ReadCapturedValue>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x208>)
 80020b2:	6013      	str	r3, [r2, #0]
			IC_Fan1_IsFirstCaptured = true;
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
			IC_Fan1_Frequency = HAL_RCC_GetPCLK1Freq() / IC_Fan1_Difference;
			IC_Fan1_RPM = IC_Fan1_Frequency * 60;
			IC_Fan1_IsFirstCaptured = false;
		}
	}
}
 80020ba:	e053      	b.n	8002164 <HAL_TIM_IC_CaptureCallback+0x1c4>
		else if (IC_Fan1_IsFirstCaptured == true)
 80020bc:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d14e      	bne.n	8002164 <HAL_TIM_IC_CaptureCallback+0x1c4>
			IC_Fan1_Value2 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80020c6:	2100      	movs	r1, #0
 80020c8:	4836      	ldr	r0, [pc, #216]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x204>)
 80020ca:	f005 fd25 	bl	8007b18 <HAL_TIM_ReadCapturedValue>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a36      	ldr	r2, [pc, #216]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x20c>)
 80020d2:	6013      	str	r3, [r2, #0]
			if (IC_Fan1_Value2 > IC_Fan1_Value1)
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x20c>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b33      	ldr	r3, [pc, #204]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x208>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d910      	bls.n	8002102 <HAL_TIM_IC_CaptureCallback+0x162>
				IC_Fan1_Difference = (IC_Fan1_Value2 + (IC_Fan1_OvfTimer * 0xFFFF)) - IC_Fan1_Value1;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x200>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	4613      	mov	r3, r2
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x20c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	441a      	add	r2, r3
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x208>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x210>)
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e01a      	b.n	8002138 <HAL_TIM_IC_CaptureCallback+0x198>
			else if (IC_Fan1_Value2 < IC_Fan1_Value1)
 8002102:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d212      	bcs.n	8002134 <HAL_TIM_IC_CaptureCallback+0x194>
				IC_Fan1_Difference = ((0xFFFF - IC_Fan1_Value1) + (IC_Fan1_OvfTimer * 0xFFFF) + IC_Fan1_Value2) + 1;
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x200>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4613      	mov	r3, r2
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1ad2      	subs	r2, r2, r3
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4413      	add	r3, r2
 800212a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800212e:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e001      	b.n	8002138 <HAL_TIM_IC_CaptureCallback+0x198>
				Error_Handler();
 8002134:	f000 f954 	bl	80023e0 <Error_Handler>
			IC_Fan1_Frequency = HAL_RCC_GetPCLK1Freq() / IC_Fan1_Difference;
 8002138:	f003 fc82 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002148:	6013      	str	r3, [r2, #0]
			IC_Fan1_RPM = IC_Fan1_Frequency * 60;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x214>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	b29a      	uxth	r2, r3
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x218>)
 800215c:	801a      	strh	r2, [r3, #0]
			IC_Fan1_IsFirstCaptured = false;
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40014400 	.word	0x40014400
 8002170:	20000cda 	.word	0x20000cda
 8002174:	20000cd0 	.word	0x20000cd0
 8002178:	20000cd2 	.word	0x20000cd2
 800217c:	200003c4 	.word	0x200003c4
 8002180:	20000cb0 	.word	0x20000cb0
 8002184:	20000cb8 	.word	0x20000cb8
 8002188:	20000cc0 	.word	0x20000cc0
 800218c:	20000cc8 	.word	0x20000cc8
 8002190:	20000cd6 	.word	0x20000cd6
 8002194:	40012c00 	.word	0x40012c00
 8002198:	20000cdc 	.word	0x20000cdc
 800219c:	20000cd1 	.word	0x20000cd1
 80021a0:	20000cd4 	.word	0x20000cd4
 80021a4:	20000294 	.word	0x20000294
 80021a8:	20000cb4 	.word	0x20000cb4
 80021ac:	20000cbc 	.word	0x20000cbc
 80021b0:	20000cc4 	.word	0x20000cc4
 80021b4:	20000ccc 	.word	0x20000ccc
 80021b8:	20000cd8 	.word	0x20000cd8

080021bc <Hw_Buck_Init>:
static void Hw_Buck_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]

	if (HAL_GPIO_ReadPin(FAULT_SD_GPIO_Port, FAULT_SD_Pin) == HIGH)
 80021d0:	2120      	movs	r1, #32
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <Hw_Buck_Init+0x4c>)
 80021d4:	f002 fdfa 	bl	8004dcc <HAL_GPIO_ReadPin>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d110      	bne.n	8002200 <Hw_Buck_Init+0x44>
	{
		HAL_GPIO_WritePin(FAULT_CLR_GPIO_Port, FAULT_CLR_Pin, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <Hw_Buck_Init+0x4c>)
 80021e4:	f002 fe0a 	bl	8004dfc <HAL_GPIO_WritePin>

		/* Definindo FAULT SD como pino de entrada com interrupção */
		/* Estrutura */
		GPIO_InitStruct.Pin = FAULT_SD_Pin;
 80021e8:	2320      	movs	r3, #32
 80021ea:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021f0:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <Hw_Buck_Init+0x4c>)
 80021fc:	f002 fc64 	bl	8004ac8 <HAL_GPIO_Init>

	}
}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	48000400 	.word	0x48000400

0800220c <Hw_Buck_Deinit>:
static void Hw_Buck_Deinit(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]

	/* Setando Fault Clear para baixo */
	HAL_GPIO_WritePin(FAULT_CLR_GPIO_Port, FAULT_CLR_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <Hw_Buck_Deinit+0x4c>)
 8002226:	f002 fde9 	bl	8004dfc <HAL_GPIO_WritePin>

	/* Definindo FAULT SD como pino de saída e forçando para 0V*/
	/* Estrutura */
	GPIO_InitStruct.Pin = FAULT_SD_Pin;
 800222a:	2320      	movs	r3, #32
 800222c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4806      	ldr	r0, [pc, #24]	; (8002258 <Hw_Buck_Deinit+0x4c>)
 8002240:	f002 fc42 	bl	8004ac8 <HAL_GPIO_Init>

	/* Forçando FAULT SD para 0V */
	HAL_GPIO_WritePin(FAULT_SD_GPIO_Port, FAULT_SD_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	2120      	movs	r1, #32
 8002248:	4803      	ldr	r0, [pc, #12]	; (8002258 <Hw_Buck_Deinit+0x4c>)
 800224a:	f002 fdd7 	bl	8004dfc <HAL_GPIO_WritePin>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	48000400 	.word	0x48000400

0800225c <SetOutputVoltage>:

static void SetOutputVoltage(uint16_t OutVoltage)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
	uint16_t DutyCalculate = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	81fb      	strh	r3, [r7, #14]
	uint16_t MaxValueDuty = htim8.Init.Period - 75;
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <SetOutputVoltage+0x64>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b4b      	subs	r3, #75	; 0x4b
 8002272:	81bb      	strh	r3, [r7, #12]

	if (sStatusPower.PowerInformation.InputVoltage > 0)
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <SetOutputVoltage+0x68>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01a      	beq.n	80022b4 <SetOutputVoltage+0x58>
	{
		DutyCalculate = ((uint32_t) (OutVoltage * htim8.Init.Period) / sStatusPower.PowerInformation.InputVoltage);
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <SetOutputVoltage+0x64>)
 8002282:	68d2      	ldr	r2, [r2, #12]
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <SetOutputVoltage+0x68>)
 800228a:	8812      	ldrh	r2, [r2, #0]
 800228c:	b292      	uxth	r2, r2
 800228e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002292:	81fb      	strh	r3, [r7, #14]

		if (OutVoltage > ValueVBUS || DutyCalculate > MaxValueDuty)
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <SetOutputVoltage+0x6c>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	88fa      	ldrh	r2, [r7, #6]
 800229a:	429a      	cmp	r2, r3
 800229c:	d803      	bhi.n	80022a6 <SetOutputVoltage+0x4a>
 800229e:	89fa      	ldrh	r2, [r7, #14]
 80022a0:	89bb      	ldrh	r3, [r7, #12]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d901      	bls.n	80022aa <SetOutputVoltage+0x4e>
			DutyCalculate = MaxValueDuty;
 80022a6:	89bb      	ldrh	r3, [r7, #12]
 80022a8:	81fb      	strh	r3, [r7, #14]

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, DutyCalculate);
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SetOutputVoltage+0x64>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	89fa      	ldrh	r2, [r7, #14]
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c
		asm("NOP");
 80022b2:	bf00      	nop
	}

}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	2000032c 	.word	0x2000032c
 80022c4:	2000002c 	.word	0x2000002c
 80022c8:	20000c9e 	.word	0x20000c9e

080022cc <SetError>:

static void SetError(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	if (sStatusPower.Flags.Error == ERROR_NONE)
 80022d0:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <SetError+0x10c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d16f      	bne.n	80023be <SetError+0xf2>
	{
		if (sFlagsErrors.Fault)
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <SetError+0x110>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <SetError+0x2e>
			sStatusPower.Flags.Error = ERROR_FAULT;
 80022ec:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <SetError+0x10c>)
 80022ee:	7a13      	ldrb	r3, [r2, #8]
 80022f0:	2107      	movs	r1, #7
 80022f2:	f361 0304 	bfi	r3, r1, #0, #5
 80022f6:	7213      	strb	r3, [r2, #8]
 80022f8:	e063      	b.n	80023c2 <SetError+0xf6>
		else if (sFlagsErrors.Powerdown)
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <SetError+0x110>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <SetError+0x4a>
			sStatusPower.Flags.Error = ERROR_POWERDOWN;
 8002308:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <SetError+0x10c>)
 800230a:	7a13      	ldrb	r3, [r2, #8]
 800230c:	2101      	movs	r1, #1
 800230e:	f361 0304 	bfi	r3, r1, #0, #5
 8002312:	7213      	strb	r3, [r2, #8]
 8002314:	e055      	b.n	80023c2 <SetError+0xf6>
		else if (sFlagsErrors.Undervoltage)
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <SetError+0x110>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <SetError+0x66>
			sStatusPower.Flags.Error = ERROR_UNDERVOLTAGE;
 8002324:	4a2c      	ldr	r2, [pc, #176]	; (80023d8 <SetError+0x10c>)
 8002326:	7a13      	ldrb	r3, [r2, #8]
 8002328:	2102      	movs	r1, #2
 800232a:	f361 0304 	bfi	r3, r1, #0, #5
 800232e:	7213      	strb	r3, [r2, #8]
 8002330:	e047      	b.n	80023c2 <SetError+0xf6>
		else if (sFlagsErrors.Overvoltage)
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <SetError+0x110>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <SetError+0x82>
			sStatusPower.Flags.Error = ERROR_OVERVOLTAGE;
 8002340:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <SetError+0x10c>)
 8002342:	7a13      	ldrb	r3, [r2, #8]
 8002344:	2103      	movs	r1, #3
 8002346:	f361 0304 	bfi	r3, r1, #0, #5
 800234a:	7213      	strb	r3, [r2, #8]
 800234c:	e039      	b.n	80023c2 <SetError+0xf6>
		else if (sFlagsErrors.MPQNpg)
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <SetError+0x110>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <SetError+0x9e>
			sStatusPower.Flags.Error = ERROR_MPQ_NPG;
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <SetError+0x10c>)
 800235e:	7a13      	ldrb	r3, [r2, #8]
 8002360:	2104      	movs	r1, #4
 8002362:	f361 0304 	bfi	r3, r1, #0, #5
 8002366:	7213      	strb	r3, [r2, #8]
 8002368:	e02b      	b.n	80023c2 <SetError+0xf6>
		else if (sFlagsErrors.ErrorFanPcb)
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <SetError+0x110>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <SetError+0xba>
			sStatusPower.Flags.Error = ERROR_FAN_PCB;
 8002378:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <SetError+0x10c>)
 800237a:	7a13      	ldrb	r3, [r2, #8]
 800237c:	2105      	movs	r1, #5
 800237e:	f361 0304 	bfi	r3, r1, #0, #5
 8002382:	7213      	strb	r3, [r2, #8]
 8002384:	e01d      	b.n	80023c2 <SetError+0xf6>
		else if (sFlagsErrors.ErrorFan1)
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <SetError+0x110>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <SetError+0xd6>
			sStatusPower.Flags.Error = ERROR_FAN1;
 8002394:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <SetError+0x10c>)
 8002396:	7a13      	ldrb	r3, [r2, #8]
 8002398:	2106      	movs	r1, #6
 800239a:	f361 0304 	bfi	r3, r1, #0, #5
 800239e:	7213      	strb	r3, [r2, #8]
 80023a0:	e00f      	b.n	80023c2 <SetError+0xf6>
		else if (sFlagsErrors.ErrorNTCDissipator)
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <SetError+0x110>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <SetError+0xf6>
			sStatusPower.Flags.Error = ERROR_NTC_DISSIPATOR;
 80023b0:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <SetError+0x10c>)
 80023b2:	7a13      	ldrb	r3, [r2, #8]
 80023b4:	2108      	movs	r1, #8
 80023b6:	f361 0304 	bfi	r3, r1, #0, #5
 80023ba:	7213      	strb	r3, [r2, #8]
 80023bc:	e001      	b.n	80023c2 <SetError+0xf6>
	}
	else
		Hw_Buck_Deinit();
 80023be:	f7ff ff25 	bl	800220c <Hw_Buck_Deinit>

	if (sFlagsErrors.ExistError == 0) // Se não houver nenhum erro, limpa erro
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <SetError+0x110>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <SetError+0x108>
		sStatusPower.Flags.Error = ERROR_NONE; /* Clear Error */
 80023ca:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <SetError+0x10c>)
 80023cc:	7a13      	ldrb	r3, [r2, #8]
 80023ce:	f36f 0304 	bfc	r3, #0, #5
 80023d2:	7213      	strb	r3, [r2, #8]
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	2000002c 	.word	0x2000002c
 80023dc:	20000028 	.word	0x20000028

080023e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e4:	b672      	cpsid	i
}
 80023e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023e8:	e7fe      	b.n	80023e8 <Error_Handler+0x8>
	...

080023ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_MspInit+0x54>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_MspInit+0x54>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6613      	str	r3, [r2, #96]	; 0x60
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_MspInit+0x54>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_MspInit+0x54>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_MspInit+0x54>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_MspInit+0x54>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2001      	movs	r0, #1
 8002428:	f002 f8a7 	bl	800457a <HAL_NVIC_SetPriority>
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800242c:	2001      	movs	r0, #1
 800242e:	f002 f8be 	bl	80045ae <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002432:	f002 fe33 	bl	800509c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000

08002444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09e      	sub	sp, #120	; 0x78
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	2244      	movs	r2, #68	; 0x44
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f007 fb25 	bl	8009ab4 <memset>
  if(hadc->Instance==ADC1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002472:	f040 8082 	bne.w	800257a <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800247a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800247c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002480:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002482:	f107 0320 	add.w	r3, r7, #32
 8002486:	4618      	mov	r0, r3
 8002488:	f003 fb4c 	bl	8005b24 <HAL_RCCEx_PeriphCLKConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002492:	f7ff ffa5 	bl	80023e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_ADC_MspInit+0x250>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a7d      	ldr	r2, [pc, #500]	; (8002694 <HAL_ADC_MspInit+0x250>)
 800249e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024a0:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <HAL_ADC_MspInit+0x250>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10b      	bne.n	80024c0 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024a8:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	4a7a      	ldr	r2, [pc, #488]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b4:	4b78      	ldr	r3, [pc, #480]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b75      	ldr	r3, [pc, #468]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	4a74      	ldr	r2, [pc, #464]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024cc:	4b72      	ldr	r3, [pc, #456]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	4b6f      	ldr	r3, [pc, #444]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4a6e      	ldr	r2, [pc, #440]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e4:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = VREG_Pin;
 80024f0:	2301      	movs	r3, #1
 80024f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f4:	2303      	movs	r3, #3
 80024f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(VREG_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002500:	4619      	mov	r1, r3
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f002 fadf 	bl	8004ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_Pin;
 800250a:	2301      	movs	r3, #1
 800250c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250e:	2303      	movs	r3, #3
 8002510:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(NTC_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800251a:	4619      	mov	r1, r3
 800251c:	485f      	ldr	r0, [pc, #380]	; (800269c <HAL_ADC_MspInit+0x258>)
 800251e:	f002 fad3 	bl	8004ac8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002524:	4a5f      	ldr	r2, [pc, #380]	; (80026a4 <HAL_ADC_MspInit+0x260>)
 8002526:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002528:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 800252a:	2205      	movs	r2, #5
 800252c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002534:	4b5a      	ldr	r3, [pc, #360]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800253a:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002540:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002548:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 800254a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800254e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002556:	4b52      	ldr	r3, [pc, #328]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800255c:	4850      	ldr	r0, [pc, #320]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 800255e:	f002 f841 	bl	80045e4 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8002568:	f7ff ff3a 	bl	80023e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a4c      	ldr	r2, [pc, #304]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
 8002572:	4a4b      	ldr	r2, [pc, #300]	; (80026a0 <HAL_ADC_MspInit+0x25c>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002578:	e087      	b.n	800268a <HAL_ADC_MspInit+0x246>
  else if(hadc->Instance==ADC2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a4a      	ldr	r2, [pc, #296]	; (80026a8 <HAL_ADC_MspInit+0x264>)
 8002580:	4293      	cmp	r3, r2
 8002582:	f040 8082 	bne.w	800268a <HAL_ADC_MspInit+0x246>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800258c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002590:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	4618      	mov	r0, r3
 8002598:	f003 fac4 	bl	8005b24 <HAL_RCCEx_PeriphCLKConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 80025a2:	f7ff ff1d 	bl	80023e0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_ADC_MspInit+0x250>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a39      	ldr	r2, [pc, #228]	; (8002694 <HAL_ADC_MspInit+0x250>)
 80025ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_ADC_MspInit+0x250>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10b      	bne.n	80025d0 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025bc:	4a36      	ldr	r2, [pc, #216]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	4a30      	ldr	r2, [pc, #192]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025dc:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ec:	4a2a      	ldr	r2, [pc, #168]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_ADC_MspInit+0x254>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IOUT_Pin;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002604:	2303      	movs	r3, #3
 8002606:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(IOUT_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002610:	4619      	mov	r1, r3
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f002 fa57 	bl	8004ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PD_Pin|VBUS_Pin;
 800261a:	f248 0304 	movw	r3, #32772	; 0x8004
 800261e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002620:	2303      	movs	r3, #3
 8002622:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800262c:	4619      	mov	r1, r3
 800262e:	481b      	ldr	r0, [pc, #108]	; (800269c <HAL_ADC_MspInit+0x258>)
 8002630:	f002 fa4a 	bl	8004ac8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002636:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_ADC_MspInit+0x26c>)
 8002638:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_ADC_MspInit+0x268>)
 800263c:	2224      	movs	r2, #36	; 0x24
 800263e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002648:	2200      	movs	r2, #0
 800264a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_ADC_MspInit+0x268>)
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002658:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_ADC_MspInit+0x268>)
 800265c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002660:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002664:	2220      	movs	r2, #32
 8002666:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_ADC_MspInit+0x268>)
 800266a:	2200      	movs	r2, #0
 800266c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800266e:	480f      	ldr	r0, [pc, #60]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002670:	f001 ffb8 	bl	80045e4 <HAL_DMA_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_ADC_MspInit+0x23a>
      Error_Handler();
 800267a:	f7ff feb1 	bl	80023e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_ADC_MspInit+0x268>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6293      	str	r3, [r2, #40]	; 0x28
}
 800268a:	bf00      	nop
 800268c:	3778      	adds	r7, #120	; 0x78
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000ce0 	.word	0x20000ce0
 8002698:	40021000 	.word	0x40021000
 800269c:	48000400 	.word	0x48000400
 80026a0:	20000110 	.word	0x20000110
 80026a4:	40020008 	.word	0x40020008
 80026a8:	50000100 	.word	0x50000100
 80026ac:	20000170 	.word	0x20000170
 80026b0:	4002001c 	.word	0x4002001c

080026b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2c      	ldr	r2, [pc, #176]	; (8002784 <HAL_SPI_MspInit+0xd0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d151      	bne.n	800277a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_SPI_MspInit+0xd4>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	4a2b      	ldr	r2, [pc, #172]	; (8002788 <HAL_SPI_MspInit+0xd4>)
 80026dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026e0:	6613      	str	r3, [r2, #96]	; 0x60
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_SPI_MspInit+0xd4>)
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_SPI_MspInit+0xd4>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	4a25      	ldr	r2, [pc, #148]	; (8002788 <HAL_SPI_MspInit+0xd4>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_SPI_MspInit+0xd4>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002706:	2360      	movs	r3, #96	; 0x60
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002716:	2305      	movs	r3, #5
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002724:	f002 f9d0 	bl	8004ac8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_SPI_MspInit+0xd8>)
 800272a:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_SPI_MspInit+0xdc>)
 800272c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002730:	220a      	movs	r2, #10
 8002732:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <HAL_SPI_MspInit+0xd8>)
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_SPI_MspInit+0xd8>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002754:	2200      	movs	r2, #0
 8002756:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_SPI_MspInit+0xd8>)
 800275a:	2200      	movs	r2, #0
 800275c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800275e:	480b      	ldr	r0, [pc, #44]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002760:	f001 ff40 	bl	80045e4 <HAL_DMA_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800276a:	f7ff fe39 	bl	80023e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002772:	659a      	str	r2, [r3, #88]	; 0x58
 8002774:	4a05      	ldr	r2, [pc, #20]	; (800278c <HAL_SPI_MspInit+0xd8>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40013000 	.word	0x40013000
 8002788:	40021000 	.word	0x40021000
 800278c:	20000234 	.word	0x20000234
 8002790:	40020030 	.word	0x40020030

08002794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_TIM_Base_MspInit+0x17c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d132      	bne.n	800281c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027b6:	4b57      	ldr	r3, [pc, #348]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80027bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027c0:	6613      	str	r3, [r2, #96]	; 0x60
 80027c2:	4b54      	ldr	r3, [pc, #336]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a50      	ldr	r2, [pc, #320]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b4e      	ldr	r3, [pc, #312]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FAN1_RPM_Pin;
 80027e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80027f8:	2306      	movs	r3, #6
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(FAN1_RPM_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	4619      	mov	r1, r3
 8002802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002806:	f002 f95f 	bl	8004ac8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2019      	movs	r0, #25
 8002810:	f001 feb3 	bl	800457a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002814:	2019      	movs	r0, #25
 8002816:	f001 feca 	bl	80045ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800281a:	e074      	b.n	8002906 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d114      	bne.n	8002850 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	201c      	movs	r0, #28
 8002844:	f001 fe99 	bl	800457a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002848:	201c      	movs	r0, #28
 800284a:	f001 feb0 	bl	80045ae <HAL_NVIC_EnableIRQ>
}
 800284e:	e05a      	b.n	8002906 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM8)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a30      	ldr	r2, [pc, #192]	; (8002918 <HAL_TIM_Base_MspInit+0x184>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800285a:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 8002860:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002864:	6613      	str	r3, [r2, #96]	; 0x60
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
}
 8002872:	e048      	b.n	8002906 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM15)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a28      	ldr	r2, [pc, #160]	; (800291c <HAL_TIM_Base_MspInit+0x188>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10c      	bne.n	8002898 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 8002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6613      	str	r3, [r2, #96]	; 0x60
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
}
 8002896:	e036      	b.n	8002906 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM16)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_TIM_Base_MspInit+0x18c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d131      	bne.n	8002906 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ac:	6613      	str	r3, [r2, #96]	; 0x60
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80028b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_TIM_Base_MspInit+0x180>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FANPCB_RPM_Pin;
 80028d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80028e4:	2301      	movs	r3, #1
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(FANPCB_RPM_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	4619      	mov	r1, r3
 80028ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f2:	f002 f8e9 	bl	8004ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2019      	movs	r0, #25
 80028fc:	f001 fe3d 	bl	800457a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002900:	2019      	movs	r0, #25
 8002902:	f001 fe54 	bl	80045ae <HAL_NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3738      	adds	r7, #56	; 0x38
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40013400 	.word	0x40013400
 800291c:	40014000 	.word	0x40014000
 8002920:	40014400 	.word	0x40014400

08002924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3d      	ldr	r2, [pc, #244]	; (8002a38 <HAL_TIM_MspPostInit+0x114>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d11e      	bne.n	8002984 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_OUT_Pin;
 800295e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002970:	2306      	movs	r3, #6
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN1_OUT_GPIO_Port, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297e:	f002 f8a3 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002982:	e054      	b.n	8002a2e <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM8)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2d      	ldr	r2, [pc, #180]	; (8002a40 <HAL_TIM_MspPostInit+0x11c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12d      	bne.n	80029ea <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIN_Pin;
 80029a6:	2302      	movs	r3, #2
 80029a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029b6:	2304      	movs	r3, #4
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIN_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	4820      	ldr	r0, [pc, #128]	; (8002a44 <HAL_TIM_MspPostInit+0x120>)
 80029c2:	f002 f881 	bl	8004ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HIN_Pin;
 80029c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80029d8:	230a      	movs	r3, #10
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HIN_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4818      	ldr	r0, [pc, #96]	; (8002a44 <HAL_TIM_MspPostInit+0x120>)
 80029e4:	f002 f870 	bl	8004ac8 <HAL_GPIO_Init>
}
 80029e8:	e021      	b.n	8002a2e <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM15)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_TIM_MspPostInit+0x124>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d11c      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_TIM_MspPostInit+0x118>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAN2_OUT_Pin;
 8002a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN2_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4806      	ldr	r0, [pc, #24]	; (8002a44 <HAL_TIM_MspPostInit+0x120>)
 8002a2a:	f002 f84d 	bl	8004ac8 <HAL_GPIO_Init>
}
 8002a2e:	bf00      	nop
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40013400 	.word	0x40013400
 8002a44:	48000400 	.word	0x48000400
 8002a48:	40014000 	.word	0x40014000

08002a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b09a      	sub	sp, #104	; 0x68
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	2244      	movs	r2, #68	; 0x44
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f007 f821 	bl	8009ab4 <memset>
  if(huart->Instance==USART2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_UART_MspInit+0xa8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d136      	bne.n	8002aea <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 f84b 	bl	8005b24 <HAL_RCCEx_PeriphCLKConfig>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a94:	f7ff fca4 	bl	80023e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_UART_MspInit+0xac>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_UART_MspInit+0xac>)
 8002a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_UART_MspInit+0xac>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_UART_MspInit+0xac>)
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab4:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_UART_MspInit+0xac>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_UART_MspInit+0xac>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002ac8:	230e      	movs	r3, #14
 8002aca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae6:	f001 ffef 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3768      	adds	r7, #104	; 0x68
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40004400 	.word	0x40004400
 8002af8:	40021000 	.word	0x40021000

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <NMI_Handler+0x4>

08002b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <HardFault_Handler+0x4>

08002b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <MemManage_Handler+0x4>

08002b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <BusFault_Handler+0x4>

08002b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <UsageFault_Handler+0x4>

08002b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b48:	f000 f8dc 	bl	8002d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8002b54:	f002 fa48 	bl	8004fe8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Channel1_IRQHandler+0x10>)
 8002b62:	f001 fe62 	bl	800482a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000110 	.word	0x20000110

08002b70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <DMA1_Channel2_IRQHandler+0x10>)
 8002b76:	f001 fe58 	bl	800482a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000170 	.word	0x20000170

08002b84 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <DMA1_Channel3_IRQHandler+0x10>)
 8002b8a:	f001 fe4e 	bl	800482a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000234 	.word	0x20000234

08002b98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAULT_SD_Pin);
 8002b9c:	2020      	movs	r0, #32
 8002b9e:	f002 f95f 	bl	8004e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bac:	4803      	ldr	r0, [pc, #12]	; (8002bbc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002bae:	f004 fb89 	bl	80072c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002bb2:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002bb4:	f004 fb86 	bl	80072c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000294 	.word	0x20000294
 8002bc0:	200003c4 	.word	0x200003c4

08002bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIM2_IRQHandler+0x10>)
 8002bca:	f004 fb7b 	bl	80072c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200002e0 	.word	0x200002e0

08002bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PG_MPQ_Pin);
 8002bdc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002be0:	f002 f93e 	bl	8004e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <SystemInit+0x20>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <SystemInit+0x20>)
 8002bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c0c:	480d      	ldr	r0, [pc, #52]	; (8002c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c12:	490e      	ldr	r1, [pc, #56]	; (8002c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <LoopForever+0xe>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c18:	e002      	b.n	8002c20 <LoopCopyDataInit>

08002c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1e:	3304      	adds	r3, #4

08002c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c24:	d3f9      	bcc.n	8002c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c28:	4c0b      	ldr	r4, [pc, #44]	; (8002c58 <LoopForever+0x16>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c2c:	e001      	b.n	8002c32 <LoopFillZerobss>

08002c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c30:	3204      	adds	r2, #4

08002c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c34:	d3fb      	bcc.n	8002c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c36:	f7ff ffd7 	bl	8002be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3a:	f006 ff43 	bl	8009ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c3e:	f7fe f857 	bl	8000cf0 <main>

08002c42 <LoopForever>:

LoopForever:
    b LoopForever
 8002c42:	e7fe      	b.n	8002c42 <LoopForever>
  ldr   r0, =_estack
 8002c44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002c50:	08009b90 	.word	0x08009b90
  ldr r2, =_sbss
 8002c54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002c58:	20000ea0 	.word	0x20000ea0

08002c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c5c:	e7fe      	b.n	8002c5c <ADC1_2_IRQHandler>

08002c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f001 fc7b 	bl	8004564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c6e:	200f      	movs	r0, #15
 8002c70:	f000 f80e 	bl	8002c90 <HAL_InitTick>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	e001      	b.n	8002c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c80:	f7ff fbb4 	bl	80023ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c84:	79fb      	ldrb	r3, [r7, #7]

}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_InitTick+0x68>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d022      	beq.n	8002cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_InitTick+0x6c>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_InitTick+0x68>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fc86 	bl	80045ca <HAL_SYSTICK_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	d809      	bhi.n	8002cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd2:	f001 fc52 	bl	800457a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_InitTick+0x70>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e007      	b.n	8002cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e004      	b.n	8002cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e001      	b.n	8002cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000008 	.word	0x20000008
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_IncTick+0x1c>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_IncTick+0x20>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	4a03      	ldr	r2, [pc, #12]	; (8002d20 <HAL_IncTick+0x1c>)
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	20000ce4 	.word	0x20000ce4
 8002d24:	20000008 	.word	0x20000008

08002d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_GetTick+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000ce4 	.word	0x20000ce4

08002d40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <LL_ADC_SetOffset+0x44>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	03fff000 	.word	0x03fff000

08002df0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	461a      	mov	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3360      	adds	r3, #96	; 0x60
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3360      	adds	r3, #96	; 0x60
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3360      	adds	r3, #96	; 0x60
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	615a      	str	r2, [r3, #20]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b087      	sub	sp, #28
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3330      	adds	r3, #48	; 0x30
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	4413      	add	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	211f      	movs	r1, #31
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 011f 	and.w	r1, r3, #31
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	431a      	orrs	r2, r3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3314      	adds	r3, #20
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	0e5b      	lsrs	r3, r3, #25
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	4413      	add	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	0d1b      	lsrs	r3, r3, #20
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2107      	movs	r1, #7
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0d1b      	lsrs	r3, r3, #20
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d10a      	bne.n	8002fe2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	407f0000 	.word	0x407f0000

08003008 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003034:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6093      	str	r3, [r2, #8]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305c:	d101      	bne.n	8003062 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003084:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ac:	d101      	bne.n	80030b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030fc:	f043 0202 	orr.w	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <LL_ADC_IsEnabled+0x18>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <LL_ADC_IsEnabled+0x1a>
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d101      	bne.n	800314e <LL_ADC_IsDisableOngoing+0x18>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <LL_ADC_IsDisableOngoing+0x1a>
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800316c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003170:	f043 0204 	orr.w	r2, r3, #4
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d101      	bne.n	800319c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d101      	bne.n	80031c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e177      	b.n	80034da <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff f923 	bl	8002444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff19 	bl	8003048 <LL_ADC_IsDeepPowerDownEnabled>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff feff 	bl	8003024 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff34 	bl	8003098 <LL_ADC_IsInternalRegulatorEnabled>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff18 	bl	8003070 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003240:	4b9c      	ldr	r3, [pc, #624]	; (80034b4 <HAL_ADC_Init+0x2e4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	4a9c      	ldr	r2, [pc, #624]	; (80034b8 <HAL_ADC_Init+0x2e8>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003254:	e002      	b.n	800325c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3b01      	subs	r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f9      	bne.n	8003256 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff16 	bl	8003098 <LL_ADC_IsInternalRegulatorEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff76 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003298:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8110 	bne.w	80034c8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 810c 	bne.w	80034c8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032b8:	f043 0202 	orr.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff23 	bl	8003110 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032d4:	f7ff ff1c 	bl	8003110 <LL_ADC_IsEnabled>
 80032d8:	4604      	mov	r4, r0
 80032da:	4878      	ldr	r0, [pc, #480]	; (80034bc <HAL_ADC_Init+0x2ec>)
 80032dc:	f7ff ff18 	bl	8003110 <LL_ADC_IsEnabled>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4323      	orrs	r3, r4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4619      	mov	r1, r3
 80032ee:	4874      	ldr	r0, [pc, #464]	; (80034c0 <HAL_ADC_Init+0x2f0>)
 80032f0:	f7ff fd26 	bl	8002d40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7f5b      	ldrb	r3, [r3, #29]
 80032f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003304:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800330a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003312:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	045b      	lsls	r3, r3, #17
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	4b5c      	ldr	r3, [pc, #368]	; (80034c4 <HAL_ADC_Init+0x2f4>)
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	69b9      	ldr	r1, [r7, #24]
 800335c:	430b      	orrs	r3, r1
 800335e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff02 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003380:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff0f 	bl	80031aa <LL_ADC_INJ_IsConversionOngoing>
 800338c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d16d      	bne.n	8003470 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d16a      	bne.n	8003470 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800339e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b6:	f023 0302 	bic.w	r3, r3, #2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6911      	ldr	r1, [r2, #16]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80033fa:	e013      	b.n	8003424 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800340a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800341c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003420:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d118      	bne.n	8003460 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003450:	430a      	orrs	r2, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	611a      	str	r2, [r3, #16]
 800345e:	e007      	b.n	8003470 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10c      	bne.n	8003492 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f023 010f 	bic.w	r1, r3, #15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	1e5a      	subs	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
 8003490:	e007      	b.n	80034a2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 020f 	bic.w	r2, r2, #15
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034b2:	e011      	b.n	80034d8 <HAL_ADC_Init+0x308>
 80034b4:	20000000 	.word	0x20000000
 80034b8:	053e2d63 	.word	0x053e2d63
 80034bc:	50000100 	.word	0x50000100
 80034c0:	50000300 	.word	0x50000300
 80034c4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	f043 0210 	orr.w	r2, r3, #16
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}
 80034e2:	bf00      	nop

080034e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f0:	4851      	ldr	r0, [pc, #324]	; (8003638 <HAL_ADC_Start_DMA+0x154>)
 80034f2:	f7ff fd89 	bl	8003008 <LL_ADC_GetMultimode>
 80034f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fe41 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 808f 	bne.w	8003628 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_ADC_Start_DMA+0x34>
 8003514:	2302      	movs	r3, #2
 8003516:	e08a      	b.n	800362e <HAL_ADC_Start_DMA+0x14a>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b05      	cmp	r3, #5
 800352a:	d002      	beq.n	8003532 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b09      	cmp	r3, #9
 8003530:	d173      	bne.n	800361a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fc98 	bl	8003e68 <ADC_Enable>
 8003538:	4603      	mov	r3, r0
 800353a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d166      	bne.n	8003610 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_ADC_Start_DMA+0x158>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d002      	beq.n	8003566 <HAL_ADC_Start_DMA+0x82>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e001      	b.n	800356a <HAL_ADC_Start_DMA+0x86>
 8003566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	4293      	cmp	r3, r2
 8003570:	d002      	beq.n	8003578 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	f023 0206 	bic.w	r2, r3, #6
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
 800359c:	e002      	b.n	80035a4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	4a25      	ldr	r2, [pc, #148]	; (8003640 <HAL_ADC_Start_DMA+0x15c>)
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <HAL_ADC_Start_DMA+0x160>)
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_ADC_Start_DMA+0x164>)
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	221c      	movs	r2, #28
 80035c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0210 	orr.w	r2, r2, #16
 80035da:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3340      	adds	r3, #64	; 0x40
 80035f6:	4619      	mov	r1, r3
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f001 f89a 	bl	8004734 <HAL_DMA_Start_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fda7 	bl	800315c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800360e:	e00d      	b.n	800362c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003618:	e008      	b.n	800362c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003626:	e001      	b.n	800362c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003628:	2302      	movs	r3, #2
 800362a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800362c:	7dfb      	ldrb	r3, [r7, #23]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	50000300 	.word	0x50000300
 800363c:	50000100 	.word	0x50000100
 8003640:	08003feb 	.word	0x08003feb
 8003644:	080040c3 	.word	0x080040c3
 8003648:	080040df 	.word	0x080040df

0800364c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b0b6      	sub	sp, #216	; 0xd8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x22>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e3c8      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x7b4>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fd64 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 83ad 	bne.w	8003e1e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f7ff fc1a 	bl	8002f0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fd52 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 80036e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fd5e 	bl	80031aa <LL_ADC_INJ_IsConversionOngoing>
 80036ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f040 81d9 	bne.w	8003aae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 81d4 	bne.w	8003aae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800370e:	d10f      	bne.n	8003730 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2200      	movs	r2, #0
 800371a:	4619      	mov	r1, r3
 800371c:	f7ff fc21 	bl	8002f62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fbc8 	bl	8002ebe <LL_ADC_SetSamplingTimeCommonConfig>
 800372e:	e00e      	b.n	800374e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	461a      	mov	r2, r3
 800373e:	f7ff fc10 	bl	8002f62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fbb8 	bl	8002ebe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	08db      	lsrs	r3, r3, #3
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d022      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6919      	ldr	r1, [r3, #16]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003780:	f7ff fb12 	bl	8002da8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6919      	ldr	r1, [r3, #16]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	461a      	mov	r2, r3
 8003792:	f7ff fb5e 	bl	8002e52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	7f1b      	ldrb	r3, [r3, #28]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x124>
 80037a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037aa:	e000      	b.n	80037ae <HAL_ADC_ConfigChannel+0x126>
 80037ac:	2300      	movs	r3, #0
 80037ae:	461a      	mov	r2, r3
 80037b0:	f7ff fb6a 	bl	8002e88 <LL_ADC_SetOffsetSaturation>
 80037b4:	e17b      	b.n	8003aae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fb17 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x15a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fb0c 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80037d8:	4603      	mov	r3, r0
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	e01e      	b.n	8003820 <HAL_ADC_ConfigChannel+0x198>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fb01 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e004      	b.n	800381e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x1b0>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	e018      	b.n	800386a <HAL_ADC_ConfigChannel+0x1e2>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800384c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e004      	b.n	800386a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800386a:	429a      	cmp	r2, r3
 800386c:	d106      	bne.n	800387c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fad0 	bl	8002e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fab4 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x220>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff faa9 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	0e9b      	lsrs	r3, r3, #26
 80038a2:	f003 021f 	and.w	r2, r3, #31
 80038a6:	e01e      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x25e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fa9e 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80038c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80038ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e004      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80038da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x276>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	0e9b      	lsrs	r3, r3, #26
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	e018      	b.n	8003930 <HAL_ADC_ConfigChannel+0x2a8>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800391a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003922:	2320      	movs	r3, #32
 8003924:	e004      	b.n	8003930 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003930:	429a      	cmp	r2, r3
 8003932:	d106      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fa6d 	bl	8002e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fa51 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_ADC_ConfigChannel+0x2e6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2102      	movs	r1, #2
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fa46 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	e01e      	b.n	80039ac <HAL_ADC_ConfigChannel+0x324>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2102      	movs	r1, #2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fa3b 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800398c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e004      	b.n	80039aa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80039a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x33c>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0e9b      	lsrs	r3, r3, #26
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	e016      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x36a>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80039d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80039dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80039e4:	2320      	movs	r3, #32
 80039e6:	e004      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80039e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d106      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fa0c 	bl	8002e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2103      	movs	r1, #3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f9f0 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x3a8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2103      	movs	r1, #3
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff f9e5 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	f003 021f 	and.w	r2, r3, #31
 8003a2e:	e017      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x3d8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2103      	movs	r1, #3
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff f9da 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a4a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003a52:	2320      	movs	r3, #32
 8003a54:	e003      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x3f0>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	e011      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x414>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e003      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d106      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff f9b7 	bl	8002e1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fb2c 	bl	8003110 <LL_ADC_IsEnabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 8140 	bne.w	8003d40 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f7ff fa73 	bl	8002fb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	4a8f      	ldr	r2, [pc, #572]	; (8003d14 <HAL_ADC_ConfigChannel+0x68c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	f040 8131 	bne.w	8003d40 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x47e>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	0e9b      	lsrs	r3, r3, #26
 8003af4:	3301      	adds	r3, #1
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2b09      	cmp	r3, #9
 8003afc:	bf94      	ite	ls
 8003afe:	2301      	movls	r3, #1
 8003b00:	2300      	movhi	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	e019      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x4b2>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b16:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e003      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	bf94      	ite	ls
 8003b34:	2301      	movls	r3, #1
 8003b36:	2300      	movhi	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d079      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x4d2>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	0e9b      	lsrs	r3, r3, #26
 8003b50:	3301      	adds	r3, #1
 8003b52:	069b      	lsls	r3, r3, #26
 8003b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b58:	e015      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x4fe>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003b72:	2320      	movs	r3, #32
 8003b74:	e003      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	069b      	lsls	r3, r3, #26
 8003b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x51e>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	0e9b      	lsrs	r3, r3, #26
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	e017      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x54e>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	e003      	b.n	8003bca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x574>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	3301      	adds	r3, #1
 8003bee:	f003 021f 	and.w	r2, r3, #31
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	051b      	lsls	r3, r3, #20
 8003bfa:	e018      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x5a6>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003c14:	2320      	movs	r3, #32
 8003c16:	e003      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	f003 021f 	and.w	r2, r3, #31
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	e081      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d107      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x5c6>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	0e9b      	lsrs	r3, r3, #26
 8003c44:	3301      	adds	r3, #1
 8003c46:	069b      	lsls	r3, r3, #26
 8003c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c4c:	e015      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x5f2>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	069b      	lsls	r3, r3, #26
 8003c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x612>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0e9b      	lsrs	r3, r3, #26
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	e017      	b.n	8003cca <HAL_ADC_ConfigChannel+0x642>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	e003      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	ea42 0103 	orr.w	r1, r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x66e>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0e9b      	lsrs	r3, r3, #26
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f003 021f 	and.w	r2, r3, #31
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	3b1e      	subs	r3, #30
 8003cee:	051b      	lsls	r3, r3, #20
 8003cf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	e01e      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x6ac>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	613b      	str	r3, [r7, #16]
  return result;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d104      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003d0e:	2320      	movs	r3, #32
 8003d10:	e006      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x698>
 8003d12:	bf00      	nop
 8003d14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3301      	adds	r3, #1
 8003d22:	f003 021f 	and.w	r2, r3, #31
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3b1e      	subs	r3, #30
 8003d2e:	051b      	lsls	r3, r3, #20
 8003d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d34:	430b      	orrs	r3, r1
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	6892      	ldr	r2, [r2, #8]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7ff f911 	bl	8002f62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d071      	beq.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d4c:	483e      	ldr	r0, [pc, #248]	; (8003e48 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d4e:	f7ff f81d 	bl	8002d8c <LL_ADC_GetCommonPathInternalCh>
 8003d52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3c      	ldr	r2, [pc, #240]	; (8003e4c <HAL_ADC_ConfigChannel+0x7c4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_ADC_ConfigChannel+0x6e2>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3a      	ldr	r2, [pc, #232]	; (8003e50 <HAL_ADC_ConfigChannel+0x7c8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d127      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d121      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d7e:	d157      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d88:	4619      	mov	r1, r3
 8003d8a:	482f      	ldr	r0, [pc, #188]	; (8003e48 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d8c:	f7fe ffeb 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d90:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <HAL_ADC_ConfigChannel+0x7cc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <HAL_ADC_ConfigChannel+0x7d0>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003daa:	e002      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f9      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003db8:	e03a      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a27      	ldr	r2, [pc, #156]	; (8003e5c <HAL_ADC_ConfigChannel+0x7d4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d113      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x764>
 8003dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_ADC_ConfigChannel+0x7d8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02a      	beq.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de2:	4619      	mov	r1, r3
 8003de4:	4818      	ldr	r0, [pc, #96]	; (8003e48 <HAL_ADC_ConfigChannel+0x7c0>)
 8003de6:	f7fe ffbe 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dea:	e021      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_ADC_ConfigChannel+0x7dc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d11c      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d116      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d011      	beq.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e14:	4619      	mov	r1, r3
 8003e16:	480c      	ldr	r0, [pc, #48]	; (8003e48 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e18:	f7fe ffa5 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
 8003e1c:	e008      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e38:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	37d8      	adds	r7, #216	; 0xd8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	80080000 	.word	0x80080000
 8003e48:	50000300 	.word	0x50000300
 8003e4c:	c3210000 	.word	0xc3210000
 8003e50:	90c00010 	.word	0x90c00010
 8003e54:	20000000 	.word	0x20000000
 8003e58:	053e2d63 	.word	0x053e2d63
 8003e5c:	c7520000 	.word	0xc7520000
 8003e60:	50000100 	.word	0x50000100
 8003e64:	cb840000 	.word	0xcb840000

08003e68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff f94b 	bl	8003110 <LL_ADC_IsEnabled>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d14d      	bne.n	8003f1c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <ADC_Enable+0xc0>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	f043 0210 	orr.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e039      	b.n	8003f1e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff f906 	bl	80030c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003eb4:	f7fe ff38 	bl	8002d28 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eba:	e028      	b.n	8003f0e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff f925 	bl	8003110 <LL_ADC_IsEnabled>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff f8f5 	bl	80030c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ed6:	f7fe ff27 	bl	8002d28 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d914      	bls.n	8003f0e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d00d      	beq.n	8003f0e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	f043 0210 	orr.w	r2, r3, #16
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f043 0201 	orr.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e007      	b.n	8003f1e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d1cf      	bne.n	8003ebc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	8000003f 	.word	0x8000003f

08003f2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff f8fc 	bl	8003136 <LL_ADC_IsDisableOngoing>
 8003f3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f8e3 	bl	8003110 <LL_ADC_IsEnabled>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d047      	beq.n	8003fe0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d144      	bne.n	8003fe0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 030d 	and.w	r3, r3, #13
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10c      	bne.n	8003f7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff f8bd 	bl	80030e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2203      	movs	r2, #3
 8003f74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f76:	f7fe fed7 	bl	8002d28 <HAL_GetTick>
 8003f7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f7c:	e029      	b.n	8003fd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	f043 0210 	orr.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8e:	f043 0201 	orr.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e023      	b.n	8003fe2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f9a:	f7fe fec5 	bl	8002d28 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d914      	bls.n	8003fd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	f043 0210 	orr.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	f043 0201 	orr.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e007      	b.n	8003fe2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1dc      	bne.n	8003f9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004000:	2b00      	cmp	r3, #0
 8004002:	d14b      	bne.n	800409c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d021      	beq.n	8004062 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe ff5e 	bl	8002ee4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d032      	beq.n	8004094 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d12b      	bne.n	8004094 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11f      	bne.n	8004094 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004060:	e018      	b.n	8004094 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fad9 	bl	800364c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800409a:	e00e      	b.n	80040ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fae3 	bl	8003674 <HAL_ADC_ErrorCallback>
}
 80040ae:	e004      	b.n	80040ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff fac5 	bl	8003660 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	f043 0204 	orr.w	r2, r3, #4
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff fab5 	bl	8003674 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <LL_ADC_IsEnabled>:
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <LL_ADC_IsEnabled+0x18>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_ADC_IsEnabled+0x1a>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_StartCalibration>:
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800414a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004154:	4313      	orrs	r3, r2
 8004156:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_ADC_IsCalibrationOnGoing>:
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800417a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800417e:	d101      	bne.n	8004184 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_REG_IsConversionOngoing>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d101      	bne.n	80041aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e04d      	b.n	8004270 <HAL_ADCEx_Calibration_Start+0xb8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fea5 	bl	8003f2c <ADC_Disable>
 80041e2:	4603      	mov	r3, r0
 80041e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d136      	bne.n	800425a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041f4:	f023 0302 	bic.w	r3, r3, #2
 80041f8:	f043 0202 	orr.w	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff ff96 	bl	8004138 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800420c:	e014      	b.n	8004238 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3301      	adds	r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d90d      	bls.n	8004238 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	f023 0312 	bic.w	r3, r3, #18
 8004224:	f043 0210 	orr.w	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e01b      	b.n	8004270 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ff94 	bl	800416a <LL_ADC_IsCalibrationOnGoing>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e2      	bne.n	800420e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	f023 0303 	bic.w	r3, r3, #3
 8004250:	f043 0201 	orr.w	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c
 8004258:	e005      	b.n	8004266 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f043 0210 	orr.w	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	0004de01 	.word	0x0004de01

0800427c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b0a1      	sub	sp, #132	; 0x84
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004296:	2302      	movs	r3, #2
 8004298:	e08b      	b.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80042a2:	2300      	movs	r3, #0
 80042a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80042a6:	2300      	movs	r3, #0
 80042a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b2:	d102      	bne.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042b4:	4b41      	ldr	r3, [pc, #260]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	e001      	b.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e06a      	b.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff57 	bl	8004192 <LL_ADC_REG_IsConversionOngoing>
 80042e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff51 	bl	8004192 <LL_ADC_REG_IsConversionOngoing>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d14c      	bne.n	8004390 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80042f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d149      	bne.n	8004390 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80042fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d028      	beq.n	800435a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800431a:	035b      	lsls	r3, r3, #13
 800431c:	430b      	orrs	r3, r1
 800431e:	431a      	orrs	r2, r3
 8004320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004322:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004324:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004328:	f7ff fef3 	bl	8004112 <LL_ADC_IsEnabled>
 800432c:	4604      	mov	r4, r0
 800432e:	4823      	ldr	r0, [pc, #140]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004330:	f7ff feef 	bl	8004112 <LL_ADC_IsEnabled>
 8004334:	4603      	mov	r3, r0
 8004336:	4323      	orrs	r3, r4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d133      	bne.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800433c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004344:	f023 030f 	bic.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	6811      	ldr	r1, [r2, #0]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	6892      	ldr	r2, [r2, #8]
 8004350:	430a      	orrs	r2, r1
 8004352:	431a      	orrs	r2, r3
 8004354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004356:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004358:	e024      	b.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800435a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004364:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004366:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800436a:	f7ff fed2 	bl	8004112 <LL_ADC_IsEnabled>
 800436e:	4604      	mov	r4, r0
 8004370:	4812      	ldr	r0, [pc, #72]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004372:	f7ff fece 	bl	8004112 <LL_ADC_IsEnabled>
 8004376:	4603      	mov	r3, r0
 8004378:	4323      	orrs	r3, r4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d112      	bne.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800437e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004386:	f023 030f 	bic.w	r3, r3, #15
 800438a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800438c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800438e:	e009      	b.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80043a2:	e000      	b.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3784      	adds	r7, #132	; 0x84
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}
 80043ba:	bf00      	nop
 80043bc:	50000100 	.word	0x50000100
 80043c0:	50000300 	.word	0x50000300

080043c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043e0:	4013      	ands	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	60d3      	str	r3, [r2, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <__NVIC_GetPriorityGrouping+0x18>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	f003 0307 	and.w	r3, r3, #7
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db0b      	blt.n	8004452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	4907      	ldr	r1, [pc, #28]	; (8004460 <__NVIC_EnableIRQ+0x38>)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2001      	movs	r0, #1
 800444a:	fa00 f202 	lsl.w	r2, r0, r2
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	e000e100 	.word	0xe000e100

08004464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	6039      	str	r1, [r7, #0]
 800446e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004474:	2b00      	cmp	r3, #0
 8004476:	db0a      	blt.n	800448e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	490c      	ldr	r1, [pc, #48]	; (80044b0 <__NVIC_SetPriority+0x4c>)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	0112      	lsls	r2, r2, #4
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	440b      	add	r3, r1
 8004488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800448c:	e00a      	b.n	80044a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4908      	ldr	r1, [pc, #32]	; (80044b4 <__NVIC_SetPriority+0x50>)
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	3b04      	subs	r3, #4
 800449c:	0112      	lsls	r2, r2, #4
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	440b      	add	r3, r1
 80044a2:	761a      	strb	r2, [r3, #24]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000e100 	.word	0xe000e100
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f1c3 0307 	rsb	r3, r3, #7
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	bf28      	it	cs
 80044d6:	2304      	movcs	r3, #4
 80044d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3304      	adds	r3, #4
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d902      	bls.n	80044e8 <NVIC_EncodePriority+0x30>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3b03      	subs	r3, #3
 80044e6:	e000      	b.n	80044ea <NVIC_EncodePriority+0x32>
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43da      	mvns	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	401a      	ands	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004500:	f04f 31ff 	mov.w	r1, #4294967295
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	43d9      	mvns	r1, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004510:	4313      	orrs	r3, r2
         );
}
 8004512:	4618      	mov	r0, r3
 8004514:	3724      	adds	r7, #36	; 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3b01      	subs	r3, #1
 800452c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004530:	d301      	bcc.n	8004536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004532:	2301      	movs	r3, #1
 8004534:	e00f      	b.n	8004556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <SysTick_Config+0x40>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3b01      	subs	r3, #1
 800453c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800453e:	210f      	movs	r1, #15
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	f7ff ff8e 	bl	8004464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <SysTick_Config+0x40>)
 800454a:	2200      	movs	r2, #0
 800454c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <SysTick_Config+0x40>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	e000e010 	.word	0xe000e010

08004564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff29 	bl	80043c4 <__NVIC_SetPriorityGrouping>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	4603      	mov	r3, r0
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004588:	f7ff ff40 	bl	800440c <__NVIC_GetPriorityGrouping>
 800458c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	6978      	ldr	r0, [r7, #20]
 8004594:	f7ff ff90 	bl	80044b8 <NVIC_EncodePriority>
 8004598:	4602      	mov	r2, r0
 800459a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff5f 	bl	8004464 <__NVIC_SetPriority>
}
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4603      	mov	r3, r0
 80045b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff33 	bl	8004428 <__NVIC_EnableIRQ>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff ffa4 	bl	8004520 <SysTick_Config>
 80045d8:	4603      	mov	r3, r0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e08d      	b.n	8004712 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_DMA_Init+0x138>)
 80045fe:	429a      	cmp	r2, r3
 8004600:	d80f      	bhi.n	8004622 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	4b45      	ldr	r3, [pc, #276]	; (8004720 <HAL_DMA_Init+0x13c>)
 800460a:	4413      	add	r3, r2
 800460c:	4a45      	ldr	r2, [pc, #276]	; (8004724 <HAL_DMA_Init+0x140>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	009a      	lsls	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a42      	ldr	r2, [pc, #264]	; (8004728 <HAL_DMA_Init+0x144>)
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
 8004620:	e00e      	b.n	8004640 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_DMA_Init+0x148>)
 800462a:	4413      	add	r3, r2
 800462c:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <HAL_DMA_Init+0x140>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	009a      	lsls	r2, r3, #2
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a3c      	ldr	r2, [pc, #240]	; (8004730 <HAL_DMA_Init+0x14c>)
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f9b6 	bl	8004a04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a0:	d102      	bne.n	80046a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d010      	beq.n	80046e8 <HAL_DMA_Init+0x104>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d80c      	bhi.n	80046e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9d6 	bl	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	e008      	b.n	80046fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40020407 	.word	0x40020407
 8004720:	bffdfff8 	.word	0xbffdfff8
 8004724:	cccccccd 	.word	0xcccccccd
 8004728:	40020000 	.word	0x40020000
 800472c:	bffdfbf8 	.word	0xbffdfbf8
 8004730:	40020400 	.word	0x40020400

08004734 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_DMA_Start_IT+0x20>
 8004750:	2302      	movs	r3, #2
 8004752:	e066      	b.n	8004822 <HAL_DMA_Start_IT+0xee>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d155      	bne.n	8004814 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f8fb 	bl	8004988 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 020e 	orr.w	r2, r2, #14
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e00f      	b.n	80047cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0204 	bic.w	r2, r2, #4
 80047ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 020a 	orr.w	r2, r2, #10
 80047ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004800:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e005      	b.n	8004820 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004820:	7dfb      	ldrb	r3, [r7, #23]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2204      	movs	r2, #4
 800484c:	409a      	lsls	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d026      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x7a>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d021      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f003 021f 	and.w	r2, r3, #31
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2104      	movs	r1, #4
 800488c:	fa01 f202 	lsl.w	r2, r1, r2
 8004890:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	2b00      	cmp	r3, #0
 8004898:	d071      	beq.n	800497e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048a2:	e06c      	b.n	800497e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2202      	movs	r2, #2
 80048ae:	409a      	lsls	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02e      	beq.n	8004916 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d029      	beq.n	8004916 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10b      	bne.n	80048e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020a 	bic.w	r2, r2, #10
 80048de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f003 021f 	and.w	r2, r3, #31
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2102      	movs	r1, #2
 80048f6:	fa01 f202 	lsl.w	r2, r1, r2
 80048fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d038      	beq.n	800497e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004914:	e033      	b.n	800497e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2208      	movs	r2, #8
 8004920:	409a      	lsls	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4013      	ands	r3, r2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d02a      	beq.n	8004980 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d025      	beq.n	8004980 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 020e 	bic.w	r2, r2, #14
 8004942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f202 	lsl.w	r2, r1, r2
 8004956:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800497e:	bf00      	nop
 8004980:	bf00      	nop
}
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800499e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f003 021f 	and.w	r2, r3, #31
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2101      	movs	r1, #1
 80049c0:	fa01 f202 	lsl.w	r2, r1, r2
 80049c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d108      	bne.n	80049e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049e6:	e007      	b.n	80049f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d802      	bhi.n	8004a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e001      	b.n	8004a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a20:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3b08      	subs	r3, #8
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3c:	089b      	lsrs	r3, r3, #2
 8004a3e:	009a      	lsls	r2, r3, #2
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2201      	movs	r2, #1
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40020407 	.word	0x40020407
 8004a70:	40020800 	.word	0x40020800
 8004a74:	40020820 	.word	0x40020820
 8004a78:	cccccccd 	.word	0xcccccccd
 8004a7c:	40020880 	.word	0x40020880

08004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004aa2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2201      	movs	r2, #1
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	1000823f 	.word	0x1000823f
 8004ac4:	40020940 	.word	0x40020940

08004ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ad6:	e15a      	b.n	8004d8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2101      	movs	r1, #1
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 814c 	beq.w	8004d88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d005      	beq.n	8004b08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d130      	bne.n	8004b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	2203      	movs	r2, #3
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b3e:	2201      	movs	r2, #1
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f003 0201 	and.w	r2, r3, #1
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d017      	beq.n	8004ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d123      	bne.n	8004bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	08da      	lsrs	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3208      	adds	r2, #8
 8004bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	220f      	movs	r2, #15
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	08da      	lsrs	r2, r3, #3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3208      	adds	r2, #8
 8004bf4:	6939      	ldr	r1, [r7, #16]
 8004bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	2203      	movs	r2, #3
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80a6 	beq.w	8004d88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c3c:	4b5b      	ldr	r3, [pc, #364]	; (8004dac <HAL_GPIO_Init+0x2e4>)
 8004c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c40:	4a5a      	ldr	r2, [pc, #360]	; (8004dac <HAL_GPIO_Init+0x2e4>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6613      	str	r3, [r2, #96]	; 0x60
 8004c48:	4b58      	ldr	r3, [pc, #352]	; (8004dac <HAL_GPIO_Init+0x2e4>)
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c54:	4a56      	ldr	r2, [pc, #344]	; (8004db0 <HAL_GPIO_Init+0x2e8>)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	220f      	movs	r2, #15
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c7e:	d01f      	beq.n	8004cc0 <HAL_GPIO_Init+0x1f8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a4c      	ldr	r2, [pc, #304]	; (8004db4 <HAL_GPIO_Init+0x2ec>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d019      	beq.n	8004cbc <HAL_GPIO_Init+0x1f4>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a4b      	ldr	r2, [pc, #300]	; (8004db8 <HAL_GPIO_Init+0x2f0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <HAL_GPIO_Init+0x1f0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_GPIO_Init+0x2f4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00d      	beq.n	8004cb4 <HAL_GPIO_Init+0x1ec>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a49      	ldr	r2, [pc, #292]	; (8004dc0 <HAL_GPIO_Init+0x2f8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <HAL_GPIO_Init+0x1e8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a48      	ldr	r2, [pc, #288]	; (8004dc4 <HAL_GPIO_Init+0x2fc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <HAL_GPIO_Init+0x1e4>
 8004ca8:	2305      	movs	r3, #5
 8004caa:	e00a      	b.n	8004cc2 <HAL_GPIO_Init+0x1fa>
 8004cac:	2306      	movs	r3, #6
 8004cae:	e008      	b.n	8004cc2 <HAL_GPIO_Init+0x1fa>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e006      	b.n	8004cc2 <HAL_GPIO_Init+0x1fa>
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e004      	b.n	8004cc2 <HAL_GPIO_Init+0x1fa>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e002      	b.n	8004cc2 <HAL_GPIO_Init+0x1fa>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <HAL_GPIO_Init+0x1fa>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	f002 0203 	and.w	r2, r2, #3
 8004cc8:	0092      	lsls	r2, r2, #2
 8004cca:	4093      	lsls	r3, r2
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cd2:	4937      	ldr	r1, [pc, #220]	; (8004db0 <HAL_GPIO_Init+0x2e8>)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	089b      	lsrs	r3, r3, #2
 8004cd8:	3302      	adds	r3, #2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ce0:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d04:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d0a:	4b2f      	ldr	r3, [pc, #188]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d58:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d5e:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d82:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <HAL_GPIO_Init+0x300>)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f ae9d 	bne.w	8004ad8 <HAL_GPIO_Init+0x10>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40010000 	.word	0x40010000
 8004db4:	48000400 	.word	0x48000400
 8004db8:	48000800 	.word	0x48000800
 8004dbc:	48000c00 	.word	0x48000c00
 8004dc0:	48001000 	.word	0x48001000
 8004dc4:	48001400 	.word	0x48001400
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
 8004de8:	e001      	b.n	8004dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	807b      	strh	r3, [r7, #2]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e0c:	787b      	ldrb	r3, [r7, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e18:	e002      	b.n	8004e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e1a:	887a      	ldrh	r2, [r7, #2]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4013      	ands	r3, r2
 8004e44:	041a      	lsls	r2, r3, #16
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	43d9      	mvns	r1, r3
 8004e4a:	887b      	ldrh	r3, [r7, #2]
 8004e4c:	400b      	ands	r3, r1
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	619a      	str	r2, [r3, #24]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d006      	beq.n	8004e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e76:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fc fe30 	bl	8001ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40010400 	.word	0x40010400

08004e90 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d141      	bne.n	8004f32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eae:	4b4b      	ldr	r3, [pc, #300]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eba:	d131      	bne.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ebc:	4b47      	ldr	r3, [pc, #284]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec2:	4a46      	ldr	r2, [pc, #280]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ecc:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ed4:	4a41      	ldr	r2, [pc, #260]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004edc:	4b40      	ldr	r3, [pc, #256]	; (8004fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2232      	movs	r2, #50	; 0x32
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	4a3f      	ldr	r2, [pc, #252]	; (8004fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	0c9b      	lsrs	r3, r3, #18
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ef2:	e002      	b.n	8004efa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004efa:	4b38      	ldr	r3, [pc, #224]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d102      	bne.n	8004f0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f2      	bne.n	8004ef4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f0e:	4b33      	ldr	r3, [pc, #204]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1a:	d158      	bne.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e057      	b.n	8004fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f20:	4b2e      	ldr	r3, [pc, #184]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f26:	4a2d      	ldr	r2, [pc, #180]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f30:	e04d      	b.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d141      	bne.n	8004fbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f3a:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f46:	d131      	bne.n	8004fac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f48:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f4e:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f60:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2232      	movs	r2, #50	; 0x32
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	0c9b      	lsrs	r3, r3, #18
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f7e:	e002      	b.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f86:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d102      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f2      	bne.n	8004f80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa6:	d112      	bne.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e011      	b.n	8004fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fbc:	e007      	b.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fc6:	4a05      	ldr	r2, [pc, #20]	; (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40007000 	.word	0x40007000
 8004fe0:	20000000 	.word	0x20000000
 8004fe4:	431bde83 	.word	0x431bde83

08004fe8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004ff8:	f7ff ff4a 	bl	8004e90 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004ffe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005002:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 8005004:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d004      	beq.n	800501a <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005010:	f000 f828 	bl	8005064 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005014:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005016:	2208      	movs	r2, #8
 8005018:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8005026:	f000 f824 	bl	8005072 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800502c:	2210      	movs	r2, #16
 800502e:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800503c:	f000 f820 	bl	8005080 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005042:	2220      	movs	r2, #32
 8005044:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8005052:	f000 f81c 	bl	800508e <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8005056:	4b02      	ldr	r3, [pc, #8]	; (8005060 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005058:	2240      	movs	r2, #64	; 0x40
 800505a:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800505c:	bf00      	nop
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40010400 	.word	0x40010400

08005064 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050aa:	6093      	str	r3, [r2, #8]
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40007000 	.word	0x40007000

080050bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e306      	b.n	80056dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d075      	beq.n	80051c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050da:	4b97      	ldr	r3, [pc, #604]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e4:	4b94      	ldr	r3, [pc, #592]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d102      	bne.n	80050fa <HAL_RCC_OscConfig+0x3e>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d002      	beq.n	8005100 <HAL_RCC_OscConfig+0x44>
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d10b      	bne.n	8005118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	4b8d      	ldr	r3, [pc, #564]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d05b      	beq.n	80051c4 <HAL_RCC_OscConfig+0x108>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d157      	bne.n	80051c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e2e1      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005120:	d106      	bne.n	8005130 <HAL_RCC_OscConfig+0x74>
 8005122:	4b85      	ldr	r3, [pc, #532]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a84      	ldr	r2, [pc, #528]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e01d      	b.n	800516c <HAL_RCC_OscConfig+0xb0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x98>
 800513a:	4b7f      	ldr	r3, [pc, #508]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a7e      	ldr	r2, [pc, #504]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4b7c      	ldr	r3, [pc, #496]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7b      	ldr	r2, [pc, #492]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0xb0>
 8005154:	4b78      	ldr	r3, [pc, #480]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a77      	ldr	r2, [pc, #476]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 800515a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b75      	ldr	r3, [pc, #468]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a74      	ldr	r2, [pc, #464]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fd fdd8 	bl	8002d28 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fd fdd4 	bl	8002d28 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e2a6      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518e:	4b6a      	ldr	r3, [pc, #424]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0xc0>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fd fdc4 	bl	8002d28 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fd fdc0 	bl	8002d28 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e292      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051b6:	4b60      	ldr	r3, [pc, #384]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0xe8>
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d075      	beq.n	80052be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d2:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051dc:	4b56      	ldr	r3, [pc, #344]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d102      	bne.n	80051f2 <HAL_RCC_OscConfig+0x136>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d002      	beq.n	80051f8 <HAL_RCC_OscConfig+0x13c>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d11f      	bne.n	8005238 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f8:	4b4f      	ldr	r3, [pc, #316]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_OscConfig+0x154>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e265      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b49      	ldr	r3, [pc, #292]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	4946      	ldr	r1, [pc, #280]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005224:	4b45      	ldr	r3, [pc, #276]	; (800533c <HAL_RCC_OscConfig+0x280>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f7fd fd31 	bl	8002c90 <HAL_InitTick>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d043      	beq.n	80052bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e251      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d023      	beq.n	8005288 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005240:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a3c      	ldr	r2, [pc, #240]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fd fd6c 	bl	8002d28 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005254:	f7fd fd68 	bl	8002d28 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e23a      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005266:	4b34      	ldr	r3, [pc, #208]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	492d      	ldr	r1, [pc, #180]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
 8005286:	e01a      	b.n	80052be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005288:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 800528e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fd fd48 	bl	8002d28 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529c:	f7fd fd44 	bl	8002d28 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e216      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052ae:	4b22      	ldr	r3, [pc, #136]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x1e0>
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d041      	beq.n	800534e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01c      	beq.n	800530c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d2:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d8:	4a17      	ldr	r2, [pc, #92]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e2:	f7fd fd21 	bl	8002d28 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ea:	f7fd fd1d 	bl	8002d28 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e1ef      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052fc:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80052fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ef      	beq.n	80052ea <HAL_RCC_OscConfig+0x22e>
 800530a:	e020      	b.n	800534e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 800530e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005312:	4a09      	ldr	r2, [pc, #36]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fd fd04 	bl	8002d28 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005322:	e00d      	b.n	8005340 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005324:	f7fd fd00 	bl	8002d28 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d906      	bls.n	8005340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e1d2      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005340:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ea      	bne.n	8005324 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80a6 	beq.w	80054a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535c:	2300      	movs	r3, #0
 800535e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005360:	4b84      	ldr	r3, [pc, #528]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_OscConfig+0x2b4>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x2b6>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00d      	beq.n	8005392 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005376:	4b7f      	ldr	r3, [pc, #508]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	4a7e      	ldr	r2, [pc, #504]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6593      	str	r3, [r2, #88]	; 0x58
 8005382:	4b7c      	ldr	r3, [pc, #496]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800538e:	2301      	movs	r3, #1
 8005390:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005392:	4b79      	ldr	r3, [pc, #484]	; (8005578 <HAL_RCC_OscConfig+0x4bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d118      	bne.n	80053d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800539e:	4b76      	ldr	r3, [pc, #472]	; (8005578 <HAL_RCC_OscConfig+0x4bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a75      	ldr	r2, [pc, #468]	; (8005578 <HAL_RCC_OscConfig+0x4bc>)
 80053a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053aa:	f7fd fcbd 	bl	8002d28 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b2:	f7fd fcb9 	bl	8002d28 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e18b      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c4:	4b6c      	ldr	r3, [pc, #432]	; (8005578 <HAL_RCC_OscConfig+0x4bc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d108      	bne.n	80053ea <HAL_RCC_OscConfig+0x32e>
 80053d8:	4b66      	ldr	r3, [pc, #408]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	4a65      	ldr	r2, [pc, #404]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053e8:	e024      	b.n	8005434 <HAL_RCC_OscConfig+0x378>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	d110      	bne.n	8005414 <HAL_RCC_OscConfig+0x358>
 80053f2:	4b60      	ldr	r3, [pc, #384]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	4a5e      	ldr	r2, [pc, #376]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80053fa:	f043 0304 	orr.w	r3, r3, #4
 80053fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005402:	4b5c      	ldr	r3, [pc, #368]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	4a5a      	ldr	r2, [pc, #360]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005412:	e00f      	b.n	8005434 <HAL_RCC_OscConfig+0x378>
 8005414:	4b57      	ldr	r3, [pc, #348]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	4a56      	ldr	r2, [pc, #344]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005424:	4b53      	ldr	r3, [pc, #332]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	4a52      	ldr	r2, [pc, #328]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800542c:	f023 0304 	bic.w	r3, r3, #4
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d016      	beq.n	800546a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fd fc74 	bl	8002d28 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005442:	e00a      	b.n	800545a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fd fc70 	bl	8002d28 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e140      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800545a:	4b46      	ldr	r3, [pc, #280]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ed      	beq.n	8005444 <HAL_RCC_OscConfig+0x388>
 8005468:	e015      	b.n	8005496 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546a:	f7fd fc5d 	bl	8002d28 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005470:	e00a      	b.n	8005488 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fd fc59 	bl	8002d28 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e129      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005488:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1ed      	bne.n	8005472 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005496:	7ffb      	ldrb	r3, [r7, #31]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d105      	bne.n	80054a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549c:	4b35      	ldr	r3, [pc, #212]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	4a34      	ldr	r2, [pc, #208]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80054a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d03c      	beq.n	800552e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01c      	beq.n	80054f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054bc:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80054be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c2:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fd fc2c 	bl	8002d28 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054d4:	f7fd fc28 	bl	8002d28 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0fa      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054e6:	4b23      	ldr	r3, [pc, #140]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80054e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ef      	beq.n	80054d4 <HAL_RCC_OscConfig+0x418>
 80054f4:	e01b      	b.n	800552e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054f6:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80054f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005506:	f7fd fc0f 	bl	8002d28 <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800550e:	f7fd fc0b 	bl	8002d28 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e0dd      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1ef      	bne.n	800550e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80d1 	beq.w	80056da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005538:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	2b0c      	cmp	r3, #12
 8005542:	f000 808b 	beq.w	800565c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d15e      	bne.n	800560c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a08      	ldr	r2, [pc, #32]	; (8005574 <HAL_RCC_OscConfig+0x4b8>)
 8005554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fd fbe5 	bl	8002d28 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005560:	e00c      	b.n	800557c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005562:	f7fd fbe1 	bl	8002d28 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d905      	bls.n	800557c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e0b3      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
 8005574:	40021000 	.word	0x40021000
 8005578:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800557c:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ec      	bne.n	8005562 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005588:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	4b56      	ldr	r3, [pc, #344]	; (80056e8 <HAL_RCC_OscConfig+0x62c>)
 800558e:	4013      	ands	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6a11      	ldr	r1, [r2, #32]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005598:	3a01      	subs	r2, #1
 800559a:	0112      	lsls	r2, r2, #4
 800559c:	4311      	orrs	r1, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055a2:	0212      	lsls	r2, r2, #8
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0552      	lsls	r2, r2, #21
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b6:	0852      	lsrs	r2, r2, #1
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0652      	lsls	r2, r2, #25
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055c2:	06d2      	lsls	r2, r2, #27
 80055c4:	430a      	orrs	r2, r1
 80055c6:	4947      	ldr	r1, [pc, #284]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055cc:	4b45      	ldr	r3, [pc, #276]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a44      	ldr	r2, [pc, #272]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055d8:	4b42      	ldr	r3, [pc, #264]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a41      	ldr	r2, [pc, #260]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fd fba0 	bl	8002d28 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fd fb9c 	bl	8002d28 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e06e      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fe:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x530>
 800560a:	e066      	b.n	80056da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560c:	4b35      	ldr	r3, [pc, #212]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 8005612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005616:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005618:	4b32      	ldr	r3, [pc, #200]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a31      	ldr	r2, [pc, #196]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005624:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a2e      	ldr	r2, [pc, #184]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 800562a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800562e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005632:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd fb78 	bl	8002d28 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563c:	f7fd fb74 	bl	8002d28 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e046      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x580>
 800565a:	e03e      	b.n	80056da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e039      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <HAL_RCC_OscConfig+0x628>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0203 	and.w	r2, r3, #3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	429a      	cmp	r2, r3
 800567a:	d12c      	bne.n	80056d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	3b01      	subs	r3, #1
 8005688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d123      	bne.n	80056d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800569a:	429a      	cmp	r2, r3
 800569c:	d11b      	bne.n	80056d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d113      	bne.n	80056d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	3b01      	subs	r3, #1
 80056bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056be:	429a      	cmp	r2, r3
 80056c0:	d109      	bne.n	80056d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	3b01      	subs	r3, #1
 80056d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d001      	beq.n	80056da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000
 80056e8:	019f800c 	.word	0x019f800c

080056ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e11e      	b.n	8005942 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005704:	4b91      	ldr	r3, [pc, #580]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d910      	bls.n	8005734 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005712:	4b8e      	ldr	r3, [pc, #568]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f023 020f 	bic.w	r2, r3, #15
 800571a:	498c      	ldr	r1, [pc, #560]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005722:	4b8a      	ldr	r3, [pc, #552]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e106      	b.n	8005942 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d073      	beq.n	8005828 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d129      	bne.n	800579c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005748:	4b81      	ldr	r3, [pc, #516]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0f4      	b.n	8005942 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005758:	f000 f99e 	bl	8005a98 <RCC_GetSysClockFreqFromPLLSource>
 800575c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4a7c      	ldr	r2, [pc, #496]	; (8005954 <HAL_RCC_ClockConfig+0x268>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d93f      	bls.n	80057e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005766:	4b7a      	ldr	r3, [pc, #488]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800577a:	2b00      	cmp	r3, #0
 800577c:	d033      	beq.n	80057e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005782:	2b00      	cmp	r3, #0
 8005784:	d12f      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005786:	4b72      	ldr	r3, [pc, #456]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578e:	4a70      	ldr	r2, [pc, #448]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005794:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e024      	b.n	80057e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d107      	bne.n	80057b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a4:	4b6a      	ldr	r3, [pc, #424]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0c6      	b.n	8005942 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b4:	4b66      	ldr	r3, [pc, #408]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0be      	b.n	8005942 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057c4:	f000 f8ce 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 80057c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4a61      	ldr	r2, [pc, #388]	; (8005954 <HAL_RCC_ClockConfig+0x268>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d909      	bls.n	80057e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057d2:	4b5f      	ldr	r3, [pc, #380]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057da:	4a5d      	ldr	r2, [pc, #372]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b5a      	ldr	r3, [pc, #360]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4957      	ldr	r1, [pc, #348]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f8:	f7fd fa96 	bl	8002d28 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fd fa92 	bl	8002d28 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e095      	b.n	8005942 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b4e      	ldr	r3, [pc, #312]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d023      	beq.n	800587c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005840:	4b43      	ldr	r3, [pc, #268]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4a42      	ldr	r2, [pc, #264]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800584a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005858:	4b3d      	ldr	r3, [pc, #244]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005860:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005866:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005868:	4b39      	ldr	r3, [pc, #228]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4936      	ldr	r1, [pc, #216]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
 800587a:	e008      	b.n	800588e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d105      	bne.n	800588e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005882:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4a32      	ldr	r2, [pc, #200]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800588c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800588e:	4b2f      	ldr	r3, [pc, #188]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d21d      	bcs.n	80058d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589c:	4b2b      	ldr	r3, [pc, #172]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f023 020f 	bic.w	r2, r3, #15
 80058a4:	4929      	ldr	r1, [pc, #164]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058ac:	f7fd fa3c 	bl	8002d28 <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	e00a      	b.n	80058ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b4:	f7fd fa38 	bl	8002d28 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e03b      	b.n	8005942 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ca:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_RCC_ClockConfig+0x260>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d1ed      	bne.n	80058b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e4:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4917      	ldr	r1, [pc, #92]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	490f      	ldr	r1, [pc, #60]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005916:	f000 f825 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 800591a:	4602      	mov	r2, r0
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <HAL_RCC_ClockConfig+0x264>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	490c      	ldr	r1, [pc, #48]	; (8005958 <HAL_RCC_ClockConfig+0x26c>)
 8005928:	5ccb      	ldrb	r3, [r1, r3]
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	fa22 f303 	lsr.w	r3, r2, r3
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <HAL_RCC_ClockConfig+0x270>)
 8005934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005936:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <HAL_RCC_ClockConfig+0x274>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7fd f9a8 	bl	8002c90 <HAL_InitTick>
 8005940:	4603      	mov	r3, r0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40022000 	.word	0x40022000
 8005950:	40021000 	.word	0x40021000
 8005954:	04c4b400 	.word	0x04c4b400
 8005958:	08009b40 	.word	0x08009b40
 800595c:	20000000 	.word	0x20000000
 8005960:	20000004 	.word	0x20000004

08005964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
 8005972:	2b04      	cmp	r3, #4
 8005974:	d102      	bne.n	800597c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005976:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	e047      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b08      	cmp	r3, #8
 8005986:	d102      	bne.n	800598e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005988:	4b26      	ldr	r3, [pc, #152]	; (8005a24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	e03e      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800598e:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	2b0c      	cmp	r3, #12
 8005998:	d136      	bne.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059a4:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	3301      	adds	r3, #1
 80059b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d10c      	bne.n	80059d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059b8:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c2:	68d2      	ldr	r2, [r2, #12]
 80059c4:	0a12      	lsrs	r2, r2, #8
 80059c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	617b      	str	r3, [r7, #20]
      break;
 80059d0:	e00c      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d2:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059da:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	0a12      	lsrs	r2, r2, #8
 80059e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	617b      	str	r3, [r7, #20]
      break;
 80059ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	0e5b      	lsrs	r3, r3, #25
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	3301      	adds	r3, #1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	e001      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a0c:	693b      	ldr	r3, [r7, #16]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	00f42400 	.word	0x00f42400
 8005a24:	00989680 	.word	0x00989680

08005a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a2c:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000000 	.word	0x20000000

08005a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a44:	f7ff fff0 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	4904      	ldr	r1, [pc, #16]	; (8005a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a56:	5ccb      	ldrb	r3, [r1, r3]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40021000 	.word	0x40021000
 8005a68:	08009b50 	.word	0x08009b50

08005a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a70:	f7ff ffda 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	0adb      	lsrs	r3, r3, #11
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	4904      	ldr	r1, [pc, #16]	; (8005a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40021000 	.word	0x40021000
 8005a94:	08009b50 	.word	0x08009b50

08005a98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d10c      	bne.n	8005ad6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005abc:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ac6:	68d2      	ldr	r2, [r2, #12]
 8005ac8:	0a12      	lsrs	r2, r2, #8
 8005aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	617b      	str	r3, [r7, #20]
    break;
 8005ad4:	e00c      	b.n	8005af0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	4a0e      	ldr	r2, [pc, #56]	; (8005b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae0:	68d2      	ldr	r2, [r2, #12]
 8005ae2:	0a12      	lsrs	r2, r2, #8
 8005ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]
    break;
 8005aee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005af0:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	0e5b      	lsrs	r3, r3, #25
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	3301      	adds	r3, #1
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b0a:	687b      	ldr	r3, [r7, #4]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	00989680 	.word	0x00989680
 8005b20:	00f42400 	.word	0x00f42400

08005b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b30:	2300      	movs	r3, #0
 8005b32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8098 	beq.w	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b42:	2300      	movs	r3, #0
 8005b44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b46:	4b43      	ldr	r3, [pc, #268]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b52:	4b40      	ldr	r3, [pc, #256]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	4a3f      	ldr	r2, [pc, #252]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5e:	4b3d      	ldr	r3, [pc, #244]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b6e:	4b3a      	ldr	r3, [pc, #232]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a39      	ldr	r2, [pc, #228]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b7a:	f7fd f8d5 	bl	8002d28 <HAL_GetTick>
 8005b7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b80:	e009      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b82:	f7fd f8d1 	bl	8002d28 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d902      	bls.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	74fb      	strb	r3, [r7, #19]
        break;
 8005b94:	e005      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b96:	4b30      	ldr	r3, [pc, #192]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ef      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ba2:	7cfb      	ldrb	r3, [r7, #19]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d159      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ba8:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01e      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d019      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bc4:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bd0:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c02:	f7fd f891 	bl	8002d28 <HAL_GetTick>
 8005c06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c08:	e00b      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fd f88d 	bl	8002d28 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d902      	bls.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c20:	e006      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c22:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ec      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	4903      	ldr	r1, [pc, #12]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c4c:	e008      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c4e:	7cfb      	ldrb	r3, [r7, #19]
 8005c50:	74bb      	strb	r3, [r7, #18]
 8005c52:	e005      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c54:	40021000 	.word	0x40021000
 8005c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	7cfb      	ldrb	r3, [r7, #19]
 8005c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c60:	7c7b      	ldrb	r3, [r7, #17]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d105      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c66:	4ba6      	ldr	r3, [pc, #664]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6a:	4aa5      	ldr	r2, [pc, #660]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c7e:	4ba0      	ldr	r3, [pc, #640]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f023 0203 	bic.w	r2, r3, #3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	499c      	ldr	r1, [pc, #624]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca0:	4b97      	ldr	r3, [pc, #604]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f023 020c 	bic.w	r2, r3, #12
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4994      	ldr	r1, [pc, #592]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cc2:	4b8f      	ldr	r3, [pc, #572]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	498b      	ldr	r1, [pc, #556]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ce4:	4b86      	ldr	r3, [pc, #536]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	4983      	ldr	r1, [pc, #524]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d06:	4b7e      	ldr	r3, [pc, #504]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	497a      	ldr	r1, [pc, #488]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d28:	4b75      	ldr	r3, [pc, #468]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	4972      	ldr	r1, [pc, #456]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d4a:	4b6d      	ldr	r3, [pc, #436]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	4969      	ldr	r1, [pc, #420]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d6c:	4b64      	ldr	r3, [pc, #400]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	4961      	ldr	r1, [pc, #388]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d8e:	4b5c      	ldr	r3, [pc, #368]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	4958      	ldr	r1, [pc, #352]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d015      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005db0:	4b53      	ldr	r3, [pc, #332]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	4950      	ldr	r1, [pc, #320]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dce:	d105      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd0:	4b4b      	ldr	r3, [pc, #300]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a4a      	ldr	r2, [pc, #296]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d015      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005de8:	4b45      	ldr	r3, [pc, #276]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4942      	ldr	r1, [pc, #264]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e06:	d105      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e08:	4b3d      	ldr	r3, [pc, #244]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4a3c      	ldr	r2, [pc, #240]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d015      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	4934      	ldr	r1, [pc, #208]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e3e:	d105      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e40:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a2e      	ldr	r2, [pc, #184]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e58:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	4926      	ldr	r1, [pc, #152]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e76:	d105      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e78:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a20      	ldr	r2, [pc, #128]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	4918      	ldr	r1, [pc, #96]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	490a      	ldr	r1, [pc, #40]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee6:	d105      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4a04      	ldr	r2, [pc, #16]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ef4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40021000 	.word	0x40021000

08005f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e09d      	b.n	8006052 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d108      	bne.n	8005f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f26:	d009      	beq.n	8005f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	61da      	str	r2, [r3, #28]
 8005f2e:	e005      	b.n	8005f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fc fbac 	bl	80026b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f7c:	d902      	bls.n	8005f84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e002      	b.n	8005f8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f92:	d007      	beq.n	8005fa4 <HAL_SPI_Init+0xa0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f9c:	d002      	beq.n	8005fa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe6:	ea42 0103 	orr.w	r1, r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	f003 0204 	and.w	r2, r3, #4
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006020:	ea42 0103 	orr.w	r1, r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006040:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d110      	bne.n	8006098 <HAL_SPI_Receive_DMA+0x3c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607e:	d10b      	bne.n	8006098 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2204      	movs	r2, #4
 8006084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f908 	bl	80062a4 <HAL_SPI_TransmitReceive_DMA>
 8006094:	4603      	mov	r3, r0
 8006096:	e0fb      	b.n	8006290 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_SPI_Receive_DMA+0x4a>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0f4      	b.n	8006290 <HAL_SPI_Receive_DMA+0x234>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
 80060bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060be:	e0e2      	b.n	8006286 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Receive_DMA+0x70>
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d0:	e0d9      	b.n	8006286 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2204      	movs	r2, #4
 80060d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	88fa      	ldrh	r2, [r7, #6]
 80060f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006116:	d10f      	bne.n	8006138 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006136:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006146:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006150:	d908      	bls.n	8006164 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	e042      	b.n	80061ea <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006172:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d134      	bne.n	80061ea <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800618e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006196:	b29b      	uxth	r3, r3
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d111      	bne.n	80061c4 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80061c2:	e012      	b.n	80061ea <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061da:	b29b      	uxth	r3, r3
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3301      	adds	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <HAL_SPI_Receive_DMA+0x23c>)
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f6:	4a29      	ldr	r2, [pc, #164]	; (800629c <HAL_SPI_Receive_DMA+0x240>)
 80061f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fe:	4a28      	ldr	r2, [pc, #160]	; (80062a0 <HAL_SPI_Receive_DMA+0x244>)
 8006200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	2200      	movs	r2, #0
 8006208:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	4619      	mov	r1, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006222:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006224:	f7fe fa86 	bl	8004734 <HAL_DMA_Start_IT>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006232:	f043 0210 	orr.w	r2, r3, #16
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006246:	e01e      	b.n	8006286 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d007      	beq.n	8006266 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006264:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0220 	orr.w	r2, r2, #32
 8006274:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0201 	orr.w	r2, r2, #1
 8006284:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	08006745 	.word	0x08006745
 800629c:	0800660d 	.word	0x0800660d
 80062a0:	0800677d 	.word	0x0800677d

080062a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e16c      	b.n	800659e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80062da:	7dbb      	ldrb	r3, [r7, #22]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d00d      	beq.n	80062fc <HAL_SPI_TransmitReceive_DMA+0x58>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e6:	d106      	bne.n	80062f6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d102      	bne.n	80062f6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80062f0:	7dbb      	ldrb	r3, [r7, #22]
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d002      	beq.n	80062fc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
 80062f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062fa:	e14b      	b.n	8006594 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006308:	887b      	ldrh	r3, [r7, #2]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006312:	e13f      	b.n	8006594 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b04      	cmp	r3, #4
 800631e:	d003      	beq.n	8006328 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2205      	movs	r2, #5
 8006324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	887a      	ldrh	r2, [r7, #2]
 8006338:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	887a      	ldrh	r2, [r7, #2]
 800633e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	887a      	ldrh	r2, [r7, #2]
 800634a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	887a      	ldrh	r2, [r7, #2]
 8006352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006370:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800637a:	d908      	bls.n	800638e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800638a:	605a      	str	r2, [r3, #4]
 800638c:	e06f      	b.n	800646e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800639c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a8:	d126      	bne.n	80063f8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10f      	bne.n	80063d6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063c4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063d4:	e010      	b.n	80063f8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006402:	d134      	bne.n	800646e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006412:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641a:	b29b      	uxth	r3, r3
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d111      	bne.n	8006448 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006432:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800643a:	b29b      	uxth	r3, r3
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006446:	e012      	b.n	800646e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006456:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800645e:	b29b      	uxth	r3, r3
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	b29b      	uxth	r3, r3
 8006464:	3301      	adds	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b04      	cmp	r3, #4
 8006478:	d108      	bne.n	800648c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	4a4a      	ldr	r2, [pc, #296]	; (80065a8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006480:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	4a49      	ldr	r2, [pc, #292]	; (80065ac <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006488:	62da      	str	r2, [r3, #44]	; 0x2c
 800648a:	e007      	b.n	800649c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006490:	4a47      	ldr	r2, [pc, #284]	; (80065b0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006498:	4a46      	ldr	r2, [pc, #280]	; (80065b4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800649a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a0:	4a45      	ldr	r2, [pc, #276]	; (80065b8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80064a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	2200      	movs	r2, #0
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	4619      	mov	r1, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80064c6:	f7fe f935 	bl	8004734 <HAL_DMA_Start_IT>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d4:	f043 0210 	orr.w	r2, r3, #16
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80064e8:	e054      	b.n	8006594 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	2200      	movs	r2, #0
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006506:	2200      	movs	r2, #0
 8006508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650e:	2200      	movs	r2, #0
 8006510:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	2200      	movs	r2, #0
 8006518:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	4619      	mov	r1, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006530:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006532:	f7fe f8ff 	bl	8004734 <HAL_DMA_Start_IT>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006540:	f043 0210 	orr.w	r2, r3, #16
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006554:	e01e      	b.n	8006594 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d007      	beq.n	8006574 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0220 	orr.w	r2, r2, #32
 8006582:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0202 	orr.w	r2, r2, #2
 8006592:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800659c:	7dfb      	ldrb	r3, [r7, #23]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	08006745 	.word	0x08006745
 80065ac:	0800660d 	.word	0x0800660d
 80065b0:	08006761 	.word	0x08006761
 80065b4:	080066b5 	.word	0x080066b5
 80065b8:	0800677d 	.word	0x0800677d

080065bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800661a:	f7fc fb85 	bl	8002d28 <HAL_GetTick>
 800661e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b20      	cmp	r3, #32
 800662c:	d03c      	beq.n	80066a8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0220 	bic.w	r2, r2, #32
 800663c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10d      	bne.n	8006662 <SPI_DMAReceiveCplt+0x56>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800664e:	d108      	bne.n	8006662 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0203 	bic.w	r2, r2, #3
 800665e:	605a      	str	r2, [r3, #4]
 8006660:	e007      	b.n	8006672 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	2164      	movs	r1, #100	; 0x64
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f9be 	bl	80069f8 <SPI_EndRxTransaction>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ffa9 	bl	80065f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80066a6:	e002      	b.n	80066ae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f003 f8cf 	bl	800984c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c2:	f7fc fb31 	bl	8002d28 <HAL_GetTick>
 80066c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d030      	beq.n	8006738 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0220 	bic.w	r2, r2, #32
 80066e4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	2164      	movs	r1, #100	; 0x64
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f9dc 	bl	8006aa8 <SPI_EndRxTxTransaction>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0203 	bic.w	r2, r2, #3
 8006710:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff61 	bl	80065f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006736:	e002      	b.n	800673e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff ff3f 	bl	80065bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff3c 	bl	80065d0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff ff38 	bl	80065e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0203 	bic.w	r2, r2, #3
 8006798:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679e:	f043 0210 	orr.w	r2, r3, #16
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff ff22 	bl	80065f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4613      	mov	r3, r2
 80067ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067cc:	f7fc faac 	bl	8002d28 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	4413      	add	r3, r2
 80067da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067dc:	f7fc faa4 	bl	8002d28 <HAL_GetTick>
 80067e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067e2:	4b39      	ldr	r3, [pc, #228]	; (80068c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	015b      	lsls	r3, r3, #5
 80067e8:	0d1b      	lsrs	r3, r3, #20
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067f2:	e054      	b.n	800689e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d050      	beq.n	800689e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067fc:	f7fc fa94 	bl	8002d28 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	429a      	cmp	r2, r3
 800680a:	d902      	bls.n	8006812 <SPI_WaitFlagStateUntilTimeout+0x56>
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d13d      	bne.n	800688e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800682a:	d111      	bne.n	8006850 <SPI_WaitFlagStateUntilTimeout+0x94>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006834:	d004      	beq.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683e:	d107      	bne.n	8006850 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006858:	d10f      	bne.n	800687a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e017      	b.n	80068be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	3b01      	subs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4013      	ands	r3, r2
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	bf0c      	ite	eq
 80068ae:	2301      	moveq	r3, #1
 80068b0:	2300      	movne	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d19b      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000000 	.word	0x20000000

080068cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068de:	f7fc fa23 	bl	8002d28 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	1a9b      	subs	r3, r3, r2
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	4413      	add	r3, r2
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068ee:	f7fc fa1b 	bl	8002d28 <HAL_GetTick>
 80068f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068fc:	4b3d      	ldr	r3, [pc, #244]	; (80069f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	00da      	lsls	r2, r3, #3
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	0d1b      	lsrs	r3, r3, #20
 800690c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690e:	fb02 f303 	mul.w	r3, r2, r3
 8006912:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006914:	e060      	b.n	80069d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800691c:	d107      	bne.n	800692e <SPI_WaitFifoStateUntilTimeout+0x62>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800692c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d050      	beq.n	80069d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006936:	f7fc f9f7 	bl	8002d28 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	429a      	cmp	r2, r3
 8006944:	d902      	bls.n	800694c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d13d      	bne.n	80069c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800695a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006964:	d111      	bne.n	800698a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696e:	d004      	beq.n	800697a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006978:	d107      	bne.n	800698a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006988:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006992:	d10f      	bne.n	80069b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e010      	b.n	80069ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4013      	ands	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d196      	bne.n	8006916 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3728      	adds	r7, #40	; 0x28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000000 	.word	0x20000000

080069f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0c:	d111      	bne.n	8006a32 <SPI_EndRxTransaction+0x3a>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a16:	d004      	beq.n	8006a22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a20:	d107      	bne.n	8006a32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2180      	movs	r1, #128	; 0x80
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7ff febd 	bl	80067bc <SPI_WaitFlagStateUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4c:	f043 0220 	orr.w	r2, r3, #32
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e023      	b.n	8006aa0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a60:	d11d      	bne.n	8006a9e <SPI_EndRxTransaction+0xa6>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6a:	d004      	beq.n	8006a76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a74:	d113      	bne.n	8006a9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f7ff ff22 	bl	80068cc <SPI_WaitFifoStateUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e000      	b.n	8006aa0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7ff ff03 	bl	80068cc <SPI_WaitFifoStateUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad0:	f043 0220 	orr.w	r2, r3, #32
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e027      	b.n	8006b2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff fe68 	bl	80067bc <SPI_WaitFlagStateUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af6:	f043 0220 	orr.w	r2, r3, #32
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e014      	b.n	8006b2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff fedc 	bl	80068cc <SPI_WaitFifoStateUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	f043 0220 	orr.w	r2, r3, #32
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e000      	b.n	8006b2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e049      	b.n	8006bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fb fe1a 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4610      	mov	r0, r2
 8006b74:	f001 f832 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d001      	beq.n	8006bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e04a      	b.n	8006c92 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a21      	ldr	r2, [pc, #132]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x6c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c26:	d013      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x6c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x6c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a1c      	ldr	r2, [pc, #112]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x6c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1a      	ldr	r2, [pc, #104]	; (8006cac <HAL_TIM_Base_Start_IT+0xc8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x6c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a19      	ldr	r2, [pc, #100]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d115      	bne.n	8006c7c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	4b17      	ldr	r3, [pc, #92]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b06      	cmp	r3, #6
 8006c60:	d015      	beq.n	8006c8e <HAL_TIM_Base_Start_IT+0xaa>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c68:	d011      	beq.n	8006c8e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7a:	e008      	b.n	8006c8e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e000      	b.n	8006c90 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40013400 	.word	0x40013400
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	00010007 	.word	0x00010007

08006cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e049      	b.n	8006d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f841 	bl	8006d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f000 ff70 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <HAL_TIM_PWM_Start+0x24>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	bf14      	ite	ne
 8006d98:	2301      	movne	r3, #1
 8006d9a:	2300      	moveq	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	e03c      	b.n	8006e1a <HAL_TIM_PWM_Start+0x9e>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d109      	bne.n	8006dba <HAL_TIM_PWM_Start+0x3e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	bf14      	ite	ne
 8006db2:	2301      	movne	r3, #1
 8006db4:	2300      	moveq	r3, #0
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	e02f      	b.n	8006e1a <HAL_TIM_PWM_Start+0x9e>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d109      	bne.n	8006dd4 <HAL_TIM_PWM_Start+0x58>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	bf14      	ite	ne
 8006dcc:	2301      	movne	r3, #1
 8006dce:	2300      	moveq	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	e022      	b.n	8006e1a <HAL_TIM_PWM_Start+0x9e>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b0c      	cmp	r3, #12
 8006dd8:	d109      	bne.n	8006dee <HAL_TIM_PWM_Start+0x72>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	bf14      	ite	ne
 8006de6:	2301      	movne	r3, #1
 8006de8:	2300      	moveq	r3, #0
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	e015      	b.n	8006e1a <HAL_TIM_PWM_Start+0x9e>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d109      	bne.n	8006e08 <HAL_TIM_PWM_Start+0x8c>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	bf14      	ite	ne
 8006e00:	2301      	movne	r3, #1
 8006e02:	2300      	moveq	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	e008      	b.n	8006e1a <HAL_TIM_PWM_Start+0x9e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	bf14      	ite	ne
 8006e14:	2301      	movne	r3, #1
 8006e16:	2300      	moveq	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e097      	b.n	8006f52 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_PWM_Start+0xb6>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e30:	e023      	b.n	8006e7a <HAL_TIM_PWM_Start+0xfe>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_PWM_Start+0xc6>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e40:	e01b      	b.n	8006e7a <HAL_TIM_PWM_Start+0xfe>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_PWM_Start+0xd6>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e50:	e013      	b.n	8006e7a <HAL_TIM_PWM_Start+0xfe>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_PWM_Start+0xe6>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e60:	e00b      	b.n	8006e7a <HAL_TIM_PWM_Start+0xfe>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d104      	bne.n	8006e72 <HAL_TIM_PWM_Start+0xf6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e70:	e003      	b.n	8006e7a <HAL_TIM_PWM_Start+0xfe>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fbea 	bl	800865c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a33      	ldr	r2, [pc, #204]	; (8006f5c <HAL_TIM_PWM_Start+0x1e0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_TIM_PWM_Start+0x13e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a32      	ldr	r2, [pc, #200]	; (8006f60 <HAL_TIM_PWM_Start+0x1e4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIM_PWM_Start+0x13e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a30      	ldr	r2, [pc, #192]	; (8006f64 <HAL_TIM_PWM_Start+0x1e8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIM_PWM_Start+0x13e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a2f      	ldr	r2, [pc, #188]	; (8006f68 <HAL_TIM_PWM_Start+0x1ec>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIM_PWM_Start+0x13e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_TIM_PWM_Start+0x1f0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_PWM_Start+0x142>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <HAL_TIM_PWM_Start+0x144>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a20      	ldr	r2, [pc, #128]	; (8006f5c <HAL_TIM_PWM_Start+0x1e0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d018      	beq.n	8006f10 <HAL_TIM_PWM_Start+0x194>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee6:	d013      	beq.n	8006f10 <HAL_TIM_PWM_Start+0x194>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a20      	ldr	r2, [pc, #128]	; (8006f70 <HAL_TIM_PWM_Start+0x1f4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00e      	beq.n	8006f10 <HAL_TIM_PWM_Start+0x194>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1f      	ldr	r2, [pc, #124]	; (8006f74 <HAL_TIM_PWM_Start+0x1f8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d009      	beq.n	8006f10 <HAL_TIM_PWM_Start+0x194>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a17      	ldr	r2, [pc, #92]	; (8006f60 <HAL_TIM_PWM_Start+0x1e4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <HAL_TIM_PWM_Start+0x194>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a16      	ldr	r2, [pc, #88]	; (8006f64 <HAL_TIM_PWM_Start+0x1e8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d115      	bne.n	8006f3c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <HAL_TIM_PWM_Start+0x1fc>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b06      	cmp	r3, #6
 8006f20:	d015      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x1d2>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f28:	d011      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0201 	orr.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3a:	e008      	b.n	8006f4e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0201 	orr.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e000      	b.n	8006f50 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40013400 	.word	0x40013400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	00010007 	.word	0x00010007

08006f7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e049      	b.n	8007022 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f841 	bl	800702a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f000 fe0e 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_TIM_IC_Start_IT+0x1e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800705a:	b2db      	uxtb	r3, r3
 800705c:	e023      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x66>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d104      	bne.n	800706e <HAL_TIM_IC_Start_IT+0x2e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800706a:	b2db      	uxtb	r3, r3
 800706c:	e01b      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x66>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d104      	bne.n	800707e <HAL_TIM_IC_Start_IT+0x3e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800707a:	b2db      	uxtb	r3, r3
 800707c:	e013      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x66>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b0c      	cmp	r3, #12
 8007082:	d104      	bne.n	800708e <HAL_TIM_IC_Start_IT+0x4e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800708a:	b2db      	uxtb	r3, r3
 800708c:	e00b      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x66>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b10      	cmp	r3, #16
 8007092:	d104      	bne.n	800709e <HAL_TIM_IC_Start_IT+0x5e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800709a:	b2db      	uxtb	r3, r3
 800709c:	e003      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x66>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <HAL_TIM_IC_Start_IT+0x78>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	e013      	b.n	80070e0 <HAL_TIM_IC_Start_IT+0xa0>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d104      	bne.n	80070c8 <HAL_TIM_IC_Start_IT+0x88>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	e00b      	b.n	80070e0 <HAL_TIM_IC_Start_IT+0xa0>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d104      	bne.n	80070d8 <HAL_TIM_IC_Start_IT+0x98>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	e003      	b.n	80070e0 <HAL_TIM_IC_Start_IT+0xa0>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d102      	bne.n	80070ee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80070e8:	7b7b      	ldrb	r3, [r7, #13]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d001      	beq.n	80070f2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e0d8      	b.n	80072a4 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <HAL_TIM_IC_Start_IT+0xc2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007100:	e023      	b.n	800714a <HAL_TIM_IC_Start_IT+0x10a>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b04      	cmp	r3, #4
 8007106:	d104      	bne.n	8007112 <HAL_TIM_IC_Start_IT+0xd2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007110:	e01b      	b.n	800714a <HAL_TIM_IC_Start_IT+0x10a>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b08      	cmp	r3, #8
 8007116:	d104      	bne.n	8007122 <HAL_TIM_IC_Start_IT+0xe2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007120:	e013      	b.n	800714a <HAL_TIM_IC_Start_IT+0x10a>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d104      	bne.n	8007132 <HAL_TIM_IC_Start_IT+0xf2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007130:	e00b      	b.n	800714a <HAL_TIM_IC_Start_IT+0x10a>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b10      	cmp	r3, #16
 8007136:	d104      	bne.n	8007142 <HAL_TIM_IC_Start_IT+0x102>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007140:	e003      	b.n	800714a <HAL_TIM_IC_Start_IT+0x10a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <HAL_TIM_IC_Start_IT+0x11a>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007158:	e013      	b.n	8007182 <HAL_TIM_IC_Start_IT+0x142>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b04      	cmp	r3, #4
 800715e:	d104      	bne.n	800716a <HAL_TIM_IC_Start_IT+0x12a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007168:	e00b      	b.n	8007182 <HAL_TIM_IC_Start_IT+0x142>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b08      	cmp	r3, #8
 800716e:	d104      	bne.n	800717a <HAL_TIM_IC_Start_IT+0x13a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007178:	e003      	b.n	8007182 <HAL_TIM_IC_Start_IT+0x142>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2202      	movs	r2, #2
 800717e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b0c      	cmp	r3, #12
 8007186:	d841      	bhi.n	800720c <HAL_TIM_IC_Start_IT+0x1cc>
 8007188:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <HAL_TIM_IC_Start_IT+0x150>)
 800718a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718e:	bf00      	nop
 8007190:	080071c5 	.word	0x080071c5
 8007194:	0800720d 	.word	0x0800720d
 8007198:	0800720d 	.word	0x0800720d
 800719c:	0800720d 	.word	0x0800720d
 80071a0:	080071d7 	.word	0x080071d7
 80071a4:	0800720d 	.word	0x0800720d
 80071a8:	0800720d 	.word	0x0800720d
 80071ac:	0800720d 	.word	0x0800720d
 80071b0:	080071e9 	.word	0x080071e9
 80071b4:	0800720d 	.word	0x0800720d
 80071b8:	0800720d 	.word	0x0800720d
 80071bc:	0800720d 	.word	0x0800720d
 80071c0:	080071fb 	.word	0x080071fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0202 	orr.w	r2, r2, #2
 80071d2:	60da      	str	r2, [r3, #12]
      break;
 80071d4:	e01d      	b.n	8007212 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0204 	orr.w	r2, r2, #4
 80071e4:	60da      	str	r2, [r3, #12]
      break;
 80071e6:	e014      	b.n	8007212 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0208 	orr.w	r2, r2, #8
 80071f6:	60da      	str	r2, [r3, #12]
      break;
 80071f8:	e00b      	b.n	8007212 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0210 	orr.w	r2, r2, #16
 8007208:	60da      	str	r2, [r3, #12]
      break;
 800720a:	e002      	b.n	8007212 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	bf00      	nop
  }

  if (status == HAL_OK)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d144      	bne.n	80072a2 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2201      	movs	r2, #1
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fa1b 	bl	800865c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a20      	ldr	r2, [pc, #128]	; (80072ac <HAL_TIM_IC_Start_IT+0x26c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d018      	beq.n	8007262 <HAL_TIM_IC_Start_IT+0x222>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007238:	d013      	beq.n	8007262 <HAL_TIM_IC_Start_IT+0x222>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1c      	ldr	r2, [pc, #112]	; (80072b0 <HAL_TIM_IC_Start_IT+0x270>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00e      	beq.n	8007262 <HAL_TIM_IC_Start_IT+0x222>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1a      	ldr	r2, [pc, #104]	; (80072b4 <HAL_TIM_IC_Start_IT+0x274>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d009      	beq.n	8007262 <HAL_TIM_IC_Start_IT+0x222>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a19      	ldr	r2, [pc, #100]	; (80072b8 <HAL_TIM_IC_Start_IT+0x278>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <HAL_TIM_IC_Start_IT+0x222>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a17      	ldr	r2, [pc, #92]	; (80072bc <HAL_TIM_IC_Start_IT+0x27c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d115      	bne.n	800728e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <HAL_TIM_IC_Start_IT+0x280>)
 800726a:	4013      	ands	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b06      	cmp	r3, #6
 8007272:	d015      	beq.n	80072a0 <HAL_TIM_IC_Start_IT+0x260>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800727a:	d011      	beq.n	80072a0 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728c:	e008      	b.n	80072a0 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e000      	b.n	80072a2 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40013400 	.word	0x40013400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	00010007 	.word	0x00010007

080072c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d122      	bne.n	8007320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d11b      	bne.n	8007320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0202 	mvn.w	r2, #2
 80072f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fa fe4a 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc46 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc4d 	bl	8007bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b04      	cmp	r3, #4
 800732c:	d122      	bne.n	8007374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b04      	cmp	r3, #4
 800733a:	d11b      	bne.n	8007374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0204 	mvn.w	r2, #4
 8007344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fa fe20 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fc1c 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fc23 	bl	8007bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b08      	cmp	r3, #8
 8007380:	d122      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b08      	cmp	r3, #8
 800738e:	d11b      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0208 	mvn.w	r2, #8
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2204      	movs	r2, #4
 800739e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fa fdf6 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 80073b4:	e005      	b.n	80073c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fbf2 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fbf9 	bl	8007bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d122      	bne.n	800741c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d11b      	bne.n	800741c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0210 	mvn.w	r2, #16
 80073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2208      	movs	r2, #8
 80073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fa fdcc 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fbc8 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fbcf 	bl	8007bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b01      	cmp	r3, #1
 8007428:	d10e      	bne.n	8007448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d107      	bne.n	8007448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0201 	mvn.w	r2, #1
 8007440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fa fb86 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	d10e      	bne.n	8007474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d107      	bne.n	8007474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800746c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fafa 	bl	8008a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007482:	d10e      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d107      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 faed 	bl	8008a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d10e      	bne.n	80074ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d107      	bne.n	80074ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fb7d 	bl	8007bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d10e      	bne.n	80074fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d107      	bne.n	80074fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f06f 0220 	mvn.w	r2, #32
 80074f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 faad 	bl	8008a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007508:	d10f      	bne.n	800752a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007518:	d107      	bne.n	800752a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 fab3 	bl	8008a90 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007538:	d10f      	bne.n	800755a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007548:	d107      	bne.n	800755a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 faa5 	bl	8008aa4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007568:	d10f      	bne.n	800758a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007578:	d107      	bne.n	800758a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fa97 	bl	8008ab8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007598:	d10f      	bne.n	80075ba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075a8:	d107      	bne.n	80075ba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80075b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fa89 	bl	8008acc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80075dc:	2302      	movs	r3, #2
 80075de:	e088      	b.n	80076f2 <HAL_TIM_IC_ConfigChannel+0x130>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d11b      	bne.n	8007626 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6819      	ldr	r1, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f000 fe73 	bl	80082e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 020c 	bic.w	r2, r2, #12
 8007610:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6999      	ldr	r1, [r3, #24]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	619a      	str	r2, [r3, #24]
 8007624:	e060      	b.n	80076e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b04      	cmp	r3, #4
 800762a:	d11c      	bne.n	8007666 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6819      	ldr	r1, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f000 feeb 	bl	8008416 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699a      	ldr	r2, [r3, #24]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800764e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6999      	ldr	r1, [r3, #24]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	021a      	lsls	r2, r3, #8
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	619a      	str	r2, [r3, #24]
 8007664:	e040      	b.n	80076e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b08      	cmp	r3, #8
 800766a:	d11b      	bne.n	80076a4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f000 ff38 	bl	80084f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69da      	ldr	r2, [r3, #28]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 020c 	bic.w	r2, r2, #12
 800768e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69d9      	ldr	r1, [r3, #28]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	61da      	str	r2, [r3, #28]
 80076a2:	e021      	b.n	80076e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b0c      	cmp	r3, #12
 80076a8:	d11c      	bne.n	80076e4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6819      	ldr	r1, [r3, #0]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f000 ff55 	bl	8008568 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69d9      	ldr	r1, [r3, #28]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	021a      	lsls	r2, r3, #8
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	61da      	str	r2, [r3, #28]
 80076e2:	e001      	b.n	80076e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007716:	2302      	movs	r3, #2
 8007718:	e0ff      	b.n	800791a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b14      	cmp	r3, #20
 8007726:	f200 80f0 	bhi.w	800790a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007785 	.word	0x08007785
 8007734:	0800790b 	.word	0x0800790b
 8007738:	0800790b 	.word	0x0800790b
 800773c:	0800790b 	.word	0x0800790b
 8007740:	080077c5 	.word	0x080077c5
 8007744:	0800790b 	.word	0x0800790b
 8007748:	0800790b 	.word	0x0800790b
 800774c:	0800790b 	.word	0x0800790b
 8007750:	08007807 	.word	0x08007807
 8007754:	0800790b 	.word	0x0800790b
 8007758:	0800790b 	.word	0x0800790b
 800775c:	0800790b 	.word	0x0800790b
 8007760:	08007847 	.word	0x08007847
 8007764:	0800790b 	.word	0x0800790b
 8007768:	0800790b 	.word	0x0800790b
 800776c:	0800790b 	.word	0x0800790b
 8007770:	08007889 	.word	0x08007889
 8007774:	0800790b 	.word	0x0800790b
 8007778:	0800790b 	.word	0x0800790b
 800777c:	0800790b 	.word	0x0800790b
 8007780:	080078c9 	.word	0x080078c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fab6 	bl	8007cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0208 	orr.w	r2, r2, #8
 800779e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0204 	bic.w	r2, r2, #4
 80077ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6999      	ldr	r1, [r3, #24]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	619a      	str	r2, [r3, #24]
      break;
 80077c2:	e0a5      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fb26 	bl	8007e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6999      	ldr	r1, [r3, #24]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	021a      	lsls	r2, r3, #8
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	619a      	str	r2, [r3, #24]
      break;
 8007804:	e084      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fb8f 	bl	8007f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0208 	orr.w	r2, r2, #8
 8007820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69da      	ldr	r2, [r3, #28]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0204 	bic.w	r2, r2, #4
 8007830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69d9      	ldr	r1, [r3, #28]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	61da      	str	r2, [r3, #28]
      break;
 8007844:	e064      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fbf7 	bl	8008040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69d9      	ldr	r1, [r3, #28]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	021a      	lsls	r2, r3, #8
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	61da      	str	r2, [r3, #28]
      break;
 8007886:	e043      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fc60 	bl	8008154 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0208 	orr.w	r2, r2, #8
 80078a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0204 	bic.w	r2, r2, #4
 80078b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80078c6:	e023      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fca4 	bl	800821c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	021a      	lsls	r2, r3, #8
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007908:	e002      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
      break;
 800790e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop

08007924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIM_ConfigClockSource+0x1c>
 800793c:	2302      	movs	r3, #2
 800793e:	e0de      	b.n	8007afe <HAL_TIM_ConfigClockSource+0x1da>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800795e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800796a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a63      	ldr	r2, [pc, #396]	; (8007b08 <HAL_TIM_ConfigClockSource+0x1e4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	f000 80a9 	beq.w	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007980:	4a61      	ldr	r2, [pc, #388]	; (8007b08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	f200 80ae 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007988:	4a60      	ldr	r2, [pc, #384]	; (8007b0c <HAL_TIM_ConfigClockSource+0x1e8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	f000 80a1 	beq.w	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007990:	4a5e      	ldr	r2, [pc, #376]	; (8007b0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	f200 80a6 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007998:	4a5d      	ldr	r2, [pc, #372]	; (8007b10 <HAL_TIM_ConfigClockSource+0x1ec>)
 800799a:	4293      	cmp	r3, r2
 800799c:	f000 8099 	beq.w	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 80079a0:	4a5b      	ldr	r2, [pc, #364]	; (8007b10 <HAL_TIM_ConfigClockSource+0x1ec>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	f200 809e 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079a8:	4a5a      	ldr	r2, [pc, #360]	; (8007b14 <HAL_TIM_ConfigClockSource+0x1f0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	f000 8091 	beq.w	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 80079b0:	4a58      	ldr	r2, [pc, #352]	; (8007b14 <HAL_TIM_ConfigClockSource+0x1f0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	f200 8096 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079bc:	f000 8089 	beq.w	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 80079c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079c4:	f200 808e 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079cc:	d03e      	beq.n	8007a4c <HAL_TIM_ConfigClockSource+0x128>
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d2:	f200 8087 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079da:	f000 8086 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x1c6>
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d87f      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079e4:	2b70      	cmp	r3, #112	; 0x70
 80079e6:	d01a      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0xfa>
 80079e8:	2b70      	cmp	r3, #112	; 0x70
 80079ea:	d87b      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079ec:	2b60      	cmp	r3, #96	; 0x60
 80079ee:	d050      	beq.n	8007a92 <HAL_TIM_ConfigClockSource+0x16e>
 80079f0:	2b60      	cmp	r3, #96	; 0x60
 80079f2:	d877      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079f4:	2b50      	cmp	r3, #80	; 0x50
 80079f6:	d03c      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0x14e>
 80079f8:	2b50      	cmp	r3, #80	; 0x50
 80079fa:	d873      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d058      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x18e>
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d86f      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007a04:	2b30      	cmp	r3, #48	; 0x30
 8007a06:	d064      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007a08:	2b30      	cmp	r3, #48	; 0x30
 8007a0a:	d86b      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d060      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d867      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d05c      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007a18:	2b10      	cmp	r3, #16
 8007a1a:	d05a      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007a1c:	e062      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6899      	ldr	r1, [r3, #8]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f000 fdf5 	bl	800861c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	609a      	str	r2, [r3, #8]
      break;
 8007a4a:	e04f      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	6899      	ldr	r1, [r3, #8]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f000 fdde 	bl	800861c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a6e:	609a      	str	r2, [r3, #8]
      break;
 8007a70:	e03c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6818      	ldr	r0, [r3, #0]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	6859      	ldr	r1, [r3, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f000 fc9a 	bl	80083b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2150      	movs	r1, #80	; 0x50
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fda9 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007a90:	e02c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6859      	ldr	r1, [r3, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f000 fcf6 	bl	8008490 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2160      	movs	r1, #96	; 0x60
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fd99 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007ab0:	e01c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f000 fc7a 	bl	80083b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2140      	movs	r1, #64	; 0x40
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fd89 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007ad0:	e00c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f000 fd80 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007ae2:	e003      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	00100070 	.word	0x00100070
 8007b0c:	00100040 	.word	0x00100040
 8007b10:	00100030 	.word	0x00100030
 8007b14:	00100020 	.word	0x00100020

08007b18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b0c      	cmp	r3, #12
 8007b2a:	d831      	bhi.n	8007b90 <HAL_TIM_ReadCapturedValue+0x78>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b69 	.word	0x08007b69
 8007b38:	08007b91 	.word	0x08007b91
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007b91 	.word	0x08007b91
 8007b44:	08007b73 	.word	0x08007b73
 8007b48:	08007b91 	.word	0x08007b91
 8007b4c:	08007b91 	.word	0x08007b91
 8007b50:	08007b91 	.word	0x08007b91
 8007b54:	08007b7d 	.word	0x08007b7d
 8007b58:	08007b91 	.word	0x08007b91
 8007b5c:	08007b91 	.word	0x08007b91
 8007b60:	08007b91 	.word	0x08007b91
 8007b64:	08007b87 	.word	0x08007b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	60fb      	str	r3, [r7, #12]

      break;
 8007b70:	e00f      	b.n	8007b92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b78:	60fb      	str	r3, [r7, #12]

      break;
 8007b7a:	e00a      	b.n	8007b92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	60fb      	str	r3, [r7, #12]

      break;
 8007b84:	e005      	b.n	8007b92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	60fb      	str	r3, [r7, #12]

      break;
 8007b8e:	e000      	b.n	8007b92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007b90:	bf00      	nop
  }

  return tmpreg;
 8007b92:	68fb      	ldr	r3, [r7, #12]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a3c      	ldr	r2, [pc, #240]	; (8007ce0 <TIM_Base_SetConfig+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d00f      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfa:	d00b      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a39      	ldr	r2, [pc, #228]	; (8007ce4 <TIM_Base_SetConfig+0x108>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d007      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a38      	ldr	r2, [pc, #224]	; (8007ce8 <TIM_Base_SetConfig+0x10c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d003      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a37      	ldr	r2, [pc, #220]	; (8007cec <TIM_Base_SetConfig+0x110>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d108      	bne.n	8007c26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2d      	ldr	r2, [pc, #180]	; (8007ce0 <TIM_Base_SetConfig+0x104>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01b      	beq.n	8007c66 <TIM_Base_SetConfig+0x8a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c34:	d017      	beq.n	8007c66 <TIM_Base_SetConfig+0x8a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <TIM_Base_SetConfig+0x108>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <TIM_Base_SetConfig+0x8a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a29      	ldr	r2, [pc, #164]	; (8007ce8 <TIM_Base_SetConfig+0x10c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00f      	beq.n	8007c66 <TIM_Base_SetConfig+0x8a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a28      	ldr	r2, [pc, #160]	; (8007cec <TIM_Base_SetConfig+0x110>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00b      	beq.n	8007c66 <TIM_Base_SetConfig+0x8a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a27      	ldr	r2, [pc, #156]	; (8007cf0 <TIM_Base_SetConfig+0x114>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d007      	beq.n	8007c66 <TIM_Base_SetConfig+0x8a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a26      	ldr	r2, [pc, #152]	; (8007cf4 <TIM_Base_SetConfig+0x118>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_Base_SetConfig+0x8a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a25      	ldr	r2, [pc, #148]	; (8007cf8 <TIM_Base_SetConfig+0x11c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d108      	bne.n	8007c78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a10      	ldr	r2, [pc, #64]	; (8007ce0 <TIM_Base_SetConfig+0x104>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00f      	beq.n	8007cc4 <TIM_Base_SetConfig+0xe8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a11      	ldr	r2, [pc, #68]	; (8007cec <TIM_Base_SetConfig+0x110>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00b      	beq.n	8007cc4 <TIM_Base_SetConfig+0xe8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a10      	ldr	r2, [pc, #64]	; (8007cf0 <TIM_Base_SetConfig+0x114>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d007      	beq.n	8007cc4 <TIM_Base_SetConfig+0xe8>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a0f      	ldr	r2, [pc, #60]	; (8007cf4 <TIM_Base_SetConfig+0x118>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d003      	beq.n	8007cc4 <TIM_Base_SetConfig+0xe8>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a0e      	ldr	r2, [pc, #56]	; (8007cf8 <TIM_Base_SetConfig+0x11c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d103      	bne.n	8007ccc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	615a      	str	r2, [r3, #20]
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40000400 	.word	0x40000400
 8007ce8:	40000800 	.word	0x40000800
 8007cec:	40013400 	.word	0x40013400
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40014400 	.word	0x40014400
 8007cf8:	40014800 	.word	0x40014800

08007cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f023 0201 	bic.w	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f023 0302 	bic.w	r3, r3, #2
 8007d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a2c      	ldr	r2, [pc, #176]	; (8007e08 <TIM_OC1_SetConfig+0x10c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00f      	beq.n	8007d7c <TIM_OC1_SetConfig+0x80>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a2b      	ldr	r2, [pc, #172]	; (8007e0c <TIM_OC1_SetConfig+0x110>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_OC1_SetConfig+0x80>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a2a      	ldr	r2, [pc, #168]	; (8007e10 <TIM_OC1_SetConfig+0x114>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_OC1_SetConfig+0x80>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a29      	ldr	r2, [pc, #164]	; (8007e14 <TIM_OC1_SetConfig+0x118>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_OC1_SetConfig+0x80>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a28      	ldr	r2, [pc, #160]	; (8007e18 <TIM_OC1_SetConfig+0x11c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d10c      	bne.n	8007d96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f023 0308 	bic.w	r3, r3, #8
 8007d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f023 0304 	bic.w	r3, r3, #4
 8007d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a1b      	ldr	r2, [pc, #108]	; (8007e08 <TIM_OC1_SetConfig+0x10c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00f      	beq.n	8007dbe <TIM_OC1_SetConfig+0xc2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a1a      	ldr	r2, [pc, #104]	; (8007e0c <TIM_OC1_SetConfig+0x110>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00b      	beq.n	8007dbe <TIM_OC1_SetConfig+0xc2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a19      	ldr	r2, [pc, #100]	; (8007e10 <TIM_OC1_SetConfig+0x114>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d007      	beq.n	8007dbe <TIM_OC1_SetConfig+0xc2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a18      	ldr	r2, [pc, #96]	; (8007e14 <TIM_OC1_SetConfig+0x118>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d003      	beq.n	8007dbe <TIM_OC1_SetConfig+0xc2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <TIM_OC1_SetConfig+0x11c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d111      	bne.n	8007de2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	621a      	str	r2, [r3, #32]
}
 8007dfc:	bf00      	nop
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40013400 	.word	0x40013400
 8007e10:	40014000 	.word	0x40014000
 8007e14:	40014400 	.word	0x40014400
 8007e18:	40014800 	.word	0x40014800

08007e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f023 0210 	bic.w	r2, r3, #16
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f023 0320 	bic.w	r3, r3, #32
 8007e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a28      	ldr	r2, [pc, #160]	; (8007f1c <TIM_OC2_SetConfig+0x100>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC2_SetConfig+0x6c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a27      	ldr	r2, [pc, #156]	; (8007f20 <TIM_OC2_SetConfig+0x104>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d10d      	bne.n	8007ea4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	011b      	lsls	r3, r3, #4
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a1d      	ldr	r2, [pc, #116]	; (8007f1c <TIM_OC2_SetConfig+0x100>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00f      	beq.n	8007ecc <TIM_OC2_SetConfig+0xb0>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a1c      	ldr	r2, [pc, #112]	; (8007f20 <TIM_OC2_SetConfig+0x104>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00b      	beq.n	8007ecc <TIM_OC2_SetConfig+0xb0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <TIM_OC2_SetConfig+0x108>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d007      	beq.n	8007ecc <TIM_OC2_SetConfig+0xb0>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a1a      	ldr	r2, [pc, #104]	; (8007f28 <TIM_OC2_SetConfig+0x10c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d003      	beq.n	8007ecc <TIM_OC2_SetConfig+0xb0>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a19      	ldr	r2, [pc, #100]	; (8007f2c <TIM_OC2_SetConfig+0x110>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d113      	bne.n	8007ef4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40012c00 	.word	0x40012c00
 8007f20:	40013400 	.word	0x40013400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40014400 	.word	0x40014400
 8007f2c:	40014800 	.word	0x40014800

08007f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a27      	ldr	r2, [pc, #156]	; (800802c <TIM_OC3_SetConfig+0xfc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d003      	beq.n	8007f9a <TIM_OC3_SetConfig+0x6a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a26      	ldr	r2, [pc, #152]	; (8008030 <TIM_OC3_SetConfig+0x100>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d10d      	bne.n	8007fb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a1c      	ldr	r2, [pc, #112]	; (800802c <TIM_OC3_SetConfig+0xfc>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00f      	beq.n	8007fde <TIM_OC3_SetConfig+0xae>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <TIM_OC3_SetConfig+0x100>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00b      	beq.n	8007fde <TIM_OC3_SetConfig+0xae>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <TIM_OC3_SetConfig+0x104>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d007      	beq.n	8007fde <TIM_OC3_SetConfig+0xae>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a19      	ldr	r2, [pc, #100]	; (8008038 <TIM_OC3_SetConfig+0x108>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d003      	beq.n	8007fde <TIM_OC3_SetConfig+0xae>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	; (800803c <TIM_OC3_SetConfig+0x10c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d113      	bne.n	8008006 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	621a      	str	r2, [r3, #32]
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	40012c00 	.word	0x40012c00
 8008030:	40013400 	.word	0x40013400
 8008034:	40014000 	.word	0x40014000
 8008038:	40014400 	.word	0x40014400
 800803c:	40014800 	.word	0x40014800

08008040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800807a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800808e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	031b      	lsls	r3, r3, #12
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a28      	ldr	r2, [pc, #160]	; (8008140 <TIM_OC4_SetConfig+0x100>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC4_SetConfig+0x6c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a27      	ldr	r2, [pc, #156]	; (8008144 <TIM_OC4_SetConfig+0x104>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d10d      	bne.n	80080c8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	031b      	lsls	r3, r3, #12
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a1d      	ldr	r2, [pc, #116]	; (8008140 <TIM_OC4_SetConfig+0x100>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00f      	beq.n	80080f0 <TIM_OC4_SetConfig+0xb0>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a1c      	ldr	r2, [pc, #112]	; (8008144 <TIM_OC4_SetConfig+0x104>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00b      	beq.n	80080f0 <TIM_OC4_SetConfig+0xb0>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a1b      	ldr	r2, [pc, #108]	; (8008148 <TIM_OC4_SetConfig+0x108>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_OC4_SetConfig+0xb0>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a1a      	ldr	r2, [pc, #104]	; (800814c <TIM_OC4_SetConfig+0x10c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_OC4_SetConfig+0xb0>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <TIM_OC4_SetConfig+0x110>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d113      	bne.n	8008118 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	019b      	lsls	r3, r3, #6
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	019b      	lsls	r3, r3, #6
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4313      	orrs	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	621a      	str	r2, [r3, #32]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40013400 	.word	0x40013400
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800

08008154 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008198:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a17      	ldr	r2, [pc, #92]	; (8008208 <TIM_OC5_SetConfig+0xb4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00f      	beq.n	80081ce <TIM_OC5_SetConfig+0x7a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a16      	ldr	r2, [pc, #88]	; (800820c <TIM_OC5_SetConfig+0xb8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00b      	beq.n	80081ce <TIM_OC5_SetConfig+0x7a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a15      	ldr	r2, [pc, #84]	; (8008210 <TIM_OC5_SetConfig+0xbc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d007      	beq.n	80081ce <TIM_OC5_SetConfig+0x7a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a14      	ldr	r2, [pc, #80]	; (8008214 <TIM_OC5_SetConfig+0xc0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_OC5_SetConfig+0x7a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a13      	ldr	r2, [pc, #76]	; (8008218 <TIM_OC5_SetConfig+0xc4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d109      	bne.n	80081e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	621a      	str	r2, [r3, #32]
}
 80081fc:	bf00      	nop
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	40012c00 	.word	0x40012c00
 800820c:	40013400 	.word	0x40013400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800

0800821c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800824a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	051b      	lsls	r3, r3, #20
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <TIM_OC6_SetConfig+0xb8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <TIM_OC6_SetConfig+0x7c>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <TIM_OC6_SetConfig+0xbc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_OC6_SetConfig+0x7c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a16      	ldr	r2, [pc, #88]	; (80082dc <TIM_OC6_SetConfig+0xc0>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_OC6_SetConfig+0x7c>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <TIM_OC6_SetConfig+0xc4>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_OC6_SetConfig+0x7c>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a14      	ldr	r2, [pc, #80]	; (80082e4 <TIM_OC6_SetConfig+0xc8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d109      	bne.n	80082ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800829e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	029b      	lsls	r3, r3, #10
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	40012c00 	.word	0x40012c00
 80082d8:	40013400 	.word	0x40013400
 80082dc:	40014000 	.word	0x40014000
 80082e0:	40014400 	.word	0x40014400
 80082e4:	40014800 	.word	0x40014800

080082e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f023 0201 	bic.w	r2, r3, #1
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <TIM_TI1_SetConfig+0xbc>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <TIM_TI1_SetConfig+0x56>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831c:	d00f      	beq.n	800833e <TIM_TI1_SetConfig+0x56>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a21      	ldr	r2, [pc, #132]	; (80083a8 <TIM_TI1_SetConfig+0xc0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d00b      	beq.n	800833e <TIM_TI1_SetConfig+0x56>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a20      	ldr	r2, [pc, #128]	; (80083ac <TIM_TI1_SetConfig+0xc4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d007      	beq.n	800833e <TIM_TI1_SetConfig+0x56>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <TIM_TI1_SetConfig+0xc8>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d003      	beq.n	800833e <TIM_TI1_SetConfig+0x56>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4a1e      	ldr	r2, [pc, #120]	; (80083b4 <TIM_TI1_SetConfig+0xcc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d101      	bne.n	8008342 <TIM_TI1_SetConfig+0x5a>
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <TIM_TI1_SetConfig+0x5c>
 8008342:	2300      	movs	r3, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d008      	beq.n	800835a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4313      	orrs	r3, r2
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e003      	b.n	8008362 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f043 0301 	orr.w	r3, r3, #1
 8008360:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	b2db      	uxtb	r3, r3
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f023 030a 	bic.w	r3, r3, #10
 800837c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f003 030a 	and.w	r3, r3, #10
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	4313      	orrs	r3, r2
 8008388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	621a      	str	r2, [r3, #32]
}
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40012c00 	.word	0x40012c00
 80083a8:	40000400 	.word	0x40000400
 80083ac:	40000800 	.word	0x40000800
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000

080083b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	f023 0201 	bic.w	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f023 030a 	bic.w	r3, r3, #10
 80083f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	f023 0210 	bic.w	r2, r3, #16
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	031b      	lsls	r3, r3, #12
 800845a:	b29b      	uxth	r3, r3
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008468:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	621a      	str	r2, [r3, #32]
}
 8008484:	bf00      	nop
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	f023 0210 	bic.w	r2, r3, #16
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	031b      	lsls	r3, r3, #12
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	621a      	str	r2, [r3, #32]
}
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 0303 	bic.w	r3, r3, #3
 800851c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800852c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	b2db      	uxtb	r3, r3
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008540:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	4313      	orrs	r3, r2
 800854e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	621a      	str	r2, [r3, #32]
}
 800855c:	bf00      	nop
 800855e:	371c      	adds	r7, #28
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008594:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	031b      	lsls	r3, r3, #12
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80085ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	031b      	lsls	r3, r3, #12
 80085c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	621a      	str	r2, [r3, #32]
}
 80085d6:	bf00      	nop
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80085f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	f043 0307 	orr.w	r3, r3, #7
 8008608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	609a      	str	r2, [r3, #8]
}
 8008610:	bf00      	nop
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	021a      	lsls	r2, r3, #8
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	431a      	orrs	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4313      	orrs	r3, r2
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	609a      	str	r2, [r3, #8]
}
 8008650:	bf00      	nop
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f003 031f 	and.w	r3, r3, #31
 800866e:	2201      	movs	r2, #1
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1a      	ldr	r2, [r3, #32]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	43db      	mvns	r3, r3
 800867e:	401a      	ands	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a1a      	ldr	r2, [r3, #32]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 031f 	and.w	r3, r3, #31
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	fa01 f303 	lsl.w	r3, r1, r3
 8008694:	431a      	orrs	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	621a      	str	r2, [r3, #32]
}
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
	...

080086a8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d109      	bne.n	80086cc <HAL_TIMEx_PWMN_Start+0x24>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	bf14      	ite	ne
 80086c4:	2301      	movne	r3, #1
 80086c6:	2300      	moveq	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	e022      	b.n	8008712 <HAL_TIMEx_PWMN_Start+0x6a>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d109      	bne.n	80086e6 <HAL_TIMEx_PWMN_Start+0x3e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b01      	cmp	r3, #1
 80086dc:	bf14      	ite	ne
 80086de:	2301      	movne	r3, #1
 80086e0:	2300      	moveq	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	e015      	b.n	8008712 <HAL_TIMEx_PWMN_Start+0x6a>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d109      	bne.n	8008700 <HAL_TIMEx_PWMN_Start+0x58>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	bf14      	ite	ne
 80086f8:	2301      	movne	r3, #1
 80086fa:	2300      	moveq	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	e008      	b.n	8008712 <HAL_TIMEx_PWMN_Start+0x6a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b01      	cmp	r3, #1
 800870a:	bf14      	ite	ne
 800870c:	2301      	movne	r3, #1
 800870e:	2300      	moveq	r3, #0
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e069      	b.n	80087ee <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <HAL_TIMEx_PWMN_Start+0x82>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008728:	e013      	b.n	8008752 <HAL_TIMEx_PWMN_Start+0xaa>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b04      	cmp	r3, #4
 800872e:	d104      	bne.n	800873a <HAL_TIMEx_PWMN_Start+0x92>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008738:	e00b      	b.n	8008752 <HAL_TIMEx_PWMN_Start+0xaa>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b08      	cmp	r3, #8
 800873e:	d104      	bne.n	800874a <HAL_TIMEx_PWMN_Start+0xa2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008748:	e003      	b.n	8008752 <HAL_TIMEx_PWMN_Start+0xaa>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2204      	movs	r2, #4
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f000 f9c0 	bl	8008ae0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800876e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a20      	ldr	r2, [pc, #128]	; (80087f8 <HAL_TIMEx_PWMN_Start+0x150>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d018      	beq.n	80087ac <HAL_TIMEx_PWMN_Start+0x104>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008782:	d013      	beq.n	80087ac <HAL_TIMEx_PWMN_Start+0x104>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1c      	ldr	r2, [pc, #112]	; (80087fc <HAL_TIMEx_PWMN_Start+0x154>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00e      	beq.n	80087ac <HAL_TIMEx_PWMN_Start+0x104>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a1b      	ldr	r2, [pc, #108]	; (8008800 <HAL_TIMEx_PWMN_Start+0x158>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d009      	beq.n	80087ac <HAL_TIMEx_PWMN_Start+0x104>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a19      	ldr	r2, [pc, #100]	; (8008804 <HAL_TIMEx_PWMN_Start+0x15c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d004      	beq.n	80087ac <HAL_TIMEx_PWMN_Start+0x104>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a18      	ldr	r2, [pc, #96]	; (8008808 <HAL_TIMEx_PWMN_Start+0x160>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d115      	bne.n	80087d8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	4b16      	ldr	r3, [pc, #88]	; (800880c <HAL_TIMEx_PWMN_Start+0x164>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b06      	cmp	r3, #6
 80087bc:	d015      	beq.n	80087ea <HAL_TIMEx_PWMN_Start+0x142>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c4:	d011      	beq.n	80087ea <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 0201 	orr.w	r2, r2, #1
 80087d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d6:	e008      	b.n	80087ea <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	e000      	b.n	80087ec <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40000400 	.word	0x40000400
 8008800:	40000800 	.word	0x40000800
 8008804:	40013400 	.word	0x40013400
 8008808:	40014000 	.word	0x40014000
 800880c:	00010007 	.word	0x00010007

08008810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008824:	2302      	movs	r3, #2
 8008826:	e065      	b.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a2c      	ldr	r2, [pc, #176]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a2b      	ldr	r2, [pc, #172]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d108      	bne.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008862:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d018      	beq.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d013      	beq.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a18      	ldr	r2, [pc, #96]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00e      	beq.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a17      	ldr	r2, [pc, #92]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a12      	ldr	r2, [pc, #72]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a13      	ldr	r2, [pc, #76]	; (8008910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d10c      	bne.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40013400 	.word	0x40013400
 8008908:	40000400 	.word	0x40000400
 800890c:	40000800 	.word	0x40000800
 8008910:	40014000 	.word	0x40014000

08008914 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800892c:	2302      	movs	r3, #2
 800892e:	e087      	b.n	8008a40 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a27      	ldr	r2, [pc, #156]	; (8008a4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d004      	beq.n	80089be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a25      	ldr	r2, [pc, #148]	; (8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d106      	bne.n	80089cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d004      	beq.n	80089e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1d      	ldr	r2, [pc, #116]	; (8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d126      	bne.n	8008a2e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	051b      	lsls	r3, r3, #20
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a0e      	ldr	r2, [pc, #56]	; (8008a4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d004      	beq.n	8008a20 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a0d      	ldr	r2, [pc, #52]	; (8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d106      	bne.n	8008a2e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	40012c00 	.word	0x40012c00
 8008a50:	40013400 	.word	0x40013400

08008a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f003 031f 	and.w	r3, r3, #31
 8008af2:	2204      	movs	r2, #4
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a1a      	ldr	r2, [r3, #32]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	43db      	mvns	r3, r3
 8008b02:	401a      	ands	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1a      	ldr	r2, [r3, #32]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	fa01 f303 	lsl.w	r3, r1, r3
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	621a      	str	r2, [r3, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
	...

08008b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b30:	b08c      	sub	sp, #48	; 0x30
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4bab      	ldr	r3, [pc, #684]	; (8008e08 <UART_SetConfig+0x2dc>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b64:	430b      	orrs	r3, r1
 8008b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4aa0      	ldr	r2, [pc, #640]	; (8008e0c <UART_SetConfig+0x2e0>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d004      	beq.n	8008b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b94:	4313      	orrs	r3, r2
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bac:	430b      	orrs	r3, r1
 8008bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	f023 010f 	bic.w	r1, r3, #15
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a91      	ldr	r2, [pc, #580]	; (8008e10 <UART_SetConfig+0x2e4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d125      	bne.n	8008c1c <UART_SetConfig+0xf0>
 8008bd0:	4b90      	ldr	r3, [pc, #576]	; (8008e14 <UART_SetConfig+0x2e8>)
 8008bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d81a      	bhi.n	8008c14 <UART_SetConfig+0xe8>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <UART_SetConfig+0xb8>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008bf5 	.word	0x08008bf5
 8008be8:	08008c05 	.word	0x08008c05
 8008bec:	08008bfd 	.word	0x08008bfd
 8008bf0:	08008c0d 	.word	0x08008c0d
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfa:	e0d6      	b.n	8008daa <UART_SetConfig+0x27e>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c02:	e0d2      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c04:	2304      	movs	r3, #4
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0a:	e0ce      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c0c:	2308      	movs	r3, #8
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c12:	e0ca      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c14:	2310      	movs	r3, #16
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c1a:	e0c6      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a7d      	ldr	r2, [pc, #500]	; (8008e18 <UART_SetConfig+0x2ec>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d138      	bne.n	8008c98 <UART_SetConfig+0x16c>
 8008c26:	4b7b      	ldr	r3, [pc, #492]	; (8008e14 <UART_SetConfig+0x2e8>)
 8008c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2c:	f003 030c 	and.w	r3, r3, #12
 8008c30:	2b0c      	cmp	r3, #12
 8008c32:	d82d      	bhi.n	8008c90 <UART_SetConfig+0x164>
 8008c34:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0x110>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c71 	.word	0x08008c71
 8008c40:	08008c91 	.word	0x08008c91
 8008c44:	08008c91 	.word	0x08008c91
 8008c48:	08008c91 	.word	0x08008c91
 8008c4c:	08008c81 	.word	0x08008c81
 8008c50:	08008c91 	.word	0x08008c91
 8008c54:	08008c91 	.word	0x08008c91
 8008c58:	08008c91 	.word	0x08008c91
 8008c5c:	08008c79 	.word	0x08008c79
 8008c60:	08008c91 	.word	0x08008c91
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	08008c91 	.word	0x08008c91
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	2300      	movs	r3, #0
 8008c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c76:	e098      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7e:	e094      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c80:	2304      	movs	r3, #4
 8008c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c86:	e090      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c88:	2308      	movs	r3, #8
 8008c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c8e:	e08c      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c90:	2310      	movs	r3, #16
 8008c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c96:	e088      	b.n	8008daa <UART_SetConfig+0x27e>
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a5f      	ldr	r2, [pc, #380]	; (8008e1c <UART_SetConfig+0x2f0>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d125      	bne.n	8008cee <UART_SetConfig+0x1c2>
 8008ca2:	4b5c      	ldr	r3, [pc, #368]	; (8008e14 <UART_SetConfig+0x2e8>)
 8008ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008cac:	2b30      	cmp	r3, #48	; 0x30
 8008cae:	d016      	beq.n	8008cde <UART_SetConfig+0x1b2>
 8008cb0:	2b30      	cmp	r3, #48	; 0x30
 8008cb2:	d818      	bhi.n	8008ce6 <UART_SetConfig+0x1ba>
 8008cb4:	2b20      	cmp	r3, #32
 8008cb6:	d00a      	beq.n	8008cce <UART_SetConfig+0x1a2>
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	d814      	bhi.n	8008ce6 <UART_SetConfig+0x1ba>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <UART_SetConfig+0x19a>
 8008cc0:	2b10      	cmp	r3, #16
 8008cc2:	d008      	beq.n	8008cd6 <UART_SetConfig+0x1aa>
 8008cc4:	e00f      	b.n	8008ce6 <UART_SetConfig+0x1ba>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ccc:	e06d      	b.n	8008daa <UART_SetConfig+0x27e>
 8008cce:	2302      	movs	r3, #2
 8008cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cd4:	e069      	b.n	8008daa <UART_SetConfig+0x27e>
 8008cd6:	2304      	movs	r3, #4
 8008cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cdc:	e065      	b.n	8008daa <UART_SetConfig+0x27e>
 8008cde:	2308      	movs	r3, #8
 8008ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ce4:	e061      	b.n	8008daa <UART_SetConfig+0x27e>
 8008ce6:	2310      	movs	r3, #16
 8008ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cec:	e05d      	b.n	8008daa <UART_SetConfig+0x27e>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a4b      	ldr	r2, [pc, #300]	; (8008e20 <UART_SetConfig+0x2f4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d125      	bne.n	8008d44 <UART_SetConfig+0x218>
 8008cf8:	4b46      	ldr	r3, [pc, #280]	; (8008e14 <UART_SetConfig+0x2e8>)
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d02:	2bc0      	cmp	r3, #192	; 0xc0
 8008d04:	d016      	beq.n	8008d34 <UART_SetConfig+0x208>
 8008d06:	2bc0      	cmp	r3, #192	; 0xc0
 8008d08:	d818      	bhi.n	8008d3c <UART_SetConfig+0x210>
 8008d0a:	2b80      	cmp	r3, #128	; 0x80
 8008d0c:	d00a      	beq.n	8008d24 <UART_SetConfig+0x1f8>
 8008d0e:	2b80      	cmp	r3, #128	; 0x80
 8008d10:	d814      	bhi.n	8008d3c <UART_SetConfig+0x210>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <UART_SetConfig+0x1f0>
 8008d16:	2b40      	cmp	r3, #64	; 0x40
 8008d18:	d008      	beq.n	8008d2c <UART_SetConfig+0x200>
 8008d1a:	e00f      	b.n	8008d3c <UART_SetConfig+0x210>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d22:	e042      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d24:	2302      	movs	r3, #2
 8008d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d2a:	e03e      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d32:	e03a      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d34:	2308      	movs	r3, #8
 8008d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d3a:	e036      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d42:	e032      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a30      	ldr	r2, [pc, #192]	; (8008e0c <UART_SetConfig+0x2e0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d12a      	bne.n	8008da4 <UART_SetConfig+0x278>
 8008d4e:	4b31      	ldr	r3, [pc, #196]	; (8008e14 <UART_SetConfig+0x2e8>)
 8008d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d5c:	d01a      	beq.n	8008d94 <UART_SetConfig+0x268>
 8008d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d62:	d81b      	bhi.n	8008d9c <UART_SetConfig+0x270>
 8008d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d68:	d00c      	beq.n	8008d84 <UART_SetConfig+0x258>
 8008d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d6e:	d815      	bhi.n	8008d9c <UART_SetConfig+0x270>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <UART_SetConfig+0x250>
 8008d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d78:	d008      	beq.n	8008d8c <UART_SetConfig+0x260>
 8008d7a:	e00f      	b.n	8008d9c <UART_SetConfig+0x270>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d82:	e012      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d84:	2302      	movs	r3, #2
 8008d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d8a:	e00e      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d8c:	2304      	movs	r3, #4
 8008d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d92:	e00a      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d94:	2308      	movs	r3, #8
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d9a:	e006      	b.n	8008daa <UART_SetConfig+0x27e>
 8008d9c:	2310      	movs	r3, #16
 8008d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da2:	e002      	b.n	8008daa <UART_SetConfig+0x27e>
 8008da4:	2310      	movs	r3, #16
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a17      	ldr	r2, [pc, #92]	; (8008e0c <UART_SetConfig+0x2e0>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	f040 80a8 	bne.w	8008f06 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008dba:	2b08      	cmp	r3, #8
 8008dbc:	d834      	bhi.n	8008e28 <UART_SetConfig+0x2fc>
 8008dbe:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <UART_SetConfig+0x298>)
 8008dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc4:	08008de9 	.word	0x08008de9
 8008dc8:	08008e29 	.word	0x08008e29
 8008dcc:	08008df1 	.word	0x08008df1
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008df7 	.word	0x08008df7
 8008dd8:	08008e29 	.word	0x08008e29
 8008ddc:	08008e29 	.word	0x08008e29
 8008de0:	08008e29 	.word	0x08008e29
 8008de4:	08008dff 	.word	0x08008dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008de8:	f7fc fe2a 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 8008dec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dee:	e021      	b.n	8008e34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008df0:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <UART_SetConfig+0x2f8>)
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008df4:	e01e      	b.n	8008e34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008df6:	f7fc fdb5 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8008dfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dfc:	e01a      	b.n	8008e34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e04:	e016      	b.n	8008e34 <UART_SetConfig+0x308>
 8008e06:	bf00      	nop
 8008e08:	cfff69f3 	.word	0xcfff69f3
 8008e0c:	40008000 	.word	0x40008000
 8008e10:	40013800 	.word	0x40013800
 8008e14:	40021000 	.word	0x40021000
 8008e18:	40004400 	.word	0x40004400
 8008e1c:	40004800 	.word	0x40004800
 8008e20:	40004c00 	.word	0x40004c00
 8008e24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 812a 	beq.w	8009090 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	4a9e      	ldr	r2, [pc, #632]	; (80090bc <UART_SetConfig+0x590>)
 8008e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e46:	461a      	mov	r2, r3
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	4413      	add	r3, r2
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d305      	bcc.n	8008e6c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d903      	bls.n	8008e74 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e72:	e10d      	b.n	8009090 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	2200      	movs	r2, #0
 8008e78:	60bb      	str	r3, [r7, #8]
 8008e7a:	60fa      	str	r2, [r7, #12]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	4a8e      	ldr	r2, [pc, #568]	; (80090bc <UART_SetConfig+0x590>)
 8008e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2200      	movs	r2, #0
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	607a      	str	r2, [r7, #4]
 8008e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e96:	f7f7 fdad 	bl	80009f4 <__aeabi_uldivmod>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f04f 0200 	mov.w	r2, #0
 8008ea6:	f04f 0300 	mov.w	r3, #0
 8008eaa:	020b      	lsls	r3, r1, #8
 8008eac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008eb0:	0202      	lsls	r2, r0, #8
 8008eb2:	6979      	ldr	r1, [r7, #20]
 8008eb4:	6849      	ldr	r1, [r1, #4]
 8008eb6:	0849      	lsrs	r1, r1, #1
 8008eb8:	2000      	movs	r0, #0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	eb12 0804 	adds.w	r8, r2, r4
 8008ec2:	eb43 0905 	adc.w	r9, r3, r5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	469a      	mov	sl, r3
 8008ece:	4693      	mov	fp, r2
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	f7f7 fd8c 	bl	80009f4 <__aeabi_uldivmod>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eea:	d308      	bcc.n	8008efe <UART_SetConfig+0x3d2>
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ef2:	d204      	bcs.n	8008efe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a3a      	ldr	r2, [r7, #32]
 8008efa:	60da      	str	r2, [r3, #12]
 8008efc:	e0c8      	b.n	8009090 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f04:	e0c4      	b.n	8009090 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f0e:	d167      	bne.n	8008fe0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008f10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d828      	bhi.n	8008f6a <UART_SetConfig+0x43e>
 8008f18:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <UART_SetConfig+0x3f4>)
 8008f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1e:	bf00      	nop
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	08008f6b 	.word	0x08008f6b
 8008f30:	08008f5b 	.word	0x08008f5b
 8008f34:	08008f6b 	.word	0x08008f6b
 8008f38:	08008f6b 	.word	0x08008f6b
 8008f3c:	08008f6b 	.word	0x08008f6b
 8008f40:	08008f63 	.word	0x08008f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f44:	f7fc fd7c 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 8008f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f4a:	e014      	b.n	8008f76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f4c:	f7fc fd8e 	bl	8005a6c <HAL_RCC_GetPCLK2Freq>
 8008f50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f52:	e010      	b.n	8008f76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f54:	4b5a      	ldr	r3, [pc, #360]	; (80090c0 <UART_SetConfig+0x594>)
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f58:	e00d      	b.n	8008f76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5a:	f7fc fd03 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8008f5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f60:	e009      	b.n	8008f76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f68:	e005      	b.n	8008f76 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 8089 	beq.w	8009090 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	4a4e      	ldr	r2, [pc, #312]	; (80090bc <UART_SetConfig+0x590>)
 8008f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f90:	005a      	lsls	r2, r3, #1
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	085b      	lsrs	r3, r3, #1
 8008f98:	441a      	add	r2, r3
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	2b0f      	cmp	r3, #15
 8008fa8:	d916      	bls.n	8008fd8 <UART_SetConfig+0x4ac>
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb0:	d212      	bcs.n	8008fd8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	f023 030f 	bic.w	r3, r3, #15
 8008fba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	8bfb      	ldrh	r3, [r7, #30]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	8bfa      	ldrh	r2, [r7, #30]
 8008fd4:	60da      	str	r2, [r3, #12]
 8008fd6:	e05b      	b.n	8009090 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fde:	e057      	b.n	8009090 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fe4:	2b08      	cmp	r3, #8
 8008fe6:	d828      	bhi.n	800903a <UART_SetConfig+0x50e>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x4c4>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009015 	.word	0x08009015
 8008ff4:	0800901d 	.word	0x0800901d
 8008ff8:	08009025 	.word	0x08009025
 8008ffc:	0800903b 	.word	0x0800903b
 8009000:	0800902b 	.word	0x0800902b
 8009004:	0800903b 	.word	0x0800903b
 8009008:	0800903b 	.word	0x0800903b
 800900c:	0800903b 	.word	0x0800903b
 8009010:	08009033 	.word	0x08009033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009014:	f7fc fd14 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 8009018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800901a:	e014      	b.n	8009046 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800901c:	f7fc fd26 	bl	8005a6c <HAL_RCC_GetPCLK2Freq>
 8009020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009022:	e010      	b.n	8009046 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009024:	4b26      	ldr	r3, [pc, #152]	; (80090c0 <UART_SetConfig+0x594>)
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009028:	e00d      	b.n	8009046 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800902a:	f7fc fc9b 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 800902e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009030:	e009      	b.n	8009046 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009038:	e005      	b.n	8009046 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009044:	bf00      	nop
    }

    if (pclk != 0U)
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d021      	beq.n	8009090 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	4a1a      	ldr	r2, [pc, #104]	; (80090bc <UART_SetConfig+0x590>)
 8009052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009056:	461a      	mov	r2, r3
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	fbb3 f2f2 	udiv	r2, r3, r2
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	441a      	add	r2, r3
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	fbb2 f3f3 	udiv	r3, r2, r3
 800906e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	2b0f      	cmp	r3, #15
 8009074:	d909      	bls.n	800908a <UART_SetConfig+0x55e>
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800907c:	d205      	bcs.n	800908a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	b29a      	uxth	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60da      	str	r2, [r3, #12]
 8009088:	e002      	b.n	8009090 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2201      	movs	r2, #1
 8009094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2201      	movs	r2, #1
 800909c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2200      	movs	r2, #0
 80090a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2200      	movs	r2, #0
 80090aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80090ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3730      	adds	r7, #48	; 0x30
 80090b4:	46bd      	mov	sp, r7
 80090b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090ba:	bf00      	nop
 80090bc:	08009b58 	.word	0x08009b58
 80090c0:	00f42400 	.word	0x00f42400

080090c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00a      	beq.n	8009176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01a      	beq.n	80091da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091c2:	d10a      	bne.n	80091da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	605a      	str	r2, [r3, #4]
  }
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af02      	add	r7, sp, #8
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009218:	f7f9 fd86 	bl	8002d28 <HAL_GetTick>
 800921c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b08      	cmp	r3, #8
 800922a:	d10e      	bne.n	800924a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800922c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f82f 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e025      	b.n	8009296 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b04      	cmp	r3, #4
 8009256:	d10e      	bne.n	8009276 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f819 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e00f      	b.n	8009296 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b09c      	sub	sp, #112	; 0x70
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ae:	e0a9      	b.n	8009404 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	f000 80a5 	beq.w	8009404 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ba:	f7f9 fd35 	bl	8002d28 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d302      	bcc.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80092ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d140      	bne.n	8009352 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092e4:	667b      	str	r3, [r7, #100]	; 0x64
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e6      	bne.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	663b      	str	r3, [r7, #96]	; 0x60
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009322:	64ba      	str	r2, [r7, #72]	; 0x48
 8009324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e069      	b.n	8009426 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	d051      	beq.n	8009404 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800936a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800936e:	d149      	bne.n	8009404 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009378:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800938e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
 800939a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800939e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e6      	bne.n	800937a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	613b      	str	r3, [r7, #16]
   return(result);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093cc:	623a      	str	r2, [r7, #32]
 80093ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	69f9      	ldr	r1, [r7, #28]
 80093d2:	6a3a      	ldr	r2, [r7, #32]
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e5      	bne.n	80093ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e010      	b.n	8009426 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69da      	ldr	r2, [r3, #28]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4013      	ands	r3, r2
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	429a      	cmp	r2, r3
 8009412:	bf0c      	ite	eq
 8009414:	2301      	moveq	r3, #1
 8009416:	2300      	movne	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	461a      	mov	r2, r3
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	429a      	cmp	r2, r3
 8009420:	f43f af46 	beq.w	80092b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3770      	adds	r7, #112	; 0x70
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e058      	b.n	80094f8 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f7f9 faf7 	bl	8002a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2224      	movs	r2, #36	; 0x24
 8009462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff fb58 	bl	8008b2c <UART_SetConfig>
 800947c:	4603      	mov	r3, r0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e038      	b.n	80094f8 <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f7ff fe18 	bl	80090c4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094a2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	055b      	lsls	r3, r3, #21
 80094bc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	041b      	lsls	r3, r3, #16
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80094d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	6812      	ldr	r2, [r2, #0]
 80094da:	6979      	ldr	r1, [r7, #20]
 80094dc:	430b      	orrs	r3, r1
 80094de:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0201 	orr.w	r2, r2, #1
 80094ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff fe89 	bl	8009208 <UART_CheckIdleState>
 80094f6:	4603      	mov	r3, r0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <HAL_UARTEx_DisableFifoMode+0x16>
 8009512:	2302      	movs	r3, #2
 8009514:	e027      	b.n	8009566 <HAL_UARTEx_DisableFifoMode+0x66>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2224      	movs	r2, #36	; 0x24
 8009522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0201 	bic.w	r2, r2, #1
 800953c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009544:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2220      	movs	r2, #32
 8009558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009586:	2302      	movs	r3, #2
 8009588:	e02d      	b.n	80095e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2224      	movs	r2, #36	; 0x24
 8009596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0201 	bic.w	r2, r2, #1
 80095b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f850 	bl	800966c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009602:	2302      	movs	r3, #2
 8009604:	e02d      	b.n	8009662 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2224      	movs	r2, #36	; 0x24
 8009612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0201 	bic.w	r2, r2, #1
 800962c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f812 	bl	800966c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009678:	2b00      	cmp	r3, #0
 800967a:	d108      	bne.n	800968e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800968c:	e031      	b.n	80096f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800968e:	2308      	movs	r3, #8
 8009690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009692:	2308      	movs	r3, #8
 8009694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	0e5b      	lsrs	r3, r3, #25
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 0307 	and.w	r3, r3, #7
 80096a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	0f5b      	lsrs	r3, r3, #29
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 0307 	and.w	r3, r3, #7
 80096b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	7b3a      	ldrb	r2, [r7, #12]
 80096ba:	4911      	ldr	r1, [pc, #68]	; (8009700 <UARTEx_SetNbDataToProcess+0x94>)
 80096bc:	5c8a      	ldrb	r2, [r1, r2]
 80096be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096c2:	7b3a      	ldrb	r2, [r7, #12]
 80096c4:	490f      	ldr	r1, [pc, #60]	; (8009704 <UARTEx_SetNbDataToProcess+0x98>)
 80096c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	7b7a      	ldrb	r2, [r7, #13]
 80096d8:	4909      	ldr	r1, [pc, #36]	; (8009700 <UARTEx_SetNbDataToProcess+0x94>)
 80096da:	5c8a      	ldrb	r2, [r1, r2]
 80096dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096e0:	7b7a      	ldrb	r2, [r7, #13]
 80096e2:	4908      	ldr	r1, [pc, #32]	; (8009704 <UARTEx_SetNbDataToProcess+0x98>)
 80096e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096f2:	bf00      	nop
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	08009b70 	.word	0x08009b70
 8009704:	08009b78 	.word	0x08009b78

08009708 <Init_MAX31855>:
#include "stm32g4xx_hal.h"
#include "..\Inc\MAX31855.h"
#include <stdbool.h>

void Init_MAX31855(SPI_HandleTypeDef *_hspi1, GPIO_TypeDef *_GPIO_CS, uint16_t _Pin_CS)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	80fb      	strh	r3, [r7, #6]
	GPIO_CS = _GPIO_CS;
 8009716:	4a0a      	ldr	r2, [pc, #40]	; (8009740 <Init_MAX31855+0x38>)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	6013      	str	r3, [r2, #0]
	Pin_CS = _Pin_CS;
 800971c:	4a09      	ldr	r2, [pc, #36]	; (8009744 <Init_MAX31855+0x3c>)
 800971e:	88fb      	ldrh	r3, [r7, #6]
 8009720:	8013      	strh	r3, [r2, #0]
	Hspi = _hspi1;
 8009722:	4a09      	ldr	r2, [pc, #36]	; (8009748 <Init_MAX31855+0x40>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6013      	str	r3, [r2, #0]
	sManager_MAX31855.StateMachineMAX31855 = MAX31855_READY;
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <Init_MAX31855+0x44>)
 800972a:	2201      	movs	r2, #1
 800972c:	705a      	strb	r2, [r3, #1]
	Cnt1ms_MAX31855 = 0;
 800972e:	4b08      	ldr	r3, [pc, #32]	; (8009750 <Init_MAX31855+0x48>)
 8009730:	2200      	movs	r2, #0
 8009732:	801a      	strh	r2, [r3, #0]
	InitAquisition_MAX31855();
 8009734:	f000 f80e 	bl	8009754 <InitAquisition_MAX31855>
}
 8009738:	bf00      	nop
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20000e90 	.word	0x20000e90
 8009744:	20000e94 	.word	0x20000e94
 8009748:	20000e98 	.word	0x20000e98
 800974c:	20000cec 	.word	0x20000cec
 8009750:	20000e8c 	.word	0x20000e8c

08009754 <InitAquisition_MAX31855>:

void InitAquisition_MAX31855(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
	CntIndexMAX31855 = 0;
 8009758:	4b04      	ldr	r3, [pc, #16]	; (800976c <InitAquisition_MAX31855+0x18>)
 800975a:	2200      	movs	r2, #0
 800975c:	801a      	strh	r2, [r3, #0]
	sManager_MAX31855.StateMachineMAX31855 = MAX31855_READY;
 800975e:	4b04      	ldr	r3, [pc, #16]	; (8009770 <InitAquisition_MAX31855+0x1c>)
 8009760:	2201      	movs	r2, #1
 8009762:	705a      	strb	r2, [r3, #1]
	HandlerAquisition_MAX31855();
 8009764:	f000 f808 	bl	8009778 <HandlerAquisition_MAX31855>
}
 8009768:	bf00      	nop
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000e8e 	.word	0x20000e8e
 8009770:	20000cec 	.word	0x20000cec
 8009774:	00000000 	.word	0x00000000

08009778 <HandlerAquisition_MAX31855>:

uint8_t tempDataSPI[4] =
{ 0 };
void HandlerAquisition_MAX31855(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
	uint32_t TimeDelay = HAL_RCC_GetHCLKFreq() <= 1E6 ? 1 : HAL_RCC_GetHCLKFreq() / 1E6; //1us
 800977e:	f7fc f953 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8009782:	4603      	mov	r3, r0
 8009784:	4a2a      	ldr	r2, [pc, #168]	; (8009830 <HandlerAquisition_MAX31855+0xb8>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d912      	bls.n	80097b0 <HandlerAquisition_MAX31855+0x38>
 800978a:	f7fc f94d 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 800978e:	4603      	mov	r3, r0
 8009790:	4618      	mov	r0, r3
 8009792:	f7f6 fe83 	bl	800049c <__aeabi_ui2d>
 8009796:	a324      	add	r3, pc, #144	; (adr r3, 8009828 <HandlerAquisition_MAX31855+0xb0>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f7 f822 	bl	80007e4 <__aeabi_ddiv>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	f7f7 f904 	bl	80009b4 <__aeabi_d2uiz>
 80097ac:	4603      	mov	r3, r0
 80097ae:	e000      	b.n	80097b2 <HandlerAquisition_MAX31855+0x3a>
 80097b0:	2301      	movs	r3, #1
 80097b2:	607b      	str	r3, [r7, #4]
	if (CntIndexMAX31855 < BUFFER_MAX31855)
 80097b4:	4b1f      	ldr	r3, [pc, #124]	; (8009834 <HandlerAquisition_MAX31855+0xbc>)
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b13      	cmp	r3, #19
 80097bc:	d82c      	bhi.n	8009818 <HandlerAquisition_MAX31855+0xa0>
	{
		if (sManager_MAX31855.StateMachineMAX31855 == MAX31855_READY)
 80097be:	4b1e      	ldr	r3, [pc, #120]	; (8009838 <HandlerAquisition_MAX31855+0xc0>)
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d12a      	bne.n	800981c <HandlerAquisition_MAX31855+0xa4>
		{
			for (uint32_t i = 0; i < TimeDelay; i++)
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e003      	b.n	80097d4 <HandlerAquisition_MAX31855+0x5c>
				asm("NOP");
 80097cc:	bf00      	nop
			for (uint32_t i = 0; i < TimeDelay; i++)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3301      	adds	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d3f7      	bcc.n	80097cc <HandlerAquisition_MAX31855+0x54>
			HAL_GPIO_WritePin(GPIO_CS, Pin_CS, GPIO_PIN_RESET); // Low State for SPI Communication
 80097dc:	4b17      	ldr	r3, [pc, #92]	; (800983c <HandlerAquisition_MAX31855+0xc4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a17      	ldr	r2, [pc, #92]	; (8009840 <HandlerAquisition_MAX31855+0xc8>)
 80097e2:	8811      	ldrh	r1, [r2, #0]
 80097e4:	2200      	movs	r2, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fb fb08 	bl	8004dfc <HAL_GPIO_WritePin>
			for (uint32_t i = 0; i < TimeDelay; i++)
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]
 80097f0:	e003      	b.n	80097fa <HandlerAquisition_MAX31855+0x82>
				asm("NOP");
 80097f2:	bf00      	nop
			for (uint32_t i = 0; i < TimeDelay; i++)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	3301      	adds	r3, #1
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d3f7      	bcc.n	80097f2 <HandlerAquisition_MAX31855+0x7a>
			HAL_SPI_Receive_DMA(Hspi, &tempDataSPI[0], 4); // DATA Transfer - Buffer Normal
 8009802:	4b10      	ldr	r3, [pc, #64]	; (8009844 <HandlerAquisition_MAX31855+0xcc>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2204      	movs	r2, #4
 8009808:	490f      	ldr	r1, [pc, #60]	; (8009848 <HandlerAquisition_MAX31855+0xd0>)
 800980a:	4618      	mov	r0, r3
 800980c:	f7fc fc26 	bl	800605c <HAL_SPI_Receive_DMA>
			sManager_MAX31855.StateMachineMAX31855 = MAX31855_RECEIVING;
 8009810:	4b09      	ldr	r3, [pc, #36]	; (8009838 <HandlerAquisition_MAX31855+0xc0>)
 8009812:	2202      	movs	r2, #2
 8009814:	705a      	strb	r2, [r3, #1]
		}
	}
	else
		Handler_MAX31855();

}
 8009816:	e001      	b.n	800981c <HandlerAquisition_MAX31855+0xa4>
		Handler_MAX31855();
 8009818:	f000 f858 	bl	80098cc <Handler_MAX31855>
}
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	f3af 8000 	nop.w
 8009828:	00000000 	.word	0x00000000
 800982c:	412e8480 	.word	0x412e8480
 8009830:	000f4240 	.word	0x000f4240
 8009834:	20000e8e 	.word	0x20000e8e
 8009838:	20000cec 	.word	0x20000cec
 800983c:	20000e90 	.word	0x20000e90
 8009840:	20000e94 	.word	0x20000e94
 8009844:	20000e98 	.word	0x20000e98
 8009848:	20000e9c 	.word	0x20000e9c

0800984c <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_CS, Pin_CS, GPIO_PIN_SET); // High State for SPI Communication
 8009854:	4b17      	ldr	r3, [pc, #92]	; (80098b4 <HAL_SPI_RxCpltCallback+0x68>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a17      	ldr	r2, [pc, #92]	; (80098b8 <HAL_SPI_RxCpltCallback+0x6c>)
 800985a:	8811      	ldrh	r1, [r2, #0]
 800985c:	2201      	movs	r2, #1
 800985e:	4618      	mov	r0, r3
 8009860:	f7fb facc 	bl	8004dfc <HAL_GPIO_WritePin>
	for (uint16_t i = 0; i < 4; i++)
 8009864:	2300      	movs	r3, #0
 8009866:	81fb      	strh	r3, [r7, #14]
 8009868:	e011      	b.n	800988e <HAL_SPI_RxCpltCallback+0x42>
	{
		DataSPI[CntIndexMAX31855 * 4 + i] = tempDataSPI[i];
 800986a:	89fa      	ldrh	r2, [r7, #14]
 800986c:	4b13      	ldr	r3, [pc, #76]	; (80098bc <HAL_SPI_RxCpltCallback+0x70>)
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	0099      	lsls	r1, r3, #2
 8009874:	89fb      	ldrh	r3, [r7, #14]
 8009876:	440b      	add	r3, r1
 8009878:	4911      	ldr	r1, [pc, #68]	; (80098c0 <HAL_SPI_RxCpltCallback+0x74>)
 800987a:	5c89      	ldrb	r1, [r1, r2]
 800987c:	4a11      	ldr	r2, [pc, #68]	; (80098c4 <HAL_SPI_RxCpltCallback+0x78>)
 800987e:	54d1      	strb	r1, [r2, r3]
		tempDataSPI[i] = 0;
 8009880:	89fb      	ldrh	r3, [r7, #14]
 8009882:	4a0f      	ldr	r2, [pc, #60]	; (80098c0 <HAL_SPI_RxCpltCallback+0x74>)
 8009884:	2100      	movs	r1, #0
 8009886:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < 4; i++)
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	3301      	adds	r3, #1
 800988c:	81fb      	strh	r3, [r7, #14]
 800988e:	89fb      	ldrh	r3, [r7, #14]
 8009890:	2b03      	cmp	r3, #3
 8009892:	d9ea      	bls.n	800986a <HAL_SPI_RxCpltCallback+0x1e>
	}
	CntIndexMAX31855++;
 8009894:	4b09      	ldr	r3, [pc, #36]	; (80098bc <HAL_SPI_RxCpltCallback+0x70>)
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b29b      	uxth	r3, r3
 800989a:	3301      	adds	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	4b07      	ldr	r3, [pc, #28]	; (80098bc <HAL_SPI_RxCpltCallback+0x70>)
 80098a0:	801a      	strh	r2, [r3, #0]
	sManager_MAX31855.StateMachineMAX31855 = MAX31855_READY;
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <HAL_SPI_RxCpltCallback+0x7c>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	705a      	strb	r2, [r3, #1]
	HandlerAquisition_MAX31855();
 80098a8:	f7ff ff66 	bl	8009778 <HandlerAquisition_MAX31855>

}
 80098ac:	bf00      	nop
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20000e90 	.word	0x20000e90
 80098b8:	20000e94 	.word	0x20000e94
 80098bc:	20000e8e 	.word	0x20000e8e
 80098c0:	20000e9c 	.word	0x20000e9c
 80098c4:	20000e3c 	.word	0x20000e3c
 80098c8:	20000cec 	.word	0x20000cec

080098cc <Handler_MAX31855>:
void Handler_MAX31855(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
	int16_t i = 0, j = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	80fb      	strh	r3, [r7, #6]
 80098d6:	2300      	movs	r3, #0
 80098d8:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIO_CS, Pin_CS, GPIO_PIN_SET); // High State for SPI Communication
 80098da:	4b56      	ldr	r3, [pc, #344]	; (8009a34 <Handler_MAX31855+0x168>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a56      	ldr	r2, [pc, #344]	; (8009a38 <Handler_MAX31855+0x16c>)
 80098e0:	8811      	ldrh	r1, [r2, #0]
 80098e2:	2201      	movs	r2, #1
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fb fa89 	bl	8004dfc <HAL_GPIO_WritePin>
	for (i = 0, j = 0; i < BUFFER_MAX31855; i++, j += 4)
 80098ea:	2300      	movs	r3, #0
 80098ec:	80fb      	strh	r3, [r7, #6]
 80098ee:	2300      	movs	r3, #0
 80098f0:	80bb      	strh	r3, [r7, #4]
 80098f2:	e050      	b.n	8009996 <Handler_MAX31855+0xca>
	{
		uData_MAX31855.Data = DataSPI[j] << 24 | DataSPI[j + 1] << 16 | DataSPI[j + 2] << 8 | DataSPI[j + 3];
 80098f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80098f8:	4a50      	ldr	r2, [pc, #320]	; (8009a3c <Handler_MAX31855+0x170>)
 80098fa:	5cd3      	ldrb	r3, [r2, r3]
 80098fc:	061a      	lsls	r2, r3, #24
 80098fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009902:	3301      	adds	r3, #1
 8009904:	494d      	ldr	r1, [pc, #308]	; (8009a3c <Handler_MAX31855+0x170>)
 8009906:	5ccb      	ldrb	r3, [r1, r3]
 8009908:	041b      	lsls	r3, r3, #16
 800990a:	431a      	orrs	r2, r3
 800990c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009910:	3302      	adds	r3, #2
 8009912:	494a      	ldr	r1, [pc, #296]	; (8009a3c <Handler_MAX31855+0x170>)
 8009914:	5ccb      	ldrb	r3, [r1, r3]
 8009916:	021b      	lsls	r3, r3, #8
 8009918:	4313      	orrs	r3, r2
 800991a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800991e:	3203      	adds	r2, #3
 8009920:	4946      	ldr	r1, [pc, #280]	; (8009a3c <Handler_MAX31855+0x170>)
 8009922:	5c8a      	ldrb	r2, [r1, r2]
 8009924:	4313      	orrs	r3, r2
 8009926:	461a      	mov	r2, r3
 8009928:	4b45      	ldr	r3, [pc, #276]	; (8009a40 <Handler_MAX31855+0x174>)
 800992a:	601a      	str	r2, [r3, #0]
		sManager_MAX31855.InternalTemperature[i] = (float) uData_MAX31855.InternalTemperature / 16.0; //Resolution 0.0625°C/bit = 1/16
 800992c:	4b44      	ldr	r3, [pc, #272]	; (8009a40 <Handler_MAX31855+0x174>)
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	f343 130b 	sbfx	r3, r3, #4, #12
 8009934:	b21b      	sxth	r3, r3
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800993e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009942:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8009946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800994a:	4a3e      	ldr	r2, [pc, #248]	; (8009a44 <Handler_MAX31855+0x178>)
 800994c:	3314      	adds	r3, #20
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	3304      	adds	r3, #4
 8009954:	edc3 7a00 	vstr	s15, [r3]
		sManager_MAX31855.ExternalTemperature[i] = (float) uData_MAX31855.ExternalTemperature / 4.0; //Resolution 0.25°C/bit = 1/4
 8009958:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <Handler_MAX31855+0x174>)
 800995a:	885b      	ldrh	r3, [r3, #2]
 800995c:	f343 038d 	sbfx	r3, r3, #2, #14
 8009960:	b21b      	sxth	r3, r3
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800996a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800996e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009976:	4a33      	ldr	r2, [pc, #204]	; (8009a44 <Handler_MAX31855+0x178>)
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	3304      	adds	r3, #4
 800997e:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0, j = 0; i < BUFFER_MAX31855; i++, j += 4)
 8009982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009986:	b29b      	uxth	r3, r3
 8009988:	3301      	adds	r3, #1
 800998a:	b29b      	uxth	r3, r3
 800998c:	80fb      	strh	r3, [r7, #6]
 800998e:	88bb      	ldrh	r3, [r7, #4]
 8009990:	3304      	adds	r3, #4
 8009992:	b29b      	uxth	r3, r3
 8009994:	80bb      	strh	r3, [r7, #4]
 8009996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800999a:	2b13      	cmp	r3, #19
 800999c:	ddaa      	ble.n	80098f4 <Handler_MAX31855+0x28>
	}
	for (i = 0; i < BUFFER_MAX31855 * 4; i++)
 800999e:	2300      	movs	r3, #0
 80099a0:	80fb      	strh	r3, [r7, #6]
 80099a2:	e00a      	b.n	80099ba <Handler_MAX31855+0xee>
		DataSPI[i] = 0;
 80099a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099a8:	4a24      	ldr	r2, [pc, #144]	; (8009a3c <Handler_MAX31855+0x170>)
 80099aa:	2100      	movs	r1, #0
 80099ac:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < BUFFER_MAX31855 * 4; i++)
 80099ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	3301      	adds	r3, #1
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	80fb      	strh	r3, [r7, #6]
 80099ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099be:	2b4f      	cmp	r3, #79	; 0x4f
 80099c0:	ddf0      	ble.n	80099a4 <Handler_MAX31855+0xd8>

	if (uData_MAX31855.Fault)
 80099c2:	4b1f      	ldr	r3, [pc, #124]	; (8009a40 <Handler_MAX31855+0x174>)
 80099c4:	789b      	ldrb	r3, [r3, #2]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d024      	beq.n	8009a1a <Handler_MAX31855+0x14e>
	{
		if (uData_MAX31855.OC_Fault)
 80099d0:	4b1b      	ldr	r3, [pc, #108]	; (8009a40 <Handler_MAX31855+0x174>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <Handler_MAX31855+0x11a>
			sManager_MAX31855.Error = ERROR_OPEN;
 80099de:	4b19      	ldr	r3, [pc, #100]	; (8009a44 <Handler_MAX31855+0x178>)
 80099e0:	2203      	movs	r2, #3
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	e01c      	b.n	8009a20 <Handler_MAX31855+0x154>
		else if (uData_MAX31855.SCG_FAULT)
 80099e6:	4b16      	ldr	r3, [pc, #88]	; (8009a40 <Handler_MAX31855+0x174>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <Handler_MAX31855+0x130>
			sManager_MAX31855.Error = ERROR_SHORTCIRCUIT_GND;
 80099f4:	4b13      	ldr	r3, [pc, #76]	; (8009a44 <Handler_MAX31855+0x178>)
 80099f6:	2202      	movs	r2, #2
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	e011      	b.n	8009a20 <Handler_MAX31855+0x154>
		else if (uData_MAX31855.SCV_Fault)
 80099fc:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <Handler_MAX31855+0x174>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <Handler_MAX31855+0x146>
			sManager_MAX31855.Error = ERROR_SHORTCIRCUIT_VCC;
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <Handler_MAX31855+0x178>)
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	e006      	b.n	8009a20 <Handler_MAX31855+0x154>
		else
			sManager_MAX31855.Error = ERROR_UNKNOWN;
 8009a12:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <Handler_MAX31855+0x178>)
 8009a14:	2204      	movs	r2, #4
 8009a16:	701a      	strb	r2, [r3, #0]
 8009a18:	e002      	b.n	8009a20 <Handler_MAX31855+0x154>
	}
	else
		sManager_MAX31855.Error = ERROR_NONE_MAX31855;
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <Handler_MAX31855+0x178>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]

	CntIndexMAX31855 = 0;
 8009a20:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <Handler_MAX31855+0x17c>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	801a      	strh	r2, [r3, #0]
	sManager_MAX31855.StateMachineMAX31855 = MAX31855_BUFFER_COMPLETE;
 8009a26:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <Handler_MAX31855+0x178>)
 8009a28:	2203      	movs	r2, #3
 8009a2a:	705a      	strb	r2, [r3, #1]
}
 8009a2c:	bf00      	nop
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20000e90 	.word	0x20000e90
 8009a38:	20000e94 	.word	0x20000e94
 8009a3c:	20000e3c 	.word	0x20000e3c
 8009a40:	20000ce8 	.word	0x20000ce8
 8009a44:	20000cec 	.word	0x20000cec
 8009a48:	20000e8e 	.word	0x20000e8e

08009a4c <InterruptControl_MAX31855>:

void InterruptControl_MAX31855(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
	if (sManager_MAX31855.StateMachineMAX31855 != MAX31855_IDLE)
 8009a50:	4b15      	ldr	r3, [pc, #84]	; (8009aa8 <InterruptControl_MAX31855+0x5c>)
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d025      	beq.n	8009aa4 <InterruptControl_MAX31855+0x58>
	{
		if (Cnt1ms_MAX31855 >= REQUEST_TEMPERATURE_MAX31855)
 8009a58:	4b14      	ldr	r3, [pc, #80]	; (8009aac <InterruptControl_MAX31855+0x60>)
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a62:	d318      	bcc.n	8009a96 <InterruptControl_MAX31855+0x4a>
		{
			if (sManager_MAX31855.StateMachineMAX31855 == MAX31855_BUFFER_COMPLETE)
 8009a64:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <InterruptControl_MAX31855+0x5c>)
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d11b      	bne.n	8009aa4 <InterruptControl_MAX31855+0x58>
			{
				sManager_MAX31855.HasDataToRead = true;
 8009a6c:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <InterruptControl_MAX31855+0x5c>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				Cnt1ms_MAX31855 = 0;
 8009a74:	4b0d      	ldr	r3, [pc, #52]	; (8009aac <InterruptControl_MAX31855+0x60>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	801a      	strh	r2, [r3, #0]
				sTempManager_MAX31855 = sManager_MAX31855;
 8009a7a:	4a0d      	ldr	r2, [pc, #52]	; (8009ab0 <InterruptControl_MAX31855+0x64>)
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <InterruptControl_MAX31855+0x5c>)
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	23a8      	movs	r3, #168	; 0xa8
 8009a84:	461a      	mov	r2, r3
 8009a86:	f000 f841 	bl	8009b0c <memcpy>
				sManager_MAX31855.StateMachineMAX31855 = MAX31855_READY;
 8009a8a:	4b07      	ldr	r3, [pc, #28]	; (8009aa8 <InterruptControl_MAX31855+0x5c>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	705a      	strb	r2, [r3, #1]
				InitAquisition_MAX31855();
 8009a90:	f7ff fe60 	bl	8009754 <InitAquisition_MAX31855>
		}
		else
			Cnt1ms_MAX31855++;

	}
}
 8009a94:	e006      	b.n	8009aa4 <InterruptControl_MAX31855+0x58>
			Cnt1ms_MAX31855++;
 8009a96:	4b05      	ldr	r3, [pc, #20]	; (8009aac <InterruptControl_MAX31855+0x60>)
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <InterruptControl_MAX31855+0x60>)
 8009aa2:	801a      	strh	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000cec 	.word	0x20000cec
 8009aac:	20000e8c 	.word	0x20000e8c
 8009ab0:	20000d94 	.word	0x20000d94

08009ab4 <memset>:
 8009ab4:	4402      	add	r2, r0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d100      	bne.n	8009abe <memset+0xa>
 8009abc:	4770      	bx	lr
 8009abe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ac2:	e7f9      	b.n	8009ab8 <memset+0x4>

08009ac4 <__libc_init_array>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	4d0d      	ldr	r5, [pc, #52]	; (8009afc <__libc_init_array+0x38>)
 8009ac8:	4c0d      	ldr	r4, [pc, #52]	; (8009b00 <__libc_init_array+0x3c>)
 8009aca:	1b64      	subs	r4, r4, r5
 8009acc:	10a4      	asrs	r4, r4, #2
 8009ace:	2600      	movs	r6, #0
 8009ad0:	42a6      	cmp	r6, r4
 8009ad2:	d109      	bne.n	8009ae8 <__libc_init_array+0x24>
 8009ad4:	4d0b      	ldr	r5, [pc, #44]	; (8009b04 <__libc_init_array+0x40>)
 8009ad6:	4c0c      	ldr	r4, [pc, #48]	; (8009b08 <__libc_init_array+0x44>)
 8009ad8:	f000 f826 	bl	8009b28 <_init>
 8009adc:	1b64      	subs	r4, r4, r5
 8009ade:	10a4      	asrs	r4, r4, #2
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	42a6      	cmp	r6, r4
 8009ae4:	d105      	bne.n	8009af2 <__libc_init_array+0x2e>
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aec:	4798      	blx	r3
 8009aee:	3601      	adds	r6, #1
 8009af0:	e7ee      	b.n	8009ad0 <__libc_init_array+0xc>
 8009af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af6:	4798      	blx	r3
 8009af8:	3601      	adds	r6, #1
 8009afa:	e7f2      	b.n	8009ae2 <__libc_init_array+0x1e>
 8009afc:	08009b88 	.word	0x08009b88
 8009b00:	08009b88 	.word	0x08009b88
 8009b04:	08009b88 	.word	0x08009b88
 8009b08:	08009b8c 	.word	0x08009b8c

08009b0c <memcpy>:
 8009b0c:	440a      	add	r2, r1
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b14:	d100      	bne.n	8009b18 <memcpy+0xc>
 8009b16:	4770      	bx	lr
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b22:	4291      	cmp	r1, r2
 8009b24:	d1f9      	bne.n	8009b1a <memcpy+0xe>
 8009b26:	bd10      	pop	{r4, pc}

08009b28 <_init>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	bf00      	nop
 8009b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2e:	bc08      	pop	{r3}
 8009b30:	469e      	mov	lr, r3
 8009b32:	4770      	bx	lr

08009b34 <_fini>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	bf00      	nop
 8009b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3a:	bc08      	pop	{r3}
 8009b3c:	469e      	mov	lr, r3
 8009b3e:	4770      	bx	lr
